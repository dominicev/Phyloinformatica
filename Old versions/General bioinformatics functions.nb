(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 10.4' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    520889,      12648]
NotebookOptionsPosition[    502834,      12116]
NotebookOutlinePosition[    503206,      12132]
CellTagsIndexPosition[    503163,      12129]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Bioinformatica", "Title",
 CellChangeTimes->{{3.713073483819521*^9, 3.7130734888979287`*^9}, {
  3.725466683613003*^9, 3.725466685515044*^9}}],

Cell[CellGroupData[{

Cell["General file operations", "Chapter",
 CellChangeTimes->{{3.7156940726597366`*^9, 3.715694075163309*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell[CellGroupData[{

Cell["Import alignment", "Subsection",
 CellChangeTimes->{{3.715694080546794*^9, 3.7156940865095997`*^9}},
 Background->RGBColor[0.9, 1, 1]],

Cell["\<\
The function below will work on either a phylip or fasta file\
\>", "Text",
 CellChangeTimes->{{3.7156940882158756`*^9, 3.7156940995663958`*^9}, 
   3.7256174965807185`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"importAlignment", "[", "filename_", "]"}], ":=", 
  RowBox[{"importAlignment", "[", 
   RowBox[{
    RowBox[{"Directory", "[", "]"}], ",", " ", "filename"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.715694411870539*^9, 3.7156944435516768`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"importAlignment", "[", 
   RowBox[{"directory_", ",", " ", "fileName_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", " ", "type", ",", " ", "output"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{"directory", "<>", "\"\<//\>\"", "<>", "fileName"}], ",", 
        " ", "\"\<Text\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"StringContainsQ", "[", 
        RowBox[{"align", ",", " ", "\"\<>\>\""}], "]"}], ",", " ", 
       RowBox[{
        RowBox[{"type", "=", "\"\<FASTA\>\""}], ";"}], ",", " ", 
       RowBox[{
        RowBox[{"type", "=", "\"\<PHYLIP\>\""}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"type", "\[Equal]", "\"\<FASTA\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"output", "=", 
         RowBox[{"fastaParser", "[", "align", "]"}]}], ";"}], ",", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"type", "\[Equal]", "\"\<PHYLIP\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"output", "=", 
         RowBox[{"phylipParser", "[", "align", "]"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "output"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.715694101812823*^9, 3.715694147900419*^9}, {
  3.715694192094038*^9, 3.7156943881845937`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Alignment file conversion",
 Background->RGBColor[0.94, 0.88, 0.94]]], "Subsection",
 CellChangeTimes->{{3.715844074813624*^9, 3.715844078596526*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"alignmentFileConverter", "[", 
   RowBox[{
   "FILENAME_String", ",", "headerPos_Integer", ",", "  ", 
    "outFormat_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "temp", ",", " ", "outTemp", ",", " ", "suffix", ",", " ", "out", ",", 
      "pad", ",", "exp"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"temp", "=", 
      RowBox[{"importAlignment", "[", "FILENAME", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"outTemp", "=", 
       RowBox[{"Switch", "[", 
        RowBox[{"inFormat", ",", " ", "\[IndentingNewLine]", 
         RowBox[{"(*", "FASTA", "*)"}], "\[IndentingNewLine]", 
         "\"\<FASTA\>\"", ",", " ", 
         RowBox[{"fastaParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<fasta\>\"", ",", " ", 
         RowBox[{"fastaParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<Fasta\>\"", ",", " ", 
         RowBox[{"fastaParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<.fas\>\"", ",", " ", 
         RowBox[{"fastaParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<.fst\>\"", ",", " ", 
         RowBox[{"fastaParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", "Phylip", "*)"}], "\[IndentingNewLine]", "\"\<PHY\>\"",
          ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<phy\>\"", ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<PHYLIP\>\"", ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<Phylip\>\"", ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<phylip\>\"", ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}], ",", 
         "\[IndentingNewLine]", "\"\<.phy\>\"", ",", " ", 
         RowBox[{"phylipParser", "[", "temp", "]"}]}]}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"to", " ", 
       RowBox[{"add", ":", " ", "NEXUS"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"]", ";"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "now", " ", "to", " ", "determine", " ", "the", " ", "ouput", " ", 
       "format"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"Switch", "[", 
       RowBox[{"outFormat", ",", " ", "\[IndentingNewLine]", 
        RowBox[{"(*", "FASTA", "*)"}], "\[IndentingNewLine]", "\"\<FASTA\>\"",
         ",", " ", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.fas\>\""}], ";", 
         RowBox[{"fastaOutput", "[", "temp", "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<fasta\>\"", ",", " ", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.fas\>\""}], ";", 
         RowBox[{"fastaOutput", "[", "temp", "]"}]}], ",", 
        "\[IndentingNewLine]", "\"\<Fasta\>\"", ",", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.fas\>\""}], ";", " ", 
         RowBox[{"fastaOutput", "[", "temp", "]"}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", "Phylip", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"pad", "=", "70"}], ";", "\[IndentingNewLine]", 
         "\"\<PHYLIP\>\""}], ",", " ", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.phy\>\""}], ";", 
         RowBox[{"toPhylip", "[", 
          RowBox[{"temp", ",", " ", "headerPos", ",", " ", "pad"}], "]"}]}], 
        ",", "\[IndentingNewLine]", "\"\<Phylip\>\"", ",", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.phy\>\""}], ";", " ", 
         RowBox[{"toPhylip", "[", 
          RowBox[{"temp", ",", " ", "headerPos", ",", " ", "pad"}], "]"}]}], 
        ",", "\[IndentingNewLine]", "\"\<phylip\>\"", ",", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.phy\>\""}], ";", " ", 
         RowBox[{"toPhylip", "[", 
          RowBox[{"temp", ",", " ", "headerPos", ",", " ", "pad"}], "]"}]}], 
        ",", "\[IndentingNewLine]", "\"\<phy\>\"", ",", "  ", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.phy\>\""}], ";", 
         RowBox[{"toPhylip", "[", 
          RowBox[{"temp", ",", " ", "headerPos", ",", " ", "pad"}], "]"}]}], 
        ",", "\[IndentingNewLine]", "\"\<PHY\>\"", ",", "  ", 
        RowBox[{
         RowBox[{"suffix", "=", "\"\<.phy\>\""}], ";", 
         RowBox[{"toPhylip", "[", 
          RowBox[{"temp", ",", " ", "headerPos", ",", " ", "pad"}], "]"}]}]}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"to", " ", 
         RowBox[{"add", ":", " ", "NEXUS"}]}], "*)"}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"outFormat", "\[Equal]", "\"\<Nexus\>\""}], ",", 
       RowBox[{
        RowBox[{"suffix", "=", "\"\<.nex\>\""}], ";", 
        RowBox[{"out", "=", " ", 
         RowBox[{"temp", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
        RowBox[{"exp", "=", "\"\<nexus\>\""}]}], ",", " ", 
       RowBox[{"exp", "=", "\"\<other\>\""}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "exp", ",", "\[IndentingNewLine]", "\"\<other\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Export", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{"FILENAME", ",", " ", "\"\<.\>\""}], "]"}], ",", 
                RowBox[{"-", "1"}]}], "]"}], ",", " ", "\"\<.\>\""}], "]"}], "//",
             "StringJoin"}], ")"}], "<>", "suffix"}], ",", 
         RowBox[{"out", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", 
         "\"\<String\>\""}], "]"}], ",", "\[IndentingNewLine]", 
       "\"\<nexus\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{"FILENAME", ",", " ", "\"\<.\>\""}], "]"}], ",", 
                RowBox[{"-", "1"}]}], "]"}], ",", " ", "\"\<.\>\""}], "]"}], "//",
             "StringJoin"}], ")"}], "<>", "suffix"}], ",", "out", ",", 
         "\"\<Nexus\>\""}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.715844096349358*^9, 3.7158447141903286`*^9}, {
   3.715844782608392*^9, 3.715844785040742*^9}, {3.7222346753570776`*^9, 
   3.722234735476507*^9}, {3.7222348126700926`*^9, 3.7222348314062014`*^9}, {
   3.7222351046186495`*^9, 3.7222351702516375`*^9}, {3.722235220319625*^9, 
   3.722235221114349*^9}, 3.722235329708692*^9, {3.722235412513688*^9, 
   3.7222354142272234`*^9}, {3.7222354815291543`*^9, 3.722235485780938*^9}, {
   3.72223551730501*^9, 3.7222355424125423`*^9}, {3.7253527909994335`*^9, 
   3.7253529915976152`*^9}, {3.725353038027069*^9, 3.725353040175877*^9}, {
   3.7253530780849648`*^9, 3.725353091335226*^9}, 3.7253531959868217`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Import partition file", "Subsection",
 CellChangeTimes->{{3.715782328106296*^9, 3.7157823319714556`*^9}},
 Background->RGBColor[0.94, 0.88, 0.94]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"partitionFileImporter", "[", "partitions_", "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "p1", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"p1", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringSplit", "[", 
            RowBox[{"#", ",", " ", "\"\<=\>\""}], "]"}], "&"}], "/@", 
          RowBox[{"StringSplit", "[", 
           RowBox[{"partitions", ",", "\"\<\n\>\""}], "]"}]}], ")"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ploci", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTrim", "/@", 
             RowBox[{"StringSplit", "[", 
              RowBox[{"#", ",", " ", "\"\<,\>\""}], "]"}]}], "&"}], "/@", 
           RowBox[{"p1", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ptypes", "=", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTrim", "/@", 
             RowBox[{"StringSplit", "[", 
              RowBox[{"#", ",", " ", "\"\<,\>\""}], "]"}]}], "&"}], "/@", 
           RowBox[{"p1", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"parts", "=", 
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{
                  RowBox[{"#", "//", "StringTrim"}], ",", " ", "\"\<-\>\""}], 
                 "]"}], "&"}], "/@", 
               RowBox[{"StringSplit", "[", 
                RowBox[{"#", ",", " ", "\"\<,\>\""}], "]"}]}], "&"}], "/@", 
             RowBox[{"{", "#", "}"}]}], "&"}], "/@", 
           RowBox[{"StringTrim", "/@", 
            RowBox[{"p1", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ",", " ", 
          "1"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]"}]}]], "Input",
 CellChangeTimes->{{3.715782363954442*^9, 3.7157828426774387`*^9}, {
  3.7157829461609163`*^9, 3.7157829504167147`*^9}, {3.7157829921412516`*^9, 
  3.715782998595045*^9}, {3.715783081422406*^9, 3.715783111762165*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Make a table from alignment headers", "Subsection",
 CellChangeTimes->{{3.722837567288227*^9, 3.7228375816618147`*^9}},
 Background->RGBColor[0.9, 1, 1]],

Cell[TextData[{
 "This function will make a \[OpenCurlyDoubleQuote].csv\
\[CloseCurlyDoubleQuote] file of any number of available entries from the \
entry headers in a Phylip of FASTA file.",
 StyleBox["\n\nlistName",
  FontWeight->"Bold"],
 " = a string with the name of the file, including the file suffix\n",
 StyleBox["fastaFile",
  FontWeight->"Bold"],
 " = a phylip or fasta file in the current working directory\n",
 StyleBox["headerPositions",
  FontWeight->"Bold"],
 " = a list of integers representing the positions in the fasta Parsed object \
version of the fastaFile you want to turn into a table."
}], "Text",
 CellChangeTimes->{{3.7228375986387978`*^9, 3.7228377502332883`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportFastaHeadTable", "[", 
   RowBox[{"listName_", ",", "fastaFile_", ",", " ", "headerPositions_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"Export", "[", 
     RowBox[{"listName", ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"importAlignment", "[", "fastaFile", "]"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "1", ",", " ", "headerPositions"}], "]"}], 
        "]"}], "//", "Union"}], ",", " ", "\"\<CSV\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell["\<\
This function does the same thing as above but it takes multiple files as \
input.\
\>", "Text",
 CellChangeTimes->{{3.722837755805502*^9, 3.7228377724350777`*^9}, 
   3.722837905741976*^9}],

Cell[TextData[{
 StyleBox["listName",
  FontWeight->"Bold"],
 " = a string with the name of the file, including the file suffix\n",
 StyleBox["fastaFileDirectory",
  FontWeight->"Bold"],
 " = a string  with the directory of a folder than only contains a fasta or \
phylip files.\n",
 StyleBox["headerPositions",
  FontWeight->"Bold"],
 " = a list of integers representing the positions in the fasta Parsed "
}], "Text",
 CellChangeTimes->{{3.722837912404467*^9, 3.7228379463445344`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportAllFastaHeaders", "[", 
   RowBox[{
   "listName_", ",", "fastaFileDirectory_", ",", " ", "headerPositions_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fn", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "fastaFileDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fn", "=", 
      RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"listName", ",", "\[IndentingNewLine]", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"ParallelMap", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{"importAlignment", "[", "#", "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "1", ",", " ", "headerPositions"}],
                   "]"}], "]"}], "//", "Union"}], ")"}], "&"}], ",", "fn"}], 
            "]"}], ",", " ", "1"}], "]"}], "//", "Union"}], ")"}], 
       "\[IndentingNewLine]", ",", " ", "\"\<CSV\>\""}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7228380487876325`*^9, 3.722838049881645*^9}, {
  3.722838107236412*^9, 3.7228381168674283`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Make similar export file names",
 Background->RGBColor[1, 0.9, 1]]], "Subsection",
 CellChangeTimes->{{3.7230135075211515`*^9, 3.7230135444416637`*^9}}],

Cell["\<\
This function is just an easy way to switch the file name based on the file \
type suffix. If it is a .fas it turns it into a .fasta. even if you import it \
as a .nex, or .phy it will still export it as .fas, so this only works if you \
export as FASTA file type. It actually still does work but the file name \
would misrepresent the actual contents of the file.\
\>", "Text",
 CellChangeTimes->{{3.723013956645451*^9, 3.72301404295899*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"exportFileRename", "[", "fileName_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "split", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"suffix", "=", 
      RowBox[{
       RowBox[{"Take", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"split", "=", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"fileName", ",", " ", "\"\<.\>\""}], "]"}]}], ")"}], ",", 
         " ", 
         RowBox[{"-", "1"}]}], "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"suffix", "\[Equal]", "\"\<fas\>\""}], ",", " ", 
       RowBox[{"nSuf", "=", "\"\<.fasta\>\""}], ",", "  ", 
       RowBox[{"nSuf", "=", "\"\<.fas\>\""}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"split", "//", "Length"}], ")"}], ">", "2"}], ",", " ", 
        RowBox[{
         RowBox[{"Riffle", "[", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"split", ",", 
             RowBox[{"-", "1"}]}], "]"}], ",", " ", "\"\<.\>\""}], "]"}], "//",
          "StringJoin"}], ",", " ", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"split", ",", 
           RowBox[{"-", "1"}]}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], "<>",
       "nSuf"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.723013515508649*^9, 3.7230135275834756`*^9}, {
  3.723013558396392*^9, 3.72301370115368*^9}, {3.723013732259297*^9, 
  3.723013838319021*^9}, {3.72301387080472*^9, 3.7230138719746327`*^9}, {
  3.7230139050083923`*^9, 3.7230139466137724`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Move files",
 FontColor->RGBColor[1, 0, 1]]], "Subsection",
 CellChangeTimes->{{3.7135348244528055`*^9, 3.713534826517008*^9}}],

Cell[TextData[{
 "This function compares a file list against a list of names and takes the \
files with names shared by the list and moves them to a new directory.\n\n",
 StyleBox["fileDir - ",
  FontWeight->"Bold"],
 "is the string directory your files are in\n",
 StyleBox["nameList",
  FontWeight->"Bold"],
 " - is the list of names contained within the file names you want to move\n",
 StyleBox["folderName ",
  FontWeight->"Bold"],
 "- is a string that will be the name of the directory you want to move the \
files to."
}], "Text",
 CellChangeTimes->{{3.7135348283453293`*^9, 3.7135348728951607`*^9}, {
  3.713536094851915*^9, 3.713536172648449*^9}, {3.723380916051984*^9, 
  3.723380916832124*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"moveFiles", "[", 
   RowBox[{
   "fileDir_String", ",", "nameList_List", ",", " ", "folderName_String"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "fileDirectory", ",", " ", "moveDirectory", ",", " ", "filePositon", ",",
       " ", "deleteList"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fileDirectory", "=", 
      RowBox[{"SetDirectory", "[", "fileDir", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"moveDirectory", "=", 
      RowBox[{"CreateDirectory", "[", 
       RowBox[{
        RowBox[{"ParentDirectory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
        "folderName"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"filePositon", "=", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"StringContainsQ", "[", 
                 RowBox[{"#", ",", " ", 
                  RowBox[{"nameList", "[", 
                   RowBox[{"[", "i", "]"}], "]"}]}], " ", "]"}], "&"}], "/@", 
               RowBox[{"FileNames", "[", "]"}]}], ",", " ", "True"}], "]"}], "//",
             "Flatten"}], ")"}], "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"CopyFile", "[", 
         RowBox[{
          RowBox[{"fileDirectory", "<>", "\"\<\\\\\>\"", "<>", 
           RowBox[{
            RowBox[{"FileNames", "[", "]"}], "[", 
            RowBox[{"[", "filePositon", "]"}], "]"}]}], ",", 
          RowBox[{"moveDirectory", "<>", "\"\<\\\\\>\"", "<>", 
           RowBox[{
            RowBox[{"FileNames", "[", "]"}], "[", 
            RowBox[{"[", "filePositon", "]"}], "]"}]}]}], "]"}], ";"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"DeleteFile", "[", 
          RowBox[{"fileDirectory", "<>", "\"\<\\\\\>\"", "<>", 
           RowBox[{
            RowBox[{"FileNames", "[", "]"}], "[", 
            RowBox[{"[", "filePositon", "]"}], "]"}]}], "]"}], ";"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "nameList", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SetDirectory", "[", 
      RowBox[{
       RowBox[{"ParentDirectory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
       "folderName"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"deleteList", "=", 
      RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"SetDirectory", "[", "fileDir", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"DeleteFile", "[", "#", "]"}], "&"}], "/@", "deleteList"}]}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713535002726858*^9, 3.713535039647683*^9}, {
  3.7135350756881533`*^9, 3.713535109937098*^9}, {3.7135352325371475`*^9, 
  3.7135352383818703`*^9}, {3.7135353246702642`*^9, 3.7135353343814745`*^9}, {
  3.713535906702976*^9, 3.7135359068904905`*^9}, {3.7135359831131644`*^9, 
  3.7135360703279114`*^9}, {3.7135361803596387`*^9, 3.7135361815785675`*^9}, {
  3.7135362704803753`*^9, 3.7135362942189426`*^9}, {3.7135365856377697`*^9, 
  3.7135366774594355`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Nexus file operations", "Chapter",
 CellChangeTimes->{{3.715696190585793*^9, 3.715696199055795*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell[CellGroupData[{

Cell["Nexus file import elements", "Subsection",
 CellChangeTimes->{{3.71569983647851*^9, 3.715699838710758*^9}, {
  3.715699908315197*^9, 3.71569990974479*^9}}],

Cell["\<\
The script below imports a simplified nexus file without all the leading \
information. It basically just treats it like a phylip file.\
\>", "Text",
 CellChangeTimes->{{3.715696584664774*^9, 3.7156966098973484`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nexusSimpleParser", "[", "nexusString_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"StringTrim", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringSplit", "[", 
             RowBox[{"nexusString", ",", "\"\<MATRIX\n\>\""}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", "\"\<END;\>\""}], "]"}],
          "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\<;\>\""}], "]"}], "//",
       "StringTrim"}], "//", "phylipParser"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.715696209356185*^9, 3.7156963640320196`*^9}, {
  3.715696446509368*^9, 3.7156964469163675`*^9}, {3.71569652047897*^9, 
  3.715696523663847*^9}}],

Cell["\<\
The script below will take the \[OpenCurlyDoubleQuote]SETS\
\[CloseCurlyDoubleQuote] Section from a Nexus file and parse it to extract \
the set boundaries, and set names.\
\>", "Text",
 CellChangeTimes->{{3.7156995978999724`*^9, 3.715699651214761*^9}, {
  3.7156998252103453`*^9, 3.7156998264771338`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"nexusSetsParser", "[", "nexusString_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "ranges", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ranges", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTrim", "/@", 
            RowBox[{"StringSplit", "[", 
             RowBox[{"#", ",", " ", "\"\<=\>\""}], "]"}]}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{
             RowBox[{"StringTrim", "[", 
              RowBox[{"#", ",", " ", "\"\<;\>\""}], "]"}], "&"}], "/@", 
            RowBox[{"StringTrim", "/@", 
             RowBox[{"StringSplit", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringSplit", "[", 
                    RowBox[{"nexusString", ",", " ", 
                    RowBox[{"{", "\"\<BEGIN SETS;\>\"", "}"}]}], "]"}], "[", 
                   RowBox[{"[", "2", "]"}], "]"}], ",", " ", "\"\<END;\>\""}],
                  "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\<\n\>\""}], 
              "]"}]}]}], ")"}]}], ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", " ", "2"}], "}"}]}], "\[IndentingNewLine]", 
         "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"StringSplit", "[", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\<charset \>\""}], 
            "]"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "//", "ToExpression"}]}], "}"}], 
        "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"#", ",", " ", "\"\<-\>\""}], "]"}], ")"}], "&"}], "/@", 
         "ranges"}], ")"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.715696618912123*^9, 3.7156973731769514`*^9}, {
   3.7156996739353313`*^9, 3.7156998156567345`*^9}, 3.716784452784067*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Phylip file operations", "Chapter",
 CellChangeTimes->{{3.7126821426726537`*^9, 3.7126821482669125`*^9}, 
   3.7135233597811933`*^9},
 Background->RGBColor[0.9, 1, 1]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Parsing PHYLIP files",
 Background->RGBColor[1, 0.9, 1]]], "Subsection",
 CellChangeTimes->{{3.695382744686174*^9, 3.695382756083974*^9}}],

Cell["\<\
The function below creates a \[OpenCurlyDoubleQuote]fasta list\
\[CloseCurlyDoubleQuote] style object when importing a phylip formatted file.\
\>", "Text",
 CellChangeTimes->{{3.7156940305698905`*^9, 3.7156940609022036`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"phylipParser", "[", "phylipString_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "//", "StringTrim"}], "}"}], ",", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "//", "StringTrim"}]}], " ", "}"}], 
      "&"}], "/@", 
     RowBox[{"Partition", "[", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{
         RowBox[{"StringSplit", "[", "phylipString", "]"}], ",", " ", "2"}], 
        "]"}], ",", " ", "2"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7156937867215967`*^9, 3.715693890848851*^9}, {
   3.7156939904229946`*^9, 3.7156939998000307`*^9}, 3.715694358342593*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Converting FASTA to Phylip",
 Background->RGBColor[1, 0.9, 0.8]]], "Subsection",
 CellChangeTimes->{{3.7139309161753807`*^9, 3.7139309202717524`*^9}}],

Cell[TextData[{
 "The function below will take a fastaParsed object and export it as a PHYLIP \
file. The input is:\n",
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " - a fastaParsed list\n",
 StyleBox["headerPosition",
  FontWeight->"Bold"],
 " - an integer representing the part of the fasta header you want to turn \
into the phylip headers. Usually this will be the taxon name.\n",
 StyleBox["padLength",
  FontWeight->"Bold"],
 " - the amount of whitespace you want after your taxon name. This should be \
some number greater than the longest taxon name."
}], "Text",
 CellChangeTimes->{{3.7139321901451764`*^9, 3.713932343733986*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"toPhylip", "[", 
   RowBox[{
   "fastaParsed_", ",", " ", "headerPosition_", ",", " ", "padLength_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"(", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"#", ",", "\"\<\n\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"Prepend", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"StringJoin", "[", 
             RowBox[{
              RowBox[{"StringPadRight", "[", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", " ", "headerPosition"}], "]"}], "]"}], 
                ",", "padLength"}], " ", "]"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", " ", "2", "]"}], "]"}]}], "]"}], "&"}], "/@", 
           "fastaParsed"}], ")"}], "\[IndentingNewLine]", 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{"StringJoin", "[", 
          RowBox[{
           RowBox[{"ToString", "[", 
            RowBox[{"fastaParsed", "//", "Length"}], "]"}], ",", " ", 
           "\"\<\\t\>\"", ",", 
           RowBox[{"ToString", "[", " ", 
            RowBox[{
             RowBox[{"fastaParsed", "[", 
              RowBox[{"[", 
               RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "//", 
             "StringLength"}], "]"}]}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", ")"}], "//", 
     "StringJoin"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713931672681177*^9, 3.7139317077579737`*^9}, {
  3.7139319182244015`*^9, 3.7139319805897417`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"toPhylip", "[", "fastaParsed_", "]"}], ":=", 
  RowBox[{"toPhylip", "[", 
   RowBox[{"fastaParsed", ",", " ", "1", ",", " ", "70"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7158426922630315`*^9, 3.715842740491543*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"toPhylip", "[", 
   RowBox[{"fastaParsed_", ",", " ", "padLength_"}], "]"}], ":=", 
  RowBox[{"toPhylip", "[", 
   RowBox[{"fastaParsed", ",", " ", "1", ",", " ", "padLength"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7158428439131947`*^9, 3.7158428578776717`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["FASTA file operations and other", "Chapter",
 CellChangeTimes->{{3.7126821537050714`*^9, 3.7126821577841716`*^9}, {
  3.7156999175888166`*^9, 3.715699929155805*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Basic",
 Background->RGBColor[1, 0.9, 0.8]]], "Subchapter",
 CellChangeTimes->{{3.7220721997212157`*^9, 3.722072208358181*^9}}],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Importing, parsing and exporting FASTA files",
 Background->RGBColor[1, 0.925, 0.925]]], "Subsection",
 CellChangeTimes->{{3.686377109780882*^9, 3.6863771159789248`*^9}, 
   3.686377771512663*^9, {3.686382341526272*^9, 3.686382342991638*^9}, {
   3.722072233573291*^9, 3.7220722482282553`*^9}}],

Cell["\<\
Input format is a string that contains the textfile version of the FASTA \
file. In accordance with genBank conventions,  the parts of the header are \
considered to be are separated by \[OpenCurlyDoubleQuote]|\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote];\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.6863771956223*^9, 3.686377220710153*^9}, {
  3.6863773008562946`*^9, 3.6863773609891634`*^9}, {3.7106478089737015`*^9, 
  3.7106478101315966`*^9}, {3.7137535766665754`*^9, 3.7137535769174585`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaParser", "[", "fastaString_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "seqBlock", ",", " ", "front", ",", " ", "back", ",", " ", "all", ",", 
      " ", "head"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqBlock", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{
        RowBox[{"fastaString", "//", "StringTrim"}], ",", " ", "\"\<>\>\""}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"all", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", " ", "\"\<\n\>\""}], "]"}], "&"}], "/@", 
       "seqBlock"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"front", "=", 
      RowBox[{"all", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"back", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", " ", "1"}], "]"}], ",", " ", 
            "WhitespaceCharacter"}], "]"}], "//", "StringJoin"}], ")"}], 
        "&"}], "/@", "all"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"head", "=", 
      RowBox[{"StringTrim", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"StringSplit", "[", 
             RowBox[{
              RowBox[{"StringReplace", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"\"\<.\>\"", "\[Rule]", "\"\< \>\""}]}], "]"}], ",", 
              " ", 
              RowBox[{"{", 
               RowBox[{"\"\<|\>\"", ",", " ", "\"\<;\>\""}], "}"}]}], "]"}], 
            ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\< \>\"", ",", " ", "\"\<\n\>\""}], "}"}]}], "]"}], 
          "&"}], "/@", "front"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"head", ",", " ", "back"}], "}"}], "//", "Transpose"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6863772246363907`*^9, 3.686377295991845*^9}, {
  3.6863773645864887`*^9, 3.686377527523694*^9}, {3.6863775894170628`*^9, 
  3.686377710617614*^9}, {3.686377755712676*^9, 3.6863777590341797`*^9}, {
  3.686377952895837*^9, 3.6863779553337555`*^9}, {3.6863780488759146`*^9, 
  3.6863780861907187`*^9}, {3.686381445737397*^9, 3.686381640673885*^9}, {
  3.6863817455024743`*^9, 3.6863818894668503`*^9}, {3.6863821204712496`*^9, 
  3.6863821206077375`*^9}, {3.712557141668311*^9, 3.7125571872635016`*^9}, {
  3.712684688513492*^9, 3.7126846934738007`*^9}, {3.712896271880541*^9, 
  3.7128963262868443`*^9}}],

Cell["\<\
This is the same as above but now you can define the delimiters.\
\>", "Text",
 CellChangeTimes->{{3.713753583402532*^9, 3.713753608668769*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaParser", "[", 
   RowBox[{"fastaString_", ",", " ", 
    RowBox[{"{", "delimiters__", "}"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "seqBlock", ",", " ", "front", ",", " ", "back", ",", " ", "all", ",", 
      " ", "head"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqBlock", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{
        RowBox[{"fastaString", "//", "StringTrim"}], ",", " ", "\"\<>\>\""}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"all", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", " ", "\"\<\n\>\""}], "]"}], "&"}], "/@", 
       "seqBlock"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"front", "=", 
      RowBox[{"all", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"back", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", " ", "1"}], "]"}], ",", " ", 
            "WhitespaceCharacter"}], "]"}], "//", "StringJoin"}], ")"}], 
        "&"}], "/@", "all"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"head", "=", 
      RowBox[{"StringTrim", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"DeleteCases", "[", 
           RowBox[{
            RowBox[{"StringSplit", "[", 
             RowBox[{
              RowBox[{"StringReplace", "[", 
               RowBox[{"#", ",", " ", 
                RowBox[{"\"\<.\>\"", "\[Rule]", "\"\< \>\""}]}], "]"}], ",", 
              " ", 
              RowBox[{"{", "delimiters", "}"}]}], "]"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"\"\< \>\"", ",", " ", "\"\<\n\>\""}], "}"}]}], "]"}], 
          "&"}], "/@", "front"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"head", ",", " ", "back"}], "}"}], "//", "Transpose"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713753325510624*^9, 3.713753353408825*^9}, {
  3.713753615042513*^9, 3.7137536243536453`*^9}}],

Cell["\<\
The function below takes the format that is the same as the output of the \
above file\
\>", "Text",
 CellChangeTimes->{{3.686382345209994*^9, 3.6863823599700346`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaOutput", "[", "fpOUT_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"heads", ",", " ", "backs"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"heads", "=", 
      RowBox[{"fpOUT", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"backs", "=", 
      RowBox[{"fpOUT", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"heads", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"\"\< \n>\>\"", "<>", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"#", "//", "StringTrim"}], ",", " ", "\"\<|\>\""}], "]"}],
           "]"}], "<>", "\"\< \n\>\""}], "&"}], "/@", "heads"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<\n\>\"", "<>", "#"}], "&"}], "/@", "heads"}], ")"}], 
         ",", " ", 
         RowBox[{"(", 
          RowBox[{"StringTrim", "/@", "backs"}], ")"}]}], " ", "]"}], "//", 
       "StringJoin"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.686382363574012*^9, 3.686382509263604*^9}, {
   3.6863825668969436`*^9, 3.686382685979522*^9}, 3.6863827221697326`*^9, {
   3.6863827568171005`*^9, 3.686382849773849*^9}, {3.686386597575861*^9, 
   3.686386598126605*^9}, {3.686386899310522*^9, 3.686386903051895*^9}, {
   3.712568547889188*^9, 3.7125686034452295`*^9}, {3.7125686372063656`*^9, 
   3.7125686521571684`*^9}, 3.712660768070114*^9, 3.71266081463723*^9, {
   3.7126608667901893`*^9, 3.7126608702991695`*^9}, {3.712660903983343*^9, 
   3.712660905472395*^9}, {3.712660990482071*^9, 3.712661018037268*^9}, 
   3.7126611059804583`*^9, {3.7128964128632865`*^9, 3.712896416252945*^9}, {
   3.7128964842824507`*^9, 3.7128964969089766`*^9}, {3.712896527050166*^9, 
   3.712896530374894*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaOutput", "[", 
   RowBox[{"fpOUT_", ",", " ", "delimiter_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"heads", ",", " ", "backs"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"heads", "=", 
      RowBox[{"fpOUT", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"backs", "=", 
      RowBox[{"fpOUT", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"heads", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"\"\< \n>\>\"", "<>", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"StringTrim", "/@", "#"}], ",", " ", "\"\< \>\""}], "]"}],
           "]"}], "<>", "\"\< \n\>\""}], "&"}], "/@", "heads"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"StringTrim", "[", 
      RowBox[{
       RowBox[{"Riffle", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"\"\<\n\>\"", "<>", "#"}], "&"}], "/@", "heads"}], ")"}], 
         ",", " ", 
         RowBox[{"(", 
          RowBox[{"StringTrim", "/@", "backs"}], ")"}]}], " ", "]"}], "//", 
       "StringJoin"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7137540120761585`*^9, 3.7137540447459455`*^9}, {
  3.71375415930793*^9, 3.713754180088777*^9}, {3.7137547113568497`*^9, 
  3.7137547169727187`*^9}}],

Cell["\<\
The function below will take a name and a fastaParsed object and export it to \
the working directory. The fileName MUST have some kind of file name \
extension (suffix). Otherwise it won\[CloseCurlyQuote]t work.\
\>", "Text",
 CellChangeTimes->{{3.7238763599098682`*^9, 3.723876399623688*^9}, {
  3.7238764670355434`*^9, 3.723876492794526*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaExport", "[", 
   RowBox[{"fileName_String", ",", "fastaParsed_List"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"fileName", "//", "exportFileRename"}], ",", " ", 
    RowBox[{"fastaParsed", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7238762658339553`*^9, 3.723876382401402*^9}, {
  3.723876502639124*^9, 3.723876512782235*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Renaming FASTA files",
 Background->RGBColor[1, 0.85, 0.85]]], "Subsection",
 CellChangeTimes->{{3.711959197742427*^9, 3.711959204088601*^9}}],

Cell["\<\
The code below will rename fasta files by prepending a block from the fasta \
headers. Note that the fasta file MUST contain THE SAME value in all the \
headers at that block.\
\>", "Text",
 CellChangeTimes->{{3.7119592073003087`*^9, 3.7119592702407455`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"prependFastaFileName", "[", 
   RowBox[{
   "directory_String", ",", " ", "filenames_", ",", " ", 
    "fastaPartToPrepend_Integer"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "directory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"RenameFile", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Import", "[", 
                   RowBox[{"#", ",", " ", "\"\<String\>\""}], "]"}], "//", 
                  "fastaParser"}], ")"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "[", 
               RowBox[{"[", " ", 
                RowBox[{"All", ",", " ", "fastaPartToPrepend"}], "]"}], "]"}],
               "//", "Union"}], ")"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<_\>\"", "<>", "#"}]}], 
         "]"}], ")"}], "&"}], "/@", "filenames"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input"],

Cell["\<\
The code below will entirely rename a file using the FASTA headers by making \
a copy\
\>", "Text",
 CellChangeTimes->{{3.7125714065987797`*^9, 3.7125714220973244`*^9}, {
  3.7126498432365885`*^9, 3.7126498450350494`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"renameFastaWH", "[", 
   RowBox[{
   "directory_String", ",", " ", "filenames_", ",", " ", 
    "fastaPartsToCompose_List", ",", " ", "fileExtension_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "directory", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"CopyFile", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{"Riffle", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Import", "[", 
                    RowBox[{"#", ",", " ", "\"\<String\>\""}], "]"}], "//", 
                    "fastaParser"}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "[", 
                 RowBox[{"[", " ", 
                  RowBox[{"All", ",", " ", "fastaPartsToCompose"}], "]"}], 
                 "]"}], "//", "Union"}], ")"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\"\<.\>\""}], "]"}], 
           "<>", "\"\<.\>\"", "<>", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"StringTake", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{
                  RowBox[{"ToString", "[", 
                   RowBox[{"SessionTime", "[", "]"}], "]"}], ",", " ", 
                  "\"\<.\>\""}], "]"}], "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", " ", "3"}], "]"}], 
             "<>"}], "*)"}], "fileExtension"}]}], "]"}], ")"}], 
       "\[IndentingNewLine]", "&"}], "/@", "filenames"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.71257143852591*^9, 3.712571490657611*^9}, {
  3.7125715696967993`*^9, 3.7125715850499306`*^9}, {3.712571667537386*^9, 
  3.712571680400962*^9}, {3.712571763847689*^9, 3.7125717665260687`*^9}, {
  3.7125717980118513`*^9, 3.7125718282897873`*^9}, {3.712572461984255*^9, 
  3.712572462364821*^9}, {3.7125728720020533`*^9, 3.7125728783136306`*^9}, {
  3.7125729141654267`*^9, 3.7125729143905735`*^9}, {3.712572954307764*^9, 
  3.7125729543900657`*^9}, {3.7125737749543624`*^9, 3.71257379548594*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Organizing your files and data", "Subchapter",
 CellChangeTimes->{{3.7220722593899317`*^9, 3.72207226901352*^9}, {
  3.72207231386033*^9, 3.7220723171811595`*^9}, {3.722072384184721*^9, 
  3.7220723853949375`*^9}},
 Background->RGBColor[0.88, 1, 0.88]],

Cell[CellGroupData[{

Cell["Extracting a single sequence from a large FASTA file", "Subsection",
 CellChangeTimes->{{3.686382856175332*^9, 3.6863828621385174`*^9}, {
  3.687963698937579*^9, 3.68796372218861*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
Input format is a string that contains a FASTA file. This function is for \
when you know the exact string in the header of the sequence you want and you \
want to extract it easily.
This only works when the header you are searching for is unique. If it is not \
unique it will only find the first instance of it.\
\>", "Text",
 CellChangeTimes->{{3.6879637246388636`*^9, 3.687963786339525*^9}, {
  3.6879639042144165`*^9, 3.687963928614006*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaExtract", "[", 
   RowBox[{"fString_String", ",", " ", "header_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"header", ",", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringSplit", "[", 
             RowBox[{"fString", ",", " ", 
              RowBox[{"header", "//", "StringTrim"}]}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", "\"\<>\>\""}], "]"}], 
         "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"WhitespaceCharacter", "\[Rule]", "\"\<\>\""}]}], "]"}]}], 
     "}"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6879637949666853`*^9, 3.6879638997937884`*^9}, {
  3.687964230251973*^9, 3.6879642573165445`*^9}, {3.6879643043315535`*^9, 
  3.687964340923093*^9}, {3.6879660010321245`*^9, 3.68796600451556*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.6879641314173913`*^9, 3.68796413280237*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Merging FASTA files ", "Subsection",
 CellChangeTimes->{{3.712656825521367*^9, 3.7126568419295034`*^9}, {
  3.722168266855151*^9, 3.7221682818058453`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
This is vertical merging, not horizontal merging, like you might want to do \
with an alignment.\
\>", "Text",
 CellChangeTimes->{{3.7221682825708804`*^9, 3.7221683018250837`*^9}}],

Cell[CellGroupData[{

Cell["Merging 2 fasta files", "Subsubsection",
 CellChangeTimes->{{3.7217274382392178`*^9, 3.721727442552038*^9}, {
  3.7221682594123187`*^9, 3.7221682642120795`*^9}, {3.7226750455733137`*^9, 
  3.7226750465299606`*^9}}],

Cell["\<\
file1 - The FASTA file to go at the beginning of the new file
file2 - The FASTA file to go at the end of the new file
exportFNAME - If you specify this it will export to a text file of this name\
\>", "Text",
 CellChangeTimes->{{3.7126574896663055`*^9, 3.7126575440650916`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaMerge", "[", 
   RowBox[{"file1_", ",", " ", "file2_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"fast1", ",", " ", "fast2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fast1", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"file1", ",", " ", "\"\<Text\>\""}], "]"}], "//", 
       "fastaParser"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fast2", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"file2", ",", " ", "\"\<Text\>\""}], "]"}], "//", 
       "fastaParser"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Obj. 'newfasta' created.\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newfasta", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"{", "fast1", "}"}], ",", " ", "fast2"}], "]"}], ",", " ", 
        "1"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.712656833845646*^9, 3.7126569677012453`*^9}, {
  3.7126571305459757`*^9, 3.712657133367049*^9}, {3.712657293466443*^9, 
  3.7126572977989473`*^9}, {3.7126573306061993`*^9, 3.7126573464932165`*^9}, {
  3.7126578253800125`*^9, 3.712657825598781*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaMerge", "[", 
   RowBox[{"file1_", ",", " ", "file2_", ",", " ", "exportFNAME_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"fast1", ",", " ", "fast2"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fast1", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"file1", ",", " ", "\"\<Text\>\""}], "]"}], "//", 
       "fastaParser"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fast2", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{"file2", ",", " ", "\"\<Text\>\""}], "]"}], "//", 
       "fastaParser"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newfasta", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"{", "fast1", "}"}], ",", " ", "fast2"}], "]"}], ",", " ", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Obj. 'newfasta' created.\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"exportFNAME", ",", " ", 
       RowBox[{"newfasta", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.712657383321416*^9, 3.7126574173112793`*^9}, {
   3.7126577943867893`*^9, 3.712657816693242*^9}, 3.7126858681418076`*^9, 
   3.721727884472898*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Merging more than 2 fasta files", "Subsubsection",
 CellChangeTimes->{{3.721727445368553*^9, 3.7217274539195623`*^9}}],

Cell[TextData[{
 StyleBox["fastaFileList",
  FontWeight->"Bold"],
 " = a list of the file names in the working directory that can be imported \
as a fastaParsed object.\n",
 StyleBox["DeleteDups",
  FontWeight->"Bold"],
 " (TRUE, FALSE; default = TRUE) = a boolean value telling the script if you \
want to delete duplicate sequences. There\[CloseCurlyQuote]s really no reason \
to ever specify FALSE, so TRUE is a default option.\n",
 StyleBox["exportFNAME",
  FontWeight->"Bold"],
 " = If you specify this it will export to a text file of this name"
}], "Text",
 CellChangeTimes->{{3.721728006514908*^9, 3.7217281179544363`*^9}, {
  3.7217281780423717`*^9, 3.7217281818112373`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaMergeAll", "[", "fastaFileList_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newfasta", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"importAlignment", "[", "#", "]"}], "&"}], "/@", 
           "fastaFileList"}], ")"}], ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"newfasta", "=", 
      RowBox[{"newfasta", "//", "Union"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Obj. 'newfasta' created.\>\"", "]"}], ";"}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7217279516231346`*^9, 3.721727958702215*^9}, {
  3.721728131751158*^9, 3.7217281330148277`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaMergeAll", "[", 
   RowBox[{"fastaFileList_", ",", " ", "exportFNAME_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newfasta", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"importAlignment", "[", "#", "]"}], "&"}], "/@", 
           "fastaFileList"}], ")"}], ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", " ", 
     RowBox[{"newfasta", "=", 
      RowBox[{"newfasta", "//", "Union"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"exportFNAME", ",", " ", 
       RowBox[{"newfasta", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.721727908483512*^9, 3.721727924704241*^9}, {
   3.7217279747919245`*^9, 3.7217279820295963`*^9}, {3.7217281491890545`*^9, 
   3.7217281505034523`*^9}, 3.721728199398425*^9, {3.7217308858778334`*^9, 
   3.721730886353859*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fastaMergeAll", "[", 
   RowBox[{
   "fastaFileList_", ",", " ", "exportFNAME_", ",", " ", "DeleteDups_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"newfasta", "=", 
      RowBox[{"Join", "[", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"importAlignment", "[", "#", "]"}], "&"}], "/@", 
           "fastaFileList"}], ")"}], ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"DeleteDups", ",", " ", 
       RowBox[{"newfasta", "=", 
        RowBox[{"newfasta", "//", "Union"}]}], ",", " ", 
       RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"exportFNAME", ",", " ", 
       RowBox[{"newfasta", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7217274566701374`*^9, 3.721727566966496*^9}, {
  3.721727689709456*^9, 3.721727728898918*^9}, {3.7217277651115403`*^9, 
  3.7217279026083794`*^9}, {3.7217279866858687`*^9, 3.7217279919147067`*^9}, {
  3.7217283068276267`*^9, 3.721728311559044*^9}, {3.721730890136386*^9, 
  3.721730890605186*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Renaming FASTA headers", "Subsection",
 CellChangeTimes->{{3.711959197742427*^9, 3.711959204088601*^9}, {
  3.712657575837076*^9, 3.7126575773717613`*^9}},
 Background->RGBColor[0.94, 0.88, 0.94]],

Cell["\<\
The code below will add the specified string at the desired fasta block in \
all sequences. It has the same options as the \[OpenCurlyDoubleQuote]Insert\
\[CloseCurlyDoubleQuote] function.\
\>", "Text",
 CellChangeTimes->{{3.7119592073003087`*^9, 3.7119592702407455`*^9}, {
  3.712657581821486*^9, 3.712657603462208*^9}, {3.712658053855526*^9, 
  3.712658072906122*^9}, {3.713752514367407*^9, 3.7137525163520327`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"insertIntoFastaHeader", "[", 
   RowBox[{"fasta_", ",", "string_", ",", " ", "position_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Insert", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", "string", ",", " ", 
          "position"}], "]"}], ",", " ", 
        RowBox[{"#", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", "fasta"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7126576090409513`*^9, 3.7126577496591597`*^9}, {
  3.712657887623782*^9, 3.712657895440271*^9}}],

Cell[TextData[{
 "The code below will delete a part of a fasta header in all sequences. It \
will also save the position you are deleting under the object name \
\[OpenCurlyDoubleQuote]",
 StyleBox["headerCut",
  FontWeight->"Bold"],
 "\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.7137525091472816`*^9, 3.7137525662271214`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeFromFastaHeader", "[", 
   RowBox[{"fasta_", ",", "position_"}], " ", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"headerCut", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "[", 
          RowBox[{"[", "position", "]"}], "]"}], "&"}], "/@", "fasta"}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Delete", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", "position"}], "]"}], 
         ",", " ", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", "fasta"}]}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7137516884562397`*^9, 3.7137517160400467`*^9}, {
  3.713751872261832*^9, 3.7137519776988754`*^9}, {3.7137520387892356`*^9, 
  3.713752039445511*^9}, {3.7137521929409714`*^9, 3.7137521930660396`*^9}, {
  3.7137531809017334`*^9, 3.713753235463463*^9}}],

Cell[TextData[{
 "The function below will move part of a fasta header from one position to \
another. To move more than one position, iterate this over your parsed ",
 StyleBox["fasta",
  FontWeight->"Bold"],
 " object more than once."
}], "Text",
 CellChangeTimes->{{3.7137525764462757`*^9, 3.713752636321287*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"rearrangeFastaHeader", "[", 
   RowBox[{"fasta_", ",", " ", 
    RowBox[{"fromPosition_", "->", " ", "toPosition_"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"removeFromFastaHeader", "[", 
       RowBox[{"fasta", ",", "fromPosition"}], " ", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Insert", "[", 
          RowBox[{
           RowBox[{"a", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
           RowBox[{"headerCut", "[", 
            RowBox[{"[", "i", "]"}], "]"}], ",", " ", "toPosition"}], "]"}], 
         ",", " ", 
         RowBox[{"a", "[", 
          RowBox[{"[", 
           RowBox[{"i", ",", "2"}], "]"}], "]"}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "headerCut", "]"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"keepOnlyFastaHeader", "[", 
    RowBox[{"fasta_", ",", "position_"}], " ", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"headerKeep", "=", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", 
           RowBox[{"[", "position", "]"}], "]"}], "&"}], "/@", "fasta"}], 
        ")"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", " ", "position"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       "fasta"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7251101592257752`*^9, 3.7251101992695284`*^9}, {
  3.7251102321799593`*^9, 3.725110247028265*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Removing tokens from header names", "Subsection",
 CellChangeTimes->{{3.7130768566604085`*^9, 3.713076870918312*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell["\<\
Some software (like MAFFT) will add tokens to taxon names under certain \
circumstances. The below function can fix this.\
\>", "Text",
 CellChangeTimes->{{3.713076875932864*^9, 3.7130769063472805`*^9}}],

Cell[TextData[{
 "Parameters:\n",
 StyleBox["alignment - ",
  FontWeight->"Bold"],
 "will take either a fasta/phylip file, or a fastaParsed object.\n",
 StyleBox["token",
  FontWeight->"Bold"],
 " - is the exact substring you want removed from the taxon header (e.g. \
\[OpenCurlyDoubleQuote]_R_\[CloseCurlyDoubleQuote] from MAFFT \
-adjustdirection option).\n",
 StyleBox["direction",
  FontWeight->"Bold"],
 " - tells the script whether to take the substring off of the string at the \
front or the back. Options are \[OpenCurlyDoubleQuote]Suffix\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]Prefix\
\[CloseCurlyDoubleQuote].\n",
 StyleBox["position",
  FontWeight->"Bold"],
 " - tells the script what part of the fasta header it should look in. This \
should be an integer."
}], "Text",
 CellChangeTimes->{{3.7251054889725027`*^9, 3.725105655179194*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fixPrefix", "[", 
   RowBox[{
   "alignment_String", ",", " ", "token_", ",", "direction_", ",", 
    "position_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "currentNamesList", ",", " ", "fixedNamesList", ",", " ", "tokenLength", 
      ",", " ", "a", ",", " ", "tolken"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tokenLength", "=", 
      RowBox[{"StringLength", "[", "token", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tolken", "\[Equal]", "token"}], ";", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"looking", " ", "at", " ", "this", " ", "later"}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
         "this", " ", "line", " ", "should", " ", "be", " ", "unnecessary"}], 
         "..."}], "i", " ", "think"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"direction", "\[Equal]", "\"\<Prefix\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"tolken", "=", "token"}], " ", ";"}], ",", " ", 
       RowBox[{"direction", "\[Equal]", "\"\<Suffix\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"tolken", "=", 
         RowBox[{"(", 
          RowBox[{"token", "*", 
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}]}], ")"}]}], ";"}], ",", " ", 
       RowBox[{"direction", "=", "__"}], ",", " ", 
       RowBox[{"Print", "[", "\"\<Invalid direction\>\"", "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"currentNamesList", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1", ",", " ", "position"}], "]"}], "]"}], 
        "//", "Flatten"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"fixedNamesList", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"#", ",", " ", "tokenLength"}], "]"}], "\[Equal]", 
            "tolken"}], ",", " ", 
           RowBox[{"StringDrop", "[", 
            RowBox[{"#", ",", " ", "tokenLength"}], "]"}], ",", " ", "#"}], 
          "]"}], "&"}], "/@", "currentNamesList"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "so", " ", "you", " ", "can", " ", "check", " ", "it", " ", "after", 
       " ", "to", " ", "make", " ", "sure", " ", 
       RowBox[{"it", "'"}], "s", " ", "ok"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"replaceList", "=", 
      RowBox[{"(", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"currentNamesList", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "->", 
           RowBox[{"fixedNamesList", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "[", "fixedNamesList", "]"}]}], "}"}]}], "]"}], 
       ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"a", "/.", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"currentNamesList", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "->", 
            RowBox[{"fixedNamesList", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "fixedNamesList", "]"}]}], "}"}]}], "]"}], 
      ")"}], ";", "\[IndentingNewLine]", 
     RowBox[{"fastaExport", "[", 
      RowBox[{"alignment", ",", " ", "a"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.725104714772738*^9, 3.7251047470920925`*^9}, 
   3.7251048044071484`*^9, {3.725104884371209*^9, 3.725104898462325*^9}, {
   3.725104958337264*^9, 3.72510497628648*^9}, {3.7251050255722895`*^9, 
   3.72510502613867*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fixPrefix", "[", 
   RowBox[{
   "alignment_List", ",", " ", "token_", ",", "direction_", ",", 
    "position_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "currentNamesList", ",", " ", "fixedNamesList", ",", " ", "tokenLength", 
      ",", " ", "a", ",", " ", "tolken"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", "alignment"}], ";", "\[IndentingNewLine]", 
     RowBox[{"tokenLength", "=", 
      RowBox[{"StringLength", "[", "token", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tolken", "\[Equal]", "token"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", 
      RowBox[{
       RowBox[{"direction", "\[Equal]", "\"\<Prefix\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"tolken", "=", "token"}], " ", ";"}], ",", " ", 
       RowBox[{"direction", "\[Equal]", "\"\<Suffix\>\""}], ",", " ", 
       RowBox[{
        RowBox[{"tolken", "=", 
         RowBox[{"(", 
          RowBox[{"token", "*", 
           RowBox[{"(", 
            RowBox[{"-", "1"}], ")"}]}], ")"}]}], ";"}], ",", " ", 
       RowBox[{"direction", "=", "__"}], ",", " ", 
       RowBox[{"Print", "[", "\"\<Invalid direction\>\"", "]"}]}], "]"}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"currentNamesList", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1", ",", " ", "position"}], "]"}], "]"}], 
        "//", "Flatten"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"fixedNamesList", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"StringTake", "[", 
             RowBox[{"#", ",", " ", "tokenLength"}], "]"}], "\[Equal]", 
            "tolken"}], ",", " ", 
           RowBox[{"StringDrop", "[", 
            RowBox[{"#", ",", " ", "tokenLength"}], "]"}], ",", " ", "#"}], 
          "]"}], "&"}], "/@", "currentNamesList"}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "so", " ", "you", " ", "can", " ", "check", " ", "it", " ", "after", 
       " ", "to", " ", "make", " ", "sure", " ", 
       RowBox[{"it", "'"}], "s", " ", "ok"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"replaceList", "=", 
      RowBox[{"(", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"currentNamesList", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "->", 
           RowBox[{"fixedNamesList", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]", 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "[", "fixedNamesList", "]"}]}], "}"}]}], "]"}], 
       ")"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"a", "=", 
         RowBox[{"a", "/.", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"currentNamesList", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "->", 
            RowBox[{"fixedNamesList", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "}"}]}]}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "fixedNamesList", "]"}]}], "}"}]}], "]"}], 
      ")"}], ";", "\[IndentingNewLine]", "a"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7130769152389364`*^9, 3.713077318563695*^9}, {
  3.7130773571643133`*^9, 3.7130773661395025`*^9}, {3.713077423765584*^9, 
  3.7130774545206413`*^9}, {3.713077489026375*^9, 3.7130775026059327`*^9}, {
  3.7251047190692554`*^9, 3.725104719388926*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Fixing FASTA files with misread headers or empty data",
 Background->RGBColor[1, 1, 0.85]]], "Subsection",
 CellChangeTimes->{{3.713509083870232*^9, 3.713509091339896*^9}, {
  3.723873548801437*^9, 3.723873550269469*^9}}],

Cell["\<\
The function below combines the two other functions in this section, and \
modifies it to import and export the files automatically.\
\>", "Text",
 CellChangeTimes->{{3.723876236186219*^9, 3.723876254375943*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"mendFastaFile", "[", 
     RowBox[{"#", ",", " ", "\"\<s\>\""}], "]"}], "&"}], "/@", "fn"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7239706968255267`*^9, 3.723970713116232*^9}, 
   3.723972201164561*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"mendFastaFile", "[", 
   RowBox[{"fileName_String", ",", " ", "illegalCharacter_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fasta", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fasta", "=", 
      RowBox[{"fileName", "//", "importAlignment"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fasta", "=", 
      RowBox[{"removeEmpties", "[", "fasta", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fHeadSpill", "[", 
      RowBox[{"fasta", ",", " ", "illegalCharacter"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"fileName", "//", "exportFileRename"}], ",", " ", 
       RowBox[{"fasta", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.723874071801861*^9, 3.7238742401317124`*^9}, {
   3.723874316156705*^9, 3.723874320363239*^9}, {3.723874447693469*^9, 
   3.723874455142999*^9}, 3.723874512687825*^9, {3.723874649677224*^9, 
   3.7238746960564785`*^9}}],

Cell["\<\
The function below will read a FASTA file, and rewrite it with a corrected \
FASTA header format. It only works for FASTA files that have had headers \
spill over into the beginning of the sequence. Also, it only reconigzes the \
FIRST instance of a DNA character after the spilled part of the header.

NOTE that this has only been tested with illegal characters of String Length \
1.\
\>", "Text",
 CellChangeTimes->{{3.7135091122413416`*^9, 3.7135091378219843`*^9}, {
  3.71351120816276*^9, 3.71351129504245*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"fHeadSpill", "[", 
   RowBox[{"fastaParsed_", ",", " ", "illegalCharacter_String"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "legalCharacters", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"legalCharacters", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<A\>\"", ",", "\"\<T\>\"", ",", "\"\<C\>\"", ",", "\"\<G\>\"", 
        ",", "\"\<a\>\"", ",", "\"\<t\>\"", ",", "\"\<c\>\"", ",", 
        "\"\<g\>\"", ",", "\"\<N\>\"", ",", "\"\<?\>\"", ",", "\"\<-\>\""}], 
       "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "newSeq", ",", " ", "newHead", ",", " ", "bad", ",", " ", "good"}], 
          "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"newSeq", "=", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"newHead", "=", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"StringContainsQ", "[", 
             RowBox[{"newSeq", ",", " ", "illegalCharacter"}], "]"}], ",", 
            RowBox[{
             RowBox[{"Goto", "[", "\"\<fixCode\>\"", "]"}], ";"}], ",", " ", 
            RowBox[{
             RowBox[{"Goto", "[", "\"\<returnSeq\>\"", "]"}], ";"}]}], "]"}], 
          ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Label", "[", "\"\<fixCode\>\"", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"bad", "=", 
           RowBox[{
            RowBox[{"StringPosition", "[", 
             RowBox[{"newSeq", ",", " ", "illegalCharacter"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", " ", "2"}], 
             RowBox[{"(*", 
              RowBox[{
              "this", " ", "might", " ", "need", " ", "to", " ", "be", " ", 
               "changed"}], "*)"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"good", "=", 
           RowBox[{
            RowBox[{"Select", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"StringPosition", "[", 
                 RowBox[{"newSeq", ",", " ", "legalCharacters"}], "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ")"}], ",", 
              RowBox[{
               RowBox[{"#", ">", "bad"}], " ", "&"}]}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"newHead", "=", 
           RowBox[{"Append", "[", 
            RowBox[{"newHead", ",", 
             RowBox[{"StringTake", "[", 
              RowBox[{"newSeq", ",", " ", 
               RowBox[{"{", 
                RowBox[{"1", ",", " ", 
                 RowBox[{"good", "-", "1"}]}], "}"}]}], "]"}]}], "]"}]}], ";",
           "\[IndentingNewLine]", 
          RowBox[{"newSeq", "=", 
           RowBox[{"StringTake", "[", 
            RowBox[{"newSeq", ",", " ", 
             RowBox[{"{", 
              RowBox[{"good", ",", " ", 
               RowBox[{"StringLength", "[", "newSeq", "]"}]}], "}"}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Label", "[", "\"\<returnSeq\>\"", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"newHead", ",", " ", "newSeq"}], "}"}]}]}], 
        "\[IndentingNewLine]", "]"}], "&"}], "/@", "fastaParsed"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713511119625944*^9, 3.7135112019935293`*^9}, {
   3.7135113008643985`*^9, 3.71351131368195*^9}, {3.713511350610528*^9, 
   3.7135113739363513`*^9}, 3.713511765114496*^9}],

Cell["\<\
The function below takes a fastaParsed object as input, finds all cases where \
the sequence section is empty, and deletes it.\
\>", "Text",
 CellChangeTimes->{{3.7238761961001396`*^9, 3.723876232903358*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"removeEmpties", "[", "fasta_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "a", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Length", "[", 
        RowBox[{"(", 
         RowBox[{"a", "=", 
          RowBox[{"Position", "[", 
           RowBox[{
            RowBox[{"fasta", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
            "\"\<\>\""}], "]"}]}], ")"}], "]"}], "<", "1"}], ",", "fasta", 
      ",", " ", 
      RowBox[{"Delete", "[", 
       RowBox[{"fasta", ",", 
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"a", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", "1"}], 
         "]"}]}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7238736634527397`*^9, 3.723873704940398*^9}, {
  3.723873842933696*^9, 3.7238738814047403`*^9}, {3.723874019300541*^9, 
  3.7238740212088337`*^9}, {3.723874548723163*^9, 3.723874623789873*^9}, {
  3.723875157186943*^9, 3.7238751576412926`*^9}, {3.7238752713522835`*^9, 
  3.723875272699504*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Limiting an FASTA file to a specific sublist of taxa", "Subsection",
 CellChangeTimes->{{3.715928257712078*^9, 3.7159282648040504`*^9}, {
  3.7159344621163125`*^9, 3.7159344659231873`*^9}, {3.7161110679182158`*^9, 
  3.7161110758485107`*^9}},
 Background->RGBColor[0.94, 0.88, 0.94]],

Cell[TextData[{
 "The function below can limit a set of sequences to a predefined subset of \
taxa. It can do this in one of two ways. 1. By making a fastaParsed object \
with only those taxa. 2. By turning all OTHER taxa into blank sequences.\n",
 StyleBox["full",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " = the full alignment\n",
 StyleBox["keepset",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " = the list of taxa you want to keep. Need to be exact matches to the \
others in the alignment.\n",
 StyleBox["method:\n\t\[OpenCurlyDoubleQuote]method1\[CloseCurlyDoubleQuote] \
- ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " makes a fastaParsed object with only those taxa.",
 StyleBox["\n\t\[OpenCurlyDoubleQuote]method2\[CloseCurlyDoubleQuote] - ",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 "turns all OTHER taxa into blank sequences."
}], "Text",
 CellChangeTimes->{{3.7159282668931828`*^9, 3.715928355171315*^9}, {
  3.7159369095703206`*^9, 3.715937013366867*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"limitSeqList", "[", 
    RowBox[{"full_", ",", " ", "keepSet_", ",", " ", "method_"}], "]"}], ":=",
    "\[IndentingNewLine]", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "newAlign", ",", "keeps", ",", " ", "deletes", ",", " ", "toDelete", 
       ",", " ", "deleted", ",", " ", "len", ",", "fullNewAlign"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"METHOD", " ", "1"}], ":", " ", 
       RowBox[{
       "extracting", " ", "the", " ", "taxa", " ", "you", " ", "want"}]}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"newAlign", "=", 
       RowBox[{"full", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{
              RowBox[{"Position", "[", 
               RowBox[{"full", ",", "#"}], "]"}], "&"}], "/@", "keepSet"}], 
            ")"}], "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "All", ",", " ", "1"}], "]"}], "]"}], "//",
           "Flatten"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"METHOD", " ", "2"}], ":", " ", 
        RowBox[{
        "blanking", " ", "out", " ", "the", " ", "taxa", " ", "you", " ", 
         RowBox[{"don", "'"}], "t", " ", "want"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"keeps", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"full", ",", "#"}], "]"}], "&"}], "/@", "keepSet"}], 
          ")"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "All", ",", " ", "1"}], "]"}], "]"}], "//",
         "Flatten"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"deletes", " ", "=", 
       RowBox[{"Complement", "[", " ", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"full", "//", "Length"}], "]"}], ",", " ", "keeps"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"toDelete", "=", 
       RowBox[{"full", "[", 
        RowBox[{"[", "deletes", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"deleted", "=", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"len", "=", 
           RowBox[{
            RowBox[{"toDelete", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "2"}], "]"}], "]"}], "//", 
            "StringLength"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"toDelete", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
            RowBox[{"StringRepeat", "[", 
             RowBox[{"\"\<?\>\"", ",", "len"}], "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "[", "toDelete", "]"}]}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"fullNewAlign", "=", "\[IndentingNewLine]", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Partition", "[", 
          RowBox[{
           RowBox[{"Flatten", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Flatten", "[", 
                RowBox[{"newAlign", ",", " ", "1"}], "]"}], ",", 
               RowBox[{"Flatten", "[", 
                RowBox[{"deleted", " ", ",", " ", "1"}], "]"}]}], "}"}], ",", 
             " ", "1"}], "]"}], ",", " ", "2"}], "]"}], ",", " ", "First"}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "method", ",", "\[IndentingNewLine]", "\"\<method1\>\"", ",", 
        "newAlign", " ", ",", "\[IndentingNewLine]", "\"\<method2\>\"", ",", 
        "fullNewAlign"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7159345178676186`*^9, 3.7159345205086985`*^9}, 
   3.71593491109799*^9, 3.7159351180259075`*^9, {3.7159353763815536`*^9, 
   3.7159353980227666`*^9}, {3.7159354453309746`*^9, 
   3.7159354569241886`*^9}, {3.7159355193200655`*^9, 
   3.7159355837939897`*^9}, {3.7159356777606907`*^9, 3.715935774070446*^9}, {
   3.7159358355694566`*^9, 3.7159359037700334`*^9}, {3.715935948431761*^9, 
   3.7159359532874784`*^9}, {3.7159360956654634`*^9, 3.715936118010571*^9}, {
   3.715936290959406*^9, 3.7159368916609735`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Deleting duplicate FASTA entries",
 Background->RGBColor[1, 0.9, 0.8]]], "Subsection",
 CellChangeTimes->{{3.721726788175559*^9, 3.7217267970583234`*^9}, {
  3.7217269609328423`*^9, 3.7217269646988816`*^9}, {3.725624991490611*^9, 
  3.7256249915218935`*^9}}],

Cell[TextData[{
 "If the FASTA entries are exactly duplicate, you don\[CloseCurlyQuote]t need \
to make a new function for this. Use the built in Mathematica Union[] \
function on a ",
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " object."
}], "Text",
 CellChangeTimes->{{3.7217269555746517`*^9, 3.721726990260972*^9}, {
  3.7220778907046204`*^9, 3.7220779034525137`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Union", "[", "]"}], ";"}]], "Input",
 CellChangeTimes->{{3.7217269941670246`*^9, 3.7217270010140867`*^9}}],

Cell[TextData[{
 "If the FASTA entries are duplicate in the sequence only (the headers are \
different) you can use this function. It will reduce all sequences that have \
the exact same sequence, and one entry in the FASTA header (e.g. the taxon \
name) are the same.\n",
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " = a fastaParsed object with potential duplicate sequences\n",
 StyleBox["headerGuide",
  FontWeight->"Bold"],
 " = an integer representing the position in the FASTA header you want to \
choose as the guide to make sure your comparing among the sequences you want \
to be comparing. "
}], "Text",
 CellChangeTimes->{{3.722077969840645*^9, 3.722078032344324*^9}, {
  3.7220800722143636`*^9, 3.722080119033243*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"unionFASTA", "[", 
   RowBox[{"fastaParsed_", ",", " ", "headerGuide_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "gathered", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"gathered", "=", 
      RowBox[{"GatherBy", "[", 
       RowBox[{"fastaParsed", ",", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", "  ", "headerGuide"}], "]"}], "]"}], "&"}]}], 
       " ", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"Block", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
             "print", ",", " ", "part", ",", " ", "dups", ",", " ", "k"}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"part", "=", "#"}], ";", "\[IndentingNewLine]", 
             RowBox[{"If", "[", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{"dups", "=", 
                    RowBox[{
                    RowBox[{"part", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "//", 
                    "Union"}]}], ")"}], "//", "Length"}], ")"}], "<", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"part", "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "//", 
                  "Length"}], ")"}]}], ",", " ", 
               RowBox[{
                RowBox[{"Goto", "[", "\"\<reduce\>\"", "]"}], ";"}], ",", " ", 
               RowBox[{
                RowBox[{"Goto", "[", "\"\<next\>\"", "]"}], ";"}]}], "]"}], 
             ";", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "tests", " ", "if", " ", "there", " ", "is", " ", "more", " ", 
               "than", " ", "one", " ", "of", " ", "the", " ", "same", " ", 
               "sequence", " ", "at", " ", "all", " ", "in", " ", "the", " ", 
               "set", " ", "delimited", " ", "by", " ", "the", " ", 
               "\"\<header guide\>\""}], "*)"}], "\[IndentingNewLine]", 
             RowBox[{"Label", "[", "\"\<reduce\>\"", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"print", "=", 
              RowBox[{"#", "[", 
               RowBox[{"[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"part", ",", " ", "#"}], "]"}], "&"}], "/@", 
                    "dups"}], ")"}], "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], 
                "\[IndentingNewLine]", 
                RowBox[{"(*", 
                 RowBox[{
                 "takes", " ", "the", " ", "first", " ", "instance", " ", 
                  "of", " ", "each", " ", "unique", " ", "entry"}], "*)"}], 
                "\[IndentingNewLine]", "]"}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Goto", "[", "\"\<end\>\"", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Label", "[", "\"\<next\>\"", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"print", "=", "#"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Label", "[", "\"\<end\>\"", "]"}], ";", 
             "\[IndentingNewLine]", "print"}]}], "]"}], "&"}], "/@", 
         "gathered"}], ")"}], ",", " ", "1"}], "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.722078041994977*^9, 3.722078170709119*^9}, {
  3.722078252961692*^9, 3.7220783725934134`*^9}, {3.7220784028705893`*^9, 
  3.722078675338667*^9}, {3.7220787793159347`*^9, 3.7220788097111273`*^9}, {
  3.722078872377863*^9, 3.722078901667261*^9}, {3.7220789454637084`*^9, 
  3.722078970239995*^9}, {3.722079032431622*^9, 3.722079045659976*^9}, {
  3.722079105509036*^9, 3.7220792030016346`*^9}, {3.722079451965214*^9, 
  3.722079458376261*^9}, {3.722079619028389*^9, 3.722079663835475*^9}, {
  3.7220797159429393`*^9, 3.722079810725532*^9}, {3.7220799592255*^9, 
  3.7220799919342527`*^9}, {3.722080032006797*^9, 3.722080053236384*^9}}],

Cell["\<\
See Alignment Manipulation section for another script that works on alignments\
\>", "Text",
 CellChangeTimes->{{3.722173549072955*^9, 3.7221735751784115`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Pooling FASTA files and redistributing by a FASTA header \
\[LineSeparator](usually, ",
 StyleBox["taxon ",
  FontWeight->"Bold"],
 "FASTAs to ",
 StyleBox["gene",
  FontWeight->"Bold"],
 " FASTAs)"
}], "Subsection",
 CellChangeTimes->{{3.7218159443941593`*^9, 3.7218159702077103`*^9}, {
  3.721818249797736*^9, 3.72181829316708*^9}},
 Background->RGBColor[1, 0.925, 0.925]],

Cell[TextData[{
 "If you have a collection of fasta files that each represent one taxon, with \
multiple sequences in each, sometimes you want to reorganize those by the \
genes within the taxa. It doesn\[CloseCurlyQuote]t even have to be taxa files \
and genes within. The function below pools any collection of fasta files (in \
the same folder) bunches them by one of the features in the fasta header, and \
outputs them by the number of unique features. It could be accession numbers, \
taxon names, gene names, domain names, anything. Parameters:\n",
 StyleBox["taxFileDirectory: ",
  FontWeight->"Bold"],
 "a",
 StyleBox[" ",
  FontWeight->"Bold"],
 "string representing where the original files are\n",
 StyleBox["geneHeaderPosition: ",
  FontWeight->"Bold"],
 "an integer representing the position in the FASTA header that you want to \
sort by.\n",
 StyleBox["outDirectory: ",
  FontWeight->"Bold"],
 "a string representing the directory you want to output the files to."
}], "Text",
 CellChangeTimes->{{3.7218180697127733`*^9, 3.7218181144311*^9}, {
  3.721818156025957*^9, 3.721818242319786*^9}, {3.721818301459132*^9, 
  3.7218183678370476`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"taxFilesToGenes", "[", "\[IndentingNewLine]", 
   RowBox[{
   "taxFileDirectory_String", ",", " ", "\[IndentingNewLine]", 
    "geneHeaderPosition_Integer", ",", "\[IndentingNewLine]", 
    "outDirectory_String"}], "\[IndentingNewLine]", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"IA", ",", " ", "GB"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "taxFileDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "importing", " ", "all", " ", "the", " ", "taxon", " ", "files"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"IA", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"importAlignment", "[", "#", "]"}], "&"}], "/@", 
       RowBox[{"FileNames", "[", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"GB", "=", 
      RowBox[{"GatherBy", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"IA", ",", " ", "1"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "geneHeaderPosition"}], "]"}], "]"}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Export", "[", 
        RowBox[{
         RowBox[{"outDirectory", "<>", "\"\<\\\\\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"#", "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", " ", "1", ",", " ", "geneHeaderPosition"}], 
             "]"}], "]"}], "  ", "]"}], "<>", "\"\<.fasta\>\""}], ",", 
         RowBox[{"#", "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}], 
        "]"}], "&"}], "/@", "GB"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7218176483215084`*^9, 3.721817796088771*^9}, {
  3.721817973930952*^9, 3.7218180323791676`*^9}, {3.721818493233136*^9, 
  3.721818495951386*^9}, {3.72259994130249*^9, 3.722599941464699*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trivial sequence editing", "Subchapter",
 CellChangeTimes->{{3.722072349763116*^9, 3.7220723626804605`*^9}},
 Background->RGBColor[1, 0.925, 0.925]],

Cell[CellGroupData[{

Cell["Padding sequences", "Subsection",
 CellChangeTimes->{{3.713245595086975*^9, 3.7132455973387747`*^9}}],

Cell["\<\
If you want to merge unaligned sequences it is necessary to have the \
alignments be the same length. 
This function can also be used to put one or more buffer characters at the \
end of alignments before merging, so that it is easy to tell where the gaps \
between the alignments are.\
\>", "Text",
 CellChangeTimes->{{3.7132455997693434`*^9, 3.713245650393642*^9}, {
  3.7132461703732185`*^9, 3.7132462053227987`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"sequencePadder", "[", 
   RowBox[{"alignment_", ",", " ", "padCharacter_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"lengths", ",", " ", "maxLength"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lengths", "=", 
      RowBox[{"StringLength", "/@", 
       RowBox[{"alignment", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"maxLength", "=", 
      RowBox[{"Max", "[", "lengths", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", "\[IndentingNewLine]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "<>", 
           RowBox[{"StringRepeat", "[", 
            RowBox[{"padCharacter", ",", 
             RowBox[{"(", 
              RowBox[{"maxLength", "-", 
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"StringLength", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}], "-", "1"}], ")"}]}],
               ")"}]}], "]"}]}], ")"}]}], "\[IndentingNewLine]", "}"}], "&"}],
       "/@", "alignment"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7132456539056945`*^9, 3.713245771432633*^9}, {
  3.7132458245033197`*^9, 3.7132459195910134`*^9}, {3.713245957656168*^9, 
  3.7132459851290326`*^9}, {3.7132461372746778`*^9, 3.7132461611911783`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Replacing characters in sequences", "Subsection",
 CellChangeTimes->{{3.7222466235909395`*^9, 3.7222466300336924`*^9}}],

Cell[TextData[{
 "You might want to use a software that cannot handle certain sequence \
characters (e.g. \[OpenCurlyDoubleQuote]*\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote]). Using this function you \
can change them. It is also possible to delete characters from an alignment \
by making the toChar parameter a blank string (\[OpenCurlyDoubleQuote]\
\[CloseCurlyDoubleQuote]).\n",
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " - a fastaParsed object\n",
 StyleBox["fromChar",
  FontWeight->"Bold"],
 " - the character you want to remove.\n",
 StyleBox["toChar",
  FontWeight->"Bold"],
 " - the character you want to replace it with."
}], "Text",
 CellChangeTimes->{{3.7222466330113173`*^9, 3.722246703913052*^9}, {
  3.722248690118342*^9, 3.722248715955888*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceChar", "[", 
   RowBox[{"fastaParsed_", ",", " ", "fromChar_", ",", " ", "toChar_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"StringReplace", "[", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], ",", 
          RowBox[{"fromChar", "\[Rule]", "toChar"}]}], " ", "]"}]}], "}"}], 
      "&"}], "/@", "fastaParsed"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7222467110542645`*^9, 3.7222467300204487`*^9}, {
  3.7222468539016457`*^9, 3.7222469028227777`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"replaceChar", "[", 
   RowBox[{"fastaParsed_", ",", " ", 
    RowBox[{"fromChar_", "->", "toChar_"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"replaceChar", "[", 
   RowBox[{"fastaParsed", ",", " ", "fromChar", ",", "toChar"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.722247108609042*^9, 3.72224712898689*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Bioinformatic functions", "Subchapter",
 CellChangeTimes->{{3.722072158860667*^9, 3.7220721629906473`*^9}},
 FontColor->RGBColor[0.5, 0, 0.5],
 Background->RGBColor[0.94, 0.88, 0.94]],

Cell[CellGroupData[{

Cell["Deleting entries with missing data", "Subsection",
 CellChangeTimes->{{3.716109880213922*^9, 3.716109892984869*^9}, {
  3.7161110612614965`*^9, 3.716111065496086*^9}, {3.7168886007486515`*^9, 
  3.7168886087703424`*^9}}],

Cell[TextData[{
 "This function will delete any sequence that is composed of a certain amount \
of missing data.\n",
 StyleBox["alignment",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " = the list of sequences in a fasta parsed format\n",
 StyleBox["percent",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " = the maximum amount of missing data a sequence can have, otherwise it is \
deleted."
}], "Text",
 CellChangeTimes->{{3.7161098947589083`*^9, 3.71610993379423*^9}, 
   3.71610999177312*^9, {3.7161130961648006`*^9, 3.7161131230566015`*^9}, {
   3.7168886132998934`*^9, 3.716888618912345*^9}, {3.7171450193376694`*^9, 
   3.717145023256195*^9}, {3.7171450612614393`*^9, 3.7171451059759417`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteEmptySequences", "[", 
   RowBox[{"alignment_", ",", " ", "percent_"}], "]"}], ":=", 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"METHOD", " ", "1"}], ":", 
      RowBox[{
      "The", " ", "problem", " ", "with", " ", "this", " ", "method", " ", 
       "is", " ", "that", " ", "it", " ", 
       RowBox[{"doesn", "'"}], "t", " ", "eliminate", " ", "sequences", " ", 
       "with", " ", "a", " ", "vast", " ", "majority", " ", "of", " ", 
       "missing", " ", "data"}]}], ")"}], "\[IndentingNewLine]", 
    RowBox[{"DeleteCases", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"StringContainsQ", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
            RowBox[{
            "\"\<A\>\"", "|", "\"\<T\>\"", "|", "\"\<G\>\"", "|", "\"\<C\>\"",
              "|", "\"\<a\>\"", "|", "\"\<t\>\"", "|", "\"\<g\>\"", "|", 
             "\"\<c\>\"", "|", "\"\<Y\>\"", "|", "\"\<U\>\"", "|", 
             "\"\<R\>\"", "|", "\"\<Y\>\"", "|", "\"\<K\>\"", "|", 
             "\"\<P\>\"", "|", "\"\<V\>\"", "|", "\"\<W\>\"", "|", 
             "\"\<e\>\"", "|", "\"\<f\>\"", "|", "\"\<Z\>\"", "|", 
             "\"\<L\>\"", "|", "\"\<M\>\"", "|", "\"\<N\>\"", "|", 
             "\"\<n\>\"", "|", "\"\<m\>\"", "|", "\"\<z\>\"", "|", 
             "\"\<y\>\"", "|", "\"\<g\>\""}]}], "]"}], ",", "#", ",", " ", 
          RowBox[{"{", "}"}]}], " ", "]"}], "&"}], "/@", "alignment"}], ",", 
      " ", 
      RowBox[{"{", "}"}]}], "]"}]}], "*)"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"METHOD", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "seqLength", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"seqLength", "=", 
           RowBox[{"StringLength", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringCount", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                "\"\<?\>\"", ",", "\"\<N\>\"", ",", "\"\<n\>\"", ",", 
                 "\"\<-\>\""}], "}"}]}], "]"}], "<", 
             RowBox[{"(", 
              RowBox[{"(", 
               RowBox[{"percent", "*", "seqLength"}], ")"}], ")"}]}], ",", 
            " ", "#", ",", " ", 
            RowBox[{"{", "}"}]}], "]"}]}], ")"}], "&"}], "/@", 
       "alignment"}]}], "]"}], ",", " ", 
    RowBox[{"{", "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7161100069853296`*^9, 3.7161101141399174`*^9}, {
  3.716110807223949*^9, 3.716110810258551*^9}, {3.7161108553354483`*^9, 
  3.716110978434755*^9}, {3.716111024943941*^9, 3.7161110448899603`*^9}, {
  3.7161125253344173`*^9, 3.7161128289593296`*^9}, {3.716113045013986*^9, 
  3.7161130934770174`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"deleteEmptySequences", "[", "alignment_", "]"}], ":=", 
  RowBox[{"deleteEmptySequences", "[", 
   RowBox[{"alignment", ",", " ", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.716875299025185*^9, 3.7168753153351417`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Biologically related functions", "Subchapter",
 CellChangeTimes->{{3.7220721389898295`*^9, 3.722072147596715*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell[CellGroupData[{

Cell["Reverse complement a FASTA file", "Subsection",
 CellChangeTimes->{{3.7219740944725213`*^9, 3.721974102271974*^9}}],

Cell["NOTE: Need to develop this section. ", "Text",
 CellChangeTimes->{{3.7219741191320047`*^9, 3.72197412554593*^9}}],

Cell["This will rev-comp a single DNA string-sequence.", "Text",
 CellChangeTimes->{{3.721974107870369*^9, 3.7219741350321274`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"reverseComplementDNA", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"StringReplace", "[", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"sequence", "//", "StringReverse"}], ")"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<A\>\"", "\[Rule]", "\"\<T\>\""}], ",", " ", 
        RowBox[{"\"\<T\>\"", "\[Rule]", "\"\<A\>\""}], ",", 
        RowBox[{"\"\<G\>\"", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<C\>\"", "\[Rule]", "\"\<G\>\""}]}], "}"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7219738017965317`*^9, 3.7219739300000134`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"revComp", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"reverseComplementDNA", "[", "sequence", "]"}]}]], "Input",
 CellChangeTimes->{{3.7219739385857286`*^9, 3.721973975608308*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"revCompDNA", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"reverseComplementDNA", "[", "sequence", "]"}]}]], "Input"]
}, Closed]],

Cell[CellGroupData[{

Cell["Translating nucleotide data to AminoAcids (AA)", "Subsection",
 CellChangeTimes->{{3.721971272320462*^9, 3.72197128644319*^9}}],

Cell[CellGroupData[{

Cell["Paramaters and matrices", "Subsubsection",
 CellChangeTimes->{{3.7219722708923607`*^9, 3.7219722753231745`*^9}}],

Cell["This is a standard ordered table of codons", "Text",
 CellChangeTimes->{{3.7219730891003437`*^9, 3.7219730957015266`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["nucCodeTable",
    FontVariations->{"Underline"->True}], "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"Transpose", "/@", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"StringJoin", "[", 
          RowBox[{"i", ",", " ", "j", ",", " ", "k"}], "]"}], "}"}], 
        "\[IndentingNewLine]", ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<T\>\"", ",", " ", "\"\<C\>\"", ",", " ", "\"\<A\>\"", ",", 
            " ", "\"\<G\>\""}], "}"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"j", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<T\>\"", ",", " ", "\"\<C\>\"", ",", " ", "\"\<A\>\"", ",", 
            " ", "\"\<G\>\""}], "}"}]}], "}"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"k", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\<T\>\"", ",", " ", "\"\<C\>\"", ",", " ", "\"\<A\>\"", ",", 
            " ", "\"\<G\>\""}], "}"}]}], "}"}]}], "]"}]}], ",", " ", "1"}], 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7219713489034348`*^9, 3.7219714758900194`*^9}, {
  3.7219715122050323`*^9, 3.7219716263533144`*^9}, {3.721972260974003*^9, 
  3.721972262092888*^9}, {3.7219727119952106`*^9, 3.7219727393159137`*^9}, {
  3.721972784547724*^9, 3.721972785391472*^9}}],

Cell["This is the standard genetic code table.", "Text",
 CellChangeTimes->{{3.7219730985409985`*^9, 3.7219731035611315`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["stdGenCode",
    FontVariations->{"Underline"->True}], "=", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Phe\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Tyr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Cys\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Phe\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Tyr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Cys\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Stop\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Stop\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Stop\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Trp\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Pro\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<His\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Pro\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<His\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Pro\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gln\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Leu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Pro\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gln\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Ile\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Thr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Asn\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Ile\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Thr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Asn\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ser\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Ile\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Thr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Lys\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Met\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Thr\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Lys\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Arg\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Val\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ala\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Asp\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gly\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Val\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ala\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Asp\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gly\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Val\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ala\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Glu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gly\>\"", "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Val\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Ala\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Glu\>\"", "}"}], ",", 
        RowBox[{"{", "\"\<Gly\>\"", "}"}]}], "}"}]}], "}"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<Gly\>\"", "\[Rule]", "\"\<G\>\""}], ",", 
      RowBox[{"\"\<Ala\>\"", "\[Rule]", "\"\<A\>\""}], " ", ",", " ", 
      RowBox[{"\"\<Leu\>\"", "\[Rule]", "\"\<L\>\""}], ",", " ", 
      RowBox[{"\"\<Met\>\"", "\[Rule]", "\"\<M\>\""}], ",", " ", 
      RowBox[{"\"\<Phe\>\"", "\[Rule]", "\"\<F\>\""}], ",", " ", 
      RowBox[{"\"\<Trp\>\"", "\[Rule]", "\"\<W\>\""}], ",", " ", 
      RowBox[{"\"\<Lys\>\"", "\[Rule]", "\"\<K\>\""}], ",", " ", 
      RowBox[{"\"\<Gln\>\"", "\[Rule]", "\"\<Q\>\""}], ",", " ", 
      RowBox[{"\"\<Glu\>\"", "\[Rule]", "\"\<E\>\""}], ",", " ", 
      RowBox[{"\"\<Ser\>\"", "\[Rule]", "\"\<S\>\""}], ",", " ", 
      RowBox[{"\"\<Pro\>\"", "\[Rule]", "\"\<P\>\""}], ",", " ", 
      RowBox[{"\"\<Val\>\"", "\[Rule]", "\"\<V\>\""}], ",", " ", 
      RowBox[{"\"\<Ile\>\"", "\[Rule]", "\"\<I\>\""}], ",", " ", 
      RowBox[{"\"\<Cys\>\"", "\[Rule]", "\"\<C\>\""}], ",", " ", 
      RowBox[{"\"\<Tyr\>\"", "\[Rule]", "\"\<Y\>\""}], ",", " ", 
      RowBox[{"\"\<His\>\"", "\[Rule]", "\"\<H\>\""}], ",", " ", 
      RowBox[{"\"\<Arg\>\"", "\[Rule]", "\"\<R\>\""}], ",", " ", 
      RowBox[{"\"\<Asn\>\"", "\[Rule]", "\"\<N\>\""}], ",", " ", 
      RowBox[{"\"\<Asp\>\"", "\[Rule]", "\"\<D\>\""}], ",", " ", 
      RowBox[{"\"\<Thr\>\"", "\[Rule]", "\"\<T\>\""}], ",", " ", 
      RowBox[{"\"\<Stop\>\"", "\[Rule]", "\"\<*\>\""}]}], "}"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7219713019389772`*^9, 3.721971341700871*^9}, {
   3.7219716400532446`*^9, 3.7219718893055887`*^9}, {3.721971995172592*^9, 
   3.7219721969558277`*^9}, 3.721972256736228*^9, {3.7219723049657173`*^9, 
   3.721972315319098*^9}, {3.7219723461781626`*^9, 3.7219723476002607`*^9}, {
   3.721972387488779*^9, 3.7219726695385513`*^9}}],

Cell["\<\
Utilizing the stdn genetic code and the codon table, this is a standard \
genetic code list of replacement rules for translation.
(http://www.genome.jp/kegg/catalog/codes1.html)\
\>", "Text",
 CellChangeTimes->{{3.721973108169861*^9, 3.7219731346931095`*^9}, {
  3.721980873877787*^9, 3.7219808776830263`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   StyleBox["replaceTableStd",
    FontVariations->{"Underline"->True}], "=", 
   RowBox[{
    RowBox[{"Append", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"nucCodeTable", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", "j", ",", " ", "1"}], "]"}], "]"}], "->", 
           RowBox[{"stdGenCode", "[", 
            RowBox[{"[", 
             RowBox[{"i", ",", " ", "j", ",", " ", "1"}], "]"}], "]"}]}], 
          "}"}], "\[IndentingNewLine]", ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "[", "nucCodeTable", "]"}]}], "}"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", "1", ",", " ", 
           RowBox[{"Length", "[", 
            RowBox[{"nucCodeTable", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], "//", "Flatten"}], ",", " ", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<TTN\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<TCN\>\"", "\[Rule]", "\"\<S\>\""}], ",", " ", 
        RowBox[{"\"\<TGN\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<CTN\>\"", "\[Rule]", "\"\<L\>\""}], ",", " ", 
        RowBox[{"\"\<CCN\>\"", " ", "\[Rule]", "\"\<P\>\""}], ",", 
        RowBox[{"\"\<CAN\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<CGN\>\"", "\[Rule]", "\"\<R\>\""}], ",", " ", 
        RowBox[{"\"\<ATN\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<ACT\>\"", "\[Rule]", "\"\<T\>\""}], ",", " ", 
        RowBox[{"\"\<AAT\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<AGT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<GTN\>\"", "\[Rule]", "\"\<V\>\""}], ",", " ", 
        RowBox[{"\"\<GCN\>\"", "\[Rule]", "\"\<A\>\""}], ",", " ", 
        RowBox[{"\"\<GAN\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<GGN\>\"", "\[Rule]", "\"\<G\>\""}], ",", " ", 
        RowBox[{"\"\<NAA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NTA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NCA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NGA\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<NAT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NTT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NCT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NGT\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<NAC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NTC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NCC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NGC\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<NAG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NTG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NCG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<NGG\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<ANA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<TNA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<CNA\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<GNA\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<ANT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<TNT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<CNT\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<GNT\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        RowBox[{"\"\<ANC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<TNC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<CNC\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<GNC\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<ANG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<TNG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<CNG\>\"", "\[Rule]", "\"\<?\>\""}], ",", " ", 
        RowBox[{"\"\<GNG\>\"", "\[Rule]", "\"\<?\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\<TTY\>\"", "\[Rule]", "\"\<F\>\""}], ",", 
        RowBox[{"\"\<TTR\>\"", "\[Rule]", "\"\<L\>\""}], ",", 
        RowBox[{"\"\<AUH\>\"", "\[Rule]", "\"\<I\>\""}], ",", 
        RowBox[{"\"\<TAY\>\"", "\[Rule]", "\"\<Y\>\""}], ",", 
        RowBox[{"\"\<TAR\>\"", "\[Rule]", "\"\<*\>\""}], ",", 
        RowBox[{"\"\<TGY\>\"", "\[Rule]", "\"\<C\>\""}], ",", 
        RowBox[{"\"\<CAY\>\"", "\[Rule]", "\"\<H\>\""}], ",", 
        RowBox[{"\"\<CAR\>\"", "\[Rule]", "\"\<Q\>\""}], ",", 
        RowBox[{"\"\<AAY\>\"", "\[Rule]", "\"\<N\>\""}], ",", 
        RowBox[{"\"\<AAR\>\"", "\[Rule]", "\"\<K\>\""}], ",", 
        RowBox[{"\"\<GAY\>\"", "\[Rule]", "\"\<D\>\""}], ",", 
        RowBox[{"\"\<GAR\>\"", "\[Rule]", "\"\<E\>\""}], ",", " ", 
        RowBox[{"\"\<AGY\>\"", "\[Rule]", "\"\<S\>\""}], ",", 
        RowBox[{"\"\<AGY\>\"", "\[Rule]", "\"\<K\>\""}], ",", " ", 
        RowBox[{"\"\<TRA\>\"", "\[Rule]", "\"\<*\>\""}], ",", 
        RowBox[{"\"\<YUR\>\"", "\[Rule]", " ", "\"\<L\>\""}], ",", " ", 
        RowBox[{"\"\<MGR\>\"", "\[Rule]", "\"\<R\>\""}]}], "}"}]}], "]"}], "//",
     "Flatten"}]}], ";"}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQXZGdViW5+7Ujw663YJrr5ZpWEB3CYDkDRC8JElkB
Fv/JvxpE75vN9RVE60zV/Q6iXWq398gA6SbRZZPAtNnhaSC6SOgUmHZZf3sO
iD424fs8EL3E5fMyEB00q3E5iJ5lnr0aRG9ovbEORKdl6W0H0YvUnA+D6DaN
r5dAtMX0hlsgWihH5TmIZvEq/ACibfMrf4Low5uM/oBoqf4QFVkgLdggrgqi
N334rgWila7VWIJopk+OniDa8qy7P4gOY5YLA9H7Htg1gOgQ3vYWEL3M8V4f
iF743m8KiHaIs5wBohmetM0H0VUGzxaD9ZsprgDRRqt+rAbRz1NlNoHoC6ct
d4DoW68i94DoCneVQyAaAF7GuQc=
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{"temp", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<CYT\>\"", ",", "\"\<ATT\>\"", ",", "\"\<ACT\>\"", ",", "\"\<CGT\>\"",
      ",", "\"\<GAG\>\"", ",", "\"\<TCA\>\"", ",", "\"\<GAG\>\"", ",", 
     "\"\<AAG\>\"", ",", "\"\<CTA\>\"", ",", "\"\<CTG\>\"", ",", 
     "\"\<CAT\>\"", ",", "\"\<TGC\>\"", ",", "\"\<TAA\>\"", ",", 
     "\"\<CAT\>\"", ",", "\"\<CCA\>\"", ",", "\"\<AGA\>\"", ",", 
     "\"\<AGA\>\"", ",", "\"\<TGG\>\"", ",", "\"\<TAT\>\"", ",", 
     "\"\<ACA\>\"", ",", "\"\<GTA\>\"", ",", "\"\<AGT\>\"", ",", 
     "\"\<CAA\>\"", ",", "\"\<TGT\>\"", ",", "\"\<TTA\>\"", ",", 
     "\"\<ATC\>\"", ",", "\"\<GTG\>\"", ",", "\"\<ATG\>\"", ",", 
     "\"\<GGA\>\"", ",", "\"\<TCC\>\"", ",", "\"\<AAA\>\"", ",", 
     "\"\<GAT\>\"", ",", "\"\<GAC\>\"", ",", "\"\<GCT\>\"", ",", 
     "\"\<AAT\>\"", ",", "\"\<TCA\>\"", ",", "\"\<ACG\>\"", ",", 
     "\"\<GTT\>\"", ",", "\"\<TGA\>\"", ",", "\"\<ATG\>\"", ",", 
     "\"\<CAA\>\"", ",", "\"\<AGA\>\"", ",", "\"\<AAG\>\"", ",", 
     "\"\<GAG\>\"", ",", "\"\<TGT\>\"", ",", "\"\<TTA\>\"", ",", 
     "\"\<TTG\>\"", ",", "\"\<CTG\>\"", ",", "\"\<GGT\>\"", ",", 
     "\"\<CGC\>\"", ",", "\"\<AAA\>\"", ",", "\"\<TTG\>\"", ",", 
     "\"\<TTT\>\"", ",", "\"\<CAT\>\"", ",", "\"\<GCT\>\"", ",", 
     "\"\<AAA\>\"", ",", "\"\<CAA\>\"", ",", "\"\<GAT\>\"", ",", 
     "\"\<TGA\>\"", ",", "\"\<TCA\>\"", ",", "\"\<TTT\>\"", ",", 
     "\"\<CCA\>\"", ",", "\"\<TTG\>\"", ",", "\"\<GTT\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<TTT\>\"", ",", "\"\<CTT\>\"", ",", 
     "\"\<AAA\>\"", ",", "\"\<GGA\>\"", ",", "\"\<TTG\>\"", ",", 
     "\"\<GTA\>\"", ",", "\"\<TAT\>\"", ",", "\"\<AAC\>\"", ",", 
     "\"\<CTT\>\"", ",", "\"\<GAA\>\"", ",", "\"\<AAT\>\"", ",", 
     "\"\<ATG\>\"", ",", "\"\<GGT\>\"", ",", "\"\<GAA\>\"", ",", 
     "\"\<ATA\>\"", ",", "\"\<GTG\>\"", ",", "\"\<TTC\>\"", ",", 
     "\"\<ATA\>\"", ",", "\"\<TCC\>\"", ",", "\"\<ACG\>\"", ",", 
     "\"\<TCA\>\"", ",", "\"\<AAA\>\"", ",", "\"\<TGA\>\"", ",", 
     "\"\<ATG\>\"", ",", "\"\<GTG\>\"", ",", "\"\<AAA\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<CAA\>\"", ",", "\"\<GTG\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<CAA\>\"", ",", "\"\<TCA\>\"", ",", 
     "\"\<CCA\>\"", ",", "\"\<CGC\>\"", ",", "\"\<TGG\>\"", ",", 
     "\"\<CTG\>\"", ",", "\"\<GCA\>\"", ",", "\"\<TTT\>\"", ",", 
     "\"\<CAA\>\"", ",", "\"\<GTC\>\"", ",", "\"\<TTA\>\"", ",", 
     "\"\<CAG\>\"", ",", "\"\<ACT\>\"", ",", "\"\<TGT\>\"", ",", 
     "\"\<TGC\>\"", ",", "\"\<CAG\>\"", ",", "\"\<AGA\>\"", ",", 
     "\"\<TGC\>\"", ",", "\"\<CAC\>\"", ",", "\"\<TAC\>\"", ",", 
     "\"\<CTT\>\"", ",", "\"\<CAC\>\"", ",", "\"\<CAT\>\"", ",", 
     "\"\<TGC\>\"", ",", "\"\<CAC\>\"", ",", "\"\<AGA\>\"", ",", 
     "\"\<CAT\>\"", ",", "\"\<TAA\>\"", ",", "\"\<GTA\>\"", ",", 
     "\"\<ACA\>\"", ",", "\"\<AGT\>\"", ",", "\"\<CCC\>\"", ",", 
     "\"\<TGC\>\"", ",", "\"\<TAT\>\"", ",", "\"\<TCC\>\"", ",", 
     "\"\<ATC\>\"", ",", "\"\<CTC\>\"", ",", "\"\<GAG\>\"", ",", 
     "\"\<TGG\>\"", ",", "\"\<CAG\>\"", ",", "\"\<AAG\>\"", ",", 
     "\"\<AAG\>\"", ",", "\"\<CTC\>\"", ",", "\"\<AAA\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<TTC\>\"", ",", "\"\<TGA\>\"", ",", 
     "\"\<GTG\>\"", ",", "\"\<TGC\>\"", ",", "\"\<GGG\>\"", ",", 
     "\"\<ACG\>\"", ",", "\"\<ATG\>\"", ",", "\"\<CCT\>\"", ",", 
     "\"\<TGG\>\"", ",", "\"\<TGC\>\"", ",", "\"\<CTC\>\"", ",", 
     "\"\<AGC\>\"", ",", "\"\<TGA\>\"", ",", "\"\<TCC\>\"", ",", 
     "\"\<AAT\>\"", ",", "\"\<CTC\>\"", ",", "\"\<TTG\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<AGA\>\"", ",", "\"\<CGT\>\"", ",", 
     "\"\<CTG\>\"", ",", "\"\<CTG\>\"", ",", "\"\<ATC\>\"", ",", 
     "\"\<ACA\>\"", ",", "\"\<TTG\>\"", ",", "\"\<AGC\>\"", ",", 
     "\"\<TGA\>\"", ",", "\"\<AGG\>\"", ",", "\"\<ATC\>\"", ",", 
     "\"\<ATT\>\"", ",", "\"\<ATG\>\"", ",", "\"\<CTG\>\"", ",", 
     "\"\<GAA\>\"", ",", "\"\<CAG\>\"", ",", "\"\<AAC\>\"", ",", 
     "\"\<CAC\>\"", ",", "\"\<CTG\>\"", ",", "\"\<TGG\>\"", ",", 
     "\"\<ACC\>\"", ",", "\"\<AGC\>\"", ",", "\"\<AAC\>\"", ",", 
     "\"\<AGA\>\"", ",", "\"\<ATA\>\"", ",", "\"\<TTC\>\"", ",", 
     "\"\<CAG\>\"", ",", "\"\<AAC\>\"", ",", "\"\<TCC\>\"", ",", 
     "\"\<TGA\>\"", ",", "\"\<AAG\>\"", ",", "\"\<CTA\>\"", ",", 
     "\"\<TTC\>\"", ",", "\"\<TTC\>\"", ",", "\"\<AAC\>\"", ",", 
     "\"\<GGA\>\""}], "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7219815216764164`*^9, 3.7219815390109987`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"temp", "/.", 
      StyleBox["replaceTableStd",
       FontVariations->{"Underline"->True}]}], 
     StyleBox[")",
      FontVariations->{"Underline"->True}]}], 
    StyleBox[
     RowBox[{
      StyleBox["/",
       FontVariations->{"Underline"->True}], "."}]], 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x_", "/;", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"StringLength", "[", "x", "]"}], ">", "2"}], ")"}]}], 
      "\[Rule]", "\"\<?\>\""}], "}"}]}], ")"}], "//", "Quiet"}]], "Input",
 CellChangeTimes->{{3.721981486198671*^9, 3.721981533642111*^9}, {
  3.7219815973999977`*^9, 3.721981665018918*^9}, {3.72198170948659*^9, 
  3.7219817125963697`*^9}, {3.7219818128880067`*^9, 3.7219818379904385`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"?\"\>", ",", "\<\"I\"\>", ",", "\<\"T\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"E\"\>", ",", "\<\"S\"\>", ",", "\<\"E\"\>", ",", "\<\"K\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"L\"\>", ",", "\<\"H\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"*\"\>", ",", "\<\"H\"\>", ",", "\<\"P\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"R\"\>", ",", "\<\"W\"\>", ",", "\<\"Y\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"V\"\>", ",", "\<\"S\"\>", ",", "\<\"Q\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"I\"\>", ",", "\<\"V\"\>", ",", "\<\"M\"\>", 
   ",", "\<\"G\"\>", ",", "\<\"S\"\>", ",", "\<\"K\"\>", ",", "\<\"D\"\>", 
   ",", "\<\"D\"\>", ",", "\<\"A\"\>", ",", "\<\"N\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"T\"\>", ",", "\<\"V\"\>", ",", "\<\"*\"\>", ",", "\<\"M\"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"R\"\>", ",", "\<\"K\"\>", ",", "\<\"E\"\>", 
   ",", "\<\"C\"\>", ",", "\<\"L\"\>", ",", "\<\"L\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"G\"\>", ",", "\<\"R\"\>", ",", "\<\"K\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"F\"\>", ",", "\<\"H\"\>", ",", "\<\"A\"\>", ",", "\<\"K\"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"D\"\>", ",", "\<\"*\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"F\"\>", ",", "\<\"P\"\>", ",", "\<\"L\"\>", ",", "\<\"V\"\>", 
   ",", "\<\"F\"\>", ",", "\<\"F\"\>", ",", "\<\"L\"\>", ",", "\<\"K\"\>", 
   ",", "\<\"G\"\>", ",", "\<\"L\"\>", ",", "\<\"V\"\>", ",", "\<\"Y\"\>", 
   ",", "\<\"N\"\>", ",", "\<\"L\"\>", ",", "\<\"E\"\>", ",", "\<\"N\"\>", 
   ",", "\<\"M\"\>", ",", "\<\"G\"\>", ",", "\<\"E\"\>", ",", "\<\"I\"\>", 
   ",", "\<\"V\"\>", ",", "\<\"F\"\>", ",", "\<\"I\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"T\"\>", ",", "\<\"S\"\>", ",", "\<\"K\"\>", ",", "\<\"*\"\>", 
   ",", "\<\"M\"\>", ",", "\<\"V\"\>", ",", "\<\"K\"\>", ",", "\<\"F\"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"V\"\>", ",", "\<\"F\"\>", ",", "\<\"Q\"\>", 
   ",", "\<\"S\"\>", ",", "\<\"P\"\>", ",", "\<\"R\"\>", ",", "\<\"W\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"A\"\>", ",", "\<\"F\"\>", ",", "\<\"Q\"\>", 
   ",", "\<\"V\"\>", ",", "\<\"L\"\>", ",", "\<\"Q\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"C\"\>", ",", "\<\"C\"\>", ",", "\<\"Q\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"C\"\>", ",", "\<\"H\"\>", ",", "\<\"Y\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"H\"\>", ",", "\<\"H\"\>", ",", "\<\"C\"\>", ",", "\<\"H\"\>", 
   ",", "\<\"R\"\>", ",", "\<\"H\"\>", ",", "\<\"*\"\>", ",", "\<\"V\"\>", 
   ",", "\<\"T\"\>", ",", "\<\"S\"\>", ",", "\<\"P\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"Y\"\>", ",", "\<\"S\"\>", ",", "\<\"I\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"E\"\>", ",", "\<\"W\"\>", ",", "\<\"Q\"\>", ",", "\<\"K\"\>", 
   ",", "\<\"K\"\>", ",", "\<\"L\"\>", ",", "\<\"K\"\>", ",", "\<\"F\"\>", 
   ",", "\<\"F\"\>", ",", "\<\"*\"\>", ",", "\<\"V\"\>", ",", "\<\"C\"\>", 
   ",", "\<\"G\"\>", ",", "\<\"T\"\>", ",", "\<\"M\"\>", ",", "\<\"P\"\>", 
   ",", "\<\"W\"\>", ",", "\<\"C\"\>", ",", "\<\"L\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"*\"\>", ",", "\<\"S\"\>", ",", "\<\"N\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"F\"\>", ",", "\<\"R\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"L\"\>", ",", "\<\"I\"\>", ",", "\<\"T\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"S\"\>", ",", "\<\"*\"\>", ",", "\<\"R\"\>", 
   ",", "\<\"I\"\>", ",", "\<\"I\"\>", ",", "\<\"M\"\>", ",", "\<\"L\"\>", 
   ",", "\<\"E\"\>", ",", "\<\"Q\"\>", ",", "\<\"N\"\>", ",", "\<\"H\"\>", 
   ",", "\<\"L\"\>", ",", "\<\"W\"\>", ",", "\<\"T\"\>", ",", "\<\"S\"\>", 
   ",", "\<\"N\"\>", ",", "\<\"R\"\>", ",", "\<\"I\"\>", ",", "\<\"F\"\>", 
   ",", "\<\"Q\"\>", ",", "\<\"N\"\>", ",", "\<\"S\"\>", ",", "\<\"*\"\>", 
   ",", "\<\"K\"\>", ",", "\<\"L\"\>", ",", "\<\"F\"\>", ",", "\<\"F\"\>", 
   ",", "\<\"N\"\>", ",", "\<\"G\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.721981486581668*^9, 3.721981542855076*^9}, {
   3.7219816334249907`*^9, 3.7219816655188875`*^9}, {3.7219817101272793`*^9, 
   3.72198171305332*^9}, {3.7219818164820557`*^9, 3.7219818385464563`*^9}, {
   3.721988907843565*^9, 3.72198890975753*^9}, 3.722066853683729*^9, 
   3.722077674209584*^9, 3.7221682481579328`*^9, 3.722169245707412*^9, 
   3.72223450397744*^9, 3.722235375157689*^9, 3.722236899244403*^9, 
   3.7222465513013763`*^9, 3.722579347798582*^9, 3.7225949452424173`*^9, 
   3.7226624121035147`*^9, 3.722691686587942*^9, 3.722837034498165*^9, 
   3.7228384053586664`*^9, 3.7228423047653313`*^9, 3.722844526558525*^9, 
   3.722869410675706*^9, 3.722873132504711*^9, 3.7229185554585047`*^9, 
   3.72291860645779*^9, 3.7229325383372154`*^9, 3.7229542928374524`*^9, 
   3.7230984638415585`*^9, 3.723102984585265*^9, 3.7233803496068807`*^9, 
   3.723799552280132*^9, 3.7238735563542624`*^9, 3.7239480803750362`*^9, 
   3.7239722069204273`*^9, 3.7239742637407155`*^9, 3.7239873309617743`*^9, 
   3.7240068318707438`*^9, 3.7240770295452104`*^9, 3.725004757244796*^9, 
   3.725104019847418*^9, 3.725107620323264*^9, 3.72510843876997*^9, 
   3.7251107691909246`*^9, 3.725179170971964*^9, 3.725515318687232*^9, 
   3.7256081631469827`*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Functions", "Subsubsection",
 CellChangeTimes->{{3.721973157954171*^9, 3.721973158751131*^9}}],

Cell["\<\
NOTE: I need to update the below functions to handle non-standard genetic \
codes. I can add it as an option to choose the matrix used.\
\>", "Text",
 CellChangeTimes->{{3.7219893551201115`*^9, 3.7219893827296934`*^9}}],

Cell[TextData[StyleBox["IMPORTANT that the code below does not work about 10% \
of the time because reverse complement reading directions can be more optimal \
choices quite often. Since this function decides on reading frame from \
individual strands, this is a problem. It is highly recommended that you \
align first with the --adjustdirection option in MAFFT first and then use the \
Alignment version of this function.",
 Background->RGBColor[1, 0.85, 0.85]]], "Text",
 CellChangeTimes->{{3.7229260959709578`*^9, 3.722926124968491*^9}, {
  3.7229291229425898`*^9, 3.722929144637504*^9}, {3.7229291824050493`*^9, 
  3.7229293062128897`*^9}}],

Cell[TextData[StyleBox["Translate multiple FASTA files",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.72198748455087*^9, 3.721987493600369*^9}}],

Cell[TextData[{
 StyleBox["input",
  FontWeight->"Bold"],
 " = the nucleotide FASTA file name you want to translate\n",
 StyleBox["suffix",
  FontWeight->"Bold"],
 " = the suffix you want to add to the file, INCLUDING the format suffix (e.g \
\[OpenCurlyDoubleQuote].fasta\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote].txt\[CloseCurlyDoubleQuote] )"
}], "Text",
 CellChangeTimes->{{3.7219877566552114`*^9, 3.72198778657812*^9}, {
   3.721987817806065*^9, 3.7219878524181857`*^9}, 3.722925225951001*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translateFASTAFile", "[", 
   RowBox[{"input_", ",", " ", "suffix_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{"input", ",", " ", "\"\<.\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<.\>\"", "<>", "suffix"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"importAlignment", "[", "input", "]"}], "//", 
         "translateFASTA"}], "//", "fastaOutput"}], ",", " ", 
       "\"\<Text\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7219874969835896`*^9, 3.721987588617464*^9}, {
  3.7219876353755383`*^9, 3.7219877403236065`*^9}}],

Cell[TextData[StyleBox["Translate a whole FASTA parsed object",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.7219819288198576`*^9, 3.721981935642774*^9}, {
  3.721987904068366*^9, 3.7219879078087835`*^9}}],

Cell[TextData[{
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " = a fastaParsed object"
}], "Text",
 CellChangeTimes->{{3.721987916091482*^9, 3.721987926505068*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translateFASTA", "[", "fastaParsed_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"translate1", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@", 
     "fastaParsed"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7219819398774667`*^9, 3.7219820769704194`*^9}, {
  3.721982143286683*^9, 3.72198214699759*^9}, {3.72198219697466*^9, 
  3.7219822087629957`*^9}}],

Cell[TextData[StyleBox["Translating a single FASTA entry",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.721974143704458*^9, 3.721974153117324*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translate1", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", " ", "b", ",", " ", "c", ",", "d", ",", " ", 
      "transLateIn6Frames", ",", "numStops", ",", "stopPoss", ",", 
      "distances", ",", "maxDistance", ",", "numstopsMiddle", ",", " ", 
      "crit1", ",", " ", "crit2", ",", " ", "crit3", ",", "crit4", ",", 
      "crit5", ",", " ", "crit6", ",", " ", "crit7", ",", " ", "crit8", ",", 
      " ", "crit9", ",", "translation", ",", " ", "scores1", ",", " ", 
      "scores2", ",", " ", "scores3", ",", " ", "tally"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "translate", " ", "in", " ", "6", " ", "standard", " ", "reading", " ", 
      "frames"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringPartition", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"sequence", "//", "ToUpperCase"}], ",", "#"}], "]"}], 
           ",", " ", "3"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"b", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringPartition", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"sequence", "//", "ToUpperCase"}], "//", "revComp"}], 
             ",", "#"}], "]"}], ",", " ", "3"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"transLateIn6Frames", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"a", ",", " ", "b"}], "}"}], ",", " ", "1"}], "]"}], "/.", 
       StyleBox["replaceTableStd",
        FontVariations->{"Underline"->True}]}]}], 
     StyleBox[";",
      FontVariations->{"Underline"->True}], "\[IndentingNewLine]", 
     RowBox[{"transLateIn6Frames", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"transLateIn6Frames", "/.", 
         RowBox[{
          RowBox[{"x_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"StringLength", "[", "x", "]"}], ">", "2"}], ")"}]}], 
          "\[Rule]", "\"\<?\>\""}]}], ")"}], "//", "Quiet"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "line", " ", "just", " ", "turns", " ", "any", " ", 
       "untranslated", " ", "codons", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
         "because", " ", "they", " ", "have", " ", "some", " ", "kind", " ", 
          "of", " ", "undefined", " ", "degeneracy"}], ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"into", " ", "?"}], "'"}], "s"}]}]}]}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "I", " ", "am", " ", "using", " ", "three", " ", "criteria", " ", "to",
         " ", "determine", " ", "the", " ", "reading", " ", "frame", " ", 
        "of", " ", "the", " ", 
        RowBox[{"sequence", ".", "\[IndentingNewLine]", "1."}], " ", "The", 
        " ", "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the",
         " ", "number", " ", "of", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "2."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "creates", " ", "the", 
        " ", "largest", " ", "gap", " ", "without", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "3."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the", 
        " ", "number", " ", "of", " ", "stop", " ", "codons", " ", "in", " ", 
        "the", " ", "middle", " ", "of", " ", "the", " ", 
        RowBox[{
        "read", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "Criteria"}], " ", "3", " ", "is", " ", "the", " ", "tie", " ", 
        "breaking", " ", 
        RowBox[{"criterion", ".", " ", "The"}], " ", "rationale", " ", "is", 
        " ", "that", " ", "a", " ", "read", " ", "or", " ", "transcript", " ",
         "should", " ", "be", " ", "dirty", " ", "on", " ", "the", " ", "end",
         " ", "and", " ", "we", " ", "would", " ", "expect", " ", "stop", " ",
         "codons", " ", "there", " ", "because", " ", "these", " ", "are", 
        " ", "introns"}], ",", " ", 
       RowBox[{"or", " ", "dirty", " ", 
        RowBox[{"data", "."}]}]}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"numStops", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn6Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stopPoss", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", "#", "]"}], "&"}], "/@", 
               RowBox[{"StringPosition", "[", 
                RowBox[{"#", ",", "\"\<*\>\""}], "]"}]}], ")"}], ",", " ", 
             "0", ",", " ", 
             RowBox[{"StringLength", "[", "#", "]"}]}], "}"}], "]"}], "//", 
          "Sort"}], ")"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn6Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"distances", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Differences", "[", "#", "]"}], "&"}], "/@", "#"}], "&"}], 
        "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", " ", "2"}], "]"}], ")"}], "&"}], "/@", 
          "stopPoss"}], ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxDistance", "=", 
      RowBox[{"Max", "/@", "distances"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numstopsMiddle", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"StringDrop", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"#", ",", "10"}], "]"}], ",", 
            RowBox[{"-", "10"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringJoin", "/@", "transLateIn6Frames"}]}], ")"}]}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"crit1", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numStops", ",", " ", 
         RowBox[{"numStops", "//", "Min"}]}], "]"}], "//", "Flatten"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"crit2", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"maxDistance", ",", " ", 
         RowBox[{"maxDistance", "//", "Max"}]}], "]"}], "//", "Flatten"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"crit3", " ", "=", " ", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numstopsMiddle", ",", " ", 
         RowBox[{"numstopsMiddle", "//", "Min"}]}], "]"}], "//", 
       "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "this", " ", "part", " ", "actually", " ", "makes", " ", "the", " ", 
        "decision", " ", "of", " ", "which", " ", "criteria", " ", 
        RowBox[{"wins", ".", " ", "It"}], " ", "is", " ", "unfinished", " ", 
        "because", " ", "it", " ", 
        RowBox[{"doesn", "'"}], "t", " ", "say", " ", "what", " ", "to", " ", 
        "do", " ", "if", " ", "there", " ", "is", " ", "a", " ", "tie"}], ",",
        " ", 
       RowBox[{"which", " ", "is", " ", "possible"}], ",", " ", 
       RowBox[{"although", " ", 
        RowBox[{"unlikely", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Which", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"c", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], 
               "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"c", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"c", "//", "Length"}], ")"}], "\[NotEqual]", " ", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", "c"}], ";", " ", 
          RowBox[{"Print", "[", "\"\<Criteria ambiguous.\>\"", "]"}]}]}], 
        RowBox[{"(*", 
         RowBox[{
         "throw", " ", "to", " ", "a", " ", "script", " ", "that", " ", 
          "makes", " ", "more", " ", "than", " ", "one", " ", "sequence"}], 
         "*)"}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"print", " ", "a", " ", "single", " ", "output"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "note", " ", "that", " ", "if", " ", "a", " ", "nucleotide", " ", 
          "sequence", " ", "has", " ", "an", " ", "ambiguity", " ", 
          RowBox[{"(", "N", ")"}], " ", "it", " ", "could", " ", "be", " ", 
          "that", " ", "there", " ", "is", " ", "a", " ", "frame", " ", 
          "shift", " ", "within", " ", "the", " ", 
          RowBox[{"sequence", ".", " ", "We"}], " ", "could", " ", "account", 
          " ", "for", " ", "this", " ", "by", " ", "duplicating", " ", "the", 
          " ", "original", " ", "sequence", " ", "by", " ", "replacing", " ", 
          "all", " ", "the", " ", 
          RowBox[{"\"\<N\>\"", "'"}], "s", " ", "with", " ", 
          RowBox[{"\"\<NN\>\"", "'"}], "s", " ", "or", " ", 
          RowBox[{"\"\<\>\"", "'"}], 
          RowBox[{"s", ".", " ", "I"}], " ", "looked", " ", "in", " ", "the", 
          " ", "transcriptome", " ", "files", " ", "and", " ", "this", " ", 
          "seems", " ", "to", " ", "be", " ", "a", " ", "very", " ", "rare", 
          " ", "case"}], ",", " ", 
         RowBox[{
         "so", " ", "I", " ", "am", " ", "not", " ", "adding", " ", "it", " ", 
          RowBox[{"now", ".", " ", "It"}], " ", "might", " ", "be", " ", "an",
           " ", "issue", " ", "witht", " ", "eh", " ", "AHE", " ", "files", 
          " ", "but", " ", "since", " ", "orthograph", " ", "translated", " ",
           "those", " ", "for", " ", "me", " ", "this", " ", "issue", " ", 
          "is", " ", "irrelevant"}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{"translation", "//", "StringJoin"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"crit1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"which", " ", "condition", " ", "1"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"crit2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"d", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}]}],
            ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"d", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "further", " ", "criteria"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"crit4", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numStops", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numStops", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit5", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"maxDistance", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"maxDistance", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Max"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit6", "=", " ", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numstopsMiddle", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numstopsMiddle", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";"}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"crit4", ",", " ", "crit5", ",", " ", "crit6"}], 
              "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}]}], 
       ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "even", " ", "more", " ", "criteria"}], 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"crit7", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numStops", "[", 
               RowBox[{"[", 
                RowBox[{"4", ";;", "6"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numStops", "[", 
                RowBox[{"[", 
                 RowBox[{"4", ";;", "6"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit8", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"maxDistance", "[", 
               RowBox[{"[", 
                RowBox[{"4", ";;", "6"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"maxDistance", "[", 
                RowBox[{"[", 
                 RowBox[{"4", ";;", "6"}], "]"}], "]"}], "//", "Max"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit9", "=", " ", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numstopsMiddle", "[", 
               RowBox[{"[", 
                RowBox[{"4", ";;", "6"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numstopsMiddle", "[", 
                RowBox[{"[", 
                 RowBox[{"4", ";;", "6"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";"}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"crit7", ",", " ", "crit8", ",", " ", "crit9"}], 
              "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}]}], 
       ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "5"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "another", " ", "criteria", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "this", " ", "one", " ", "depends", " ", "on", " ", "giving", " ", 
            "scores", " ", "based", " ", "on", " ", "ranks"}], ",", " ", 
           RowBox[{
           "and", " ", "the", " ", "one", " ", "with", " ", "the", " ", 
            "lowest", " ", "score"}], ",", " ", 
           RowBox[{"wins", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"scores1", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{
                   RowBox[{"numStops", "//", "Sort"}], ",", " ", "#"}], "]"}],
                  "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "numStops"}], 
              ")"}], "//", "Flatten"}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores2", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"maxDistance", "//", "Sort"}], "//", "Reverse"}], 
                  ",", " ", "#"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "maxDistance"}], 
             ")"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores3", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"numstopsMiddle", "//", "Sort"}], ",", " ", "#"}], 
                 "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
              "numstopsMiddle"}], ")"}], "//", "Flatten"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tally", "=", 
           RowBox[{"scores1", "+", "scores2", "+", "scores3"}]}], ";"}], 
         ")"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Position", "[", 
              RowBox[{"tally", ",", " ", 
               RowBox[{"Min", "[", "tally", "]"}]}], "]"}]}], ")"}], "//", 
           "Length"}], ")"}], "\[Equal]", "1"}]}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn6Frames", "[", 
          RowBox[{"[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"another", " ", 
          RowBox[{"criteria", ":", " ", 
           RowBox[{
           "this", " ", "one", " ", "will", " ", "pick", " ", "randomly", " ",
             "from", " ", "among", " ", "some", " ", "of", " ", "the", " ", 
            "best", " ", 
            RowBox[{"options", ".", " ", "At"}], " ", "this", " ", 
            "point"}]}]}], ",", " ", 
         RowBox[{
         "we", " ", "have", " ", "eliminated", " ", "the", " ", "vast", " ", 
          "majority", " ", "of", " ", 
          RowBox[{"sequences", ".", " ", "Now"}]}], ",", " ", 
         RowBox[{
         "we", " ", "are", " ", "only", " ", "dealing", " ", "with", " ", 
          "very", " ", "rare", " ", "cases"}], ",", " ", 
         RowBox[{
         "so", " ", "choosing", " ", "randomly", " ", "among", " ", "a", " ", 
          "set", " ", "of", " ", "possible", " ", "options", " ", 
          RowBox[{"isn", "'"}], "t", " ", "such", " ", "a", " ", "bad", " ", 
          RowBox[{"idea", ".", " ", "The"}], " ", "bad", " ", "ones", " ", 
          "should", " ", "be", " ", "eliminated", " ", "in", " ", "masking", 
          " ", "phase", " ", "anyway"}]}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"1", "\[Equal]", "1"}], " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"will", " ", "always", " ", "be", " ", "true"}], "..."}], 
        "*)"}], ",", " ", 
       RowBox[{"translation", "=", 
        RowBox[{"transLateIn6Frames", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}],
               ",", " ", "crit2"}], "]"}], "//", "Flatten"}], "//", 
           "RandomChoice"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"translation", "//", "StringJoin"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.721977637093128*^9, 3.721977697030266*^9}, {
   3.7219777274079385`*^9, 3.721977968818316*^9}, {3.721978047821655*^9, 
   3.7219781636014023`*^9}, 3.7219781974233055`*^9, {3.721978482718737*^9, 
   3.721978499204916*^9}, {3.721981723149268*^9, 3.7219817528573008`*^9}, {
   3.7219817837459664`*^9, 3.721981797319458*^9}, {3.721981842017214*^9, 
   3.721981917337189*^9}, {3.7219846743041496`*^9, 3.721984857488023*^9}, {
   3.721985742452217*^9, 3.721985753706478*^9}, {3.7219862571959486`*^9, 
   3.7219863044993525`*^9}, {3.721986463739582*^9, 3.721986620513022*^9}, {
   3.7219866601809807`*^9, 3.7219866698806314`*^9}, 3.721986714148181*^9, {
   3.72198693440825*^9, 3.7219869367865543`*^9}, {3.721986978168607*^9, 
   3.7219870556651134`*^9}, {3.721987107072499*^9, 3.721987111019472*^9}, {
   3.7219871665848417`*^9, 3.7219872369433775`*^9}, {3.7219872880120564`*^9, 
   3.7219873331819377`*^9}, {3.7219873727491255`*^9, 3.7219873909038043`*^9}}]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Alignment manipulation", "Chapter",
 CellChangeTimes->{{3.71298983523007*^9, 3.712989838735557*^9}, 
   3.7219781849496994`*^9},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[CellGroupData[{

Cell["Making consensus sequences", "Subchapter",
 CellChangeTimes->{{3.7230127701407375`*^9, 3.7230128223490553`*^9}},
 Background->RGBColor[1, 0.85, 0.85]],

Cell[CellGroupData[{

Cell["Making strict consensus sequences", "Subsection",
 CellChangeTimes->{{3.7125620734906673`*^9, 3.712562081584355*^9}}],

Cell["\<\
NOTE: THE WAY THIS FUNCTION IS WRITTEN IT CANNOT WORK FOR AMINO ACID \
SEQUENCES (because \[OpenCurlyDoubleQuote]N\[CloseCurlyDoubleQuote] is an \
amino-acid code). I WILL NEED TO REWRITE A NEW VERSION FOR AA\
\[CloseCurlyQuote]S.\
\>", "Text",
 CellChangeTimes->{{3.725108364667425*^9, 3.7251084129015064`*^9}}],

Cell[TextData[{
 "This  will take a fasta file and output a strict consensus (100% similarity \
only) of all the sequences. You can do this easily with EMBOSS, but this \
version will take terminal gaps and exclude them from the character \
consideration. This requires that you use the ",
 StyleBox["terminalGapsFastaFix ",
  FontWeight->"Bold"],
 "and/or ",
 StyleBox["terminalGapsToUnknown",
  FontWeight->"Bold"],
 " functions first to change all the terminal gaps to a ",
 StyleBox["FASTA UNIQUE",
  FontSlant->"Italic"],
 " character. \[OpenCurlyDoubleQuote]?\[CloseCurlyDoubleQuote]s are \
recommended.\n\nThe input is:\n\t ",
 StyleBox["termGappedAlign",
  FontWeight->"Bold"],
 " which is an alignment with terminal gaps. The format is a list of string \
alignments, or what you would get from fastaParsedFASTA[[All, 2]].\nThe \
parameters are...\n\t",
 StyleBox["termGapCharacter ",
  FontWeight->"Bold"],
 " - a string indicating the character you are using as your terminal gap.\n\t\
",
 StyleBox["minimumRequired ",
  FontWeight->"Bold"],
 " - a number indicating how many sequences you wish to be the minimum for \
choosing a nonambiguous (non-N) character. It is made such that the minimum \
cannot be less than 2. This means that the consensus you get will always be \
shorter than the longest sequence, assuming the sequences aren\
\[CloseCurlyQuote]t the same length."
}], "Text",
 CellChangeTimes->{{3.7125620996181507`*^9, 3.712562281885334*^9}, {
  3.712564890134596*^9, 3.7125649214567757`*^9}, {3.712564957916504*^9, 
  3.712565145950288*^9}, {3.7251070596374583`*^9, 3.7251070631877623`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"strictConsensus", "[", 
   RowBox[{
   "termGappedAlign_", ",", "termGapCharacter_String", ",", 
    "minimumRequired_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "min", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"min", "=", "minimumRequired"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"minimumRequired", "\[LessEqual]", " ", "1"}], ",", " ", 
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{
          RowBox[{"ToString", "[", "min", "]"}], "<>", 
          "\"\<is the min. Too low. Changing to 2.\>\""}], "]"}], ";", 
        RowBox[{"min", "=", "2"}], ";"}], ",", " ", 
       RowBox[{"Null", ";"}]}], " ", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"makePolymorphismsAmbiguous", "[", 
          RowBox[{
           RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", " ", "termGapCharacter"}], "]"}], "//", 
                    "Length"}], ")"}], "<", "  ", "min"}], ",", 
                 RowBox[{"{", "\"\<N\>\"", "}"}], ",", " ", "#"}], "]"}], 
               ")"}], "\[IndentingNewLine]", "//", "Union"}], ",", " ", 
             "termGapCharacter"}], "]"}], "//", "ToUpperCase"}], "]"}], "&"}],
         "/@", 
        RowBox[{"(", 
         RowBox[{"a", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"StringPartition", "[", 
                RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
              "termGappedAlign"}], ")"}], "//", "Transpose"}], ")"}]}], 
         ")"}]}], ")"}], "//", "StringJoin"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.71256493214318*^9, 3.7125649507399077`*^9}, {
  3.712565227482884*^9, 3.7125652464487867`*^9}, {3.7125652803785615`*^9, 
  3.71256532632862*^9}, {3.7125654536046515`*^9, 3.7125654580635796`*^9}, {
  3.7125681396043987`*^9, 3.7125681400106163`*^9}, {3.722171878061756*^9, 
  3.722171885089429*^9}, {3.7221722375381637`*^9, 3.7221722461420383`*^9}, {
  3.722172287732422*^9, 3.7221723039984903`*^9}, {3.7251084201316075`*^9, 
  3.725108425340967*^9}}],

Cell["\<\
This is the same as above but without the minimum requirement. Therefore, it \
will return the longest sequence for which there are no ambiguities.\
\>", "Text",
 CellChangeTimes->{{3.712565396244167*^9, 3.712565425935177*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"longestStrictConsensus", "[", 
   RowBox[{
   "termGappedAlign_", ",", "termGapCharacter_String", ",", 
    "minimumRequired_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "min", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"min", "=", "minimumRequired"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"minimumRequired", "\[LessEqual]", " ", "1"}], ",", " ", 
         RowBox[{
          RowBox[{"Print", "[", 
           RowBox[{
            RowBox[{"ToString", "[", "min", "]"}], "<>", 
            "\"\<is the min. Too low. Changing to 2.\>\""}], "]"}], ";", 
          RowBox[{"min", "=", "2"}], ";"}], ",", " ", 
         RowBox[{"Null", ";"}]}], " ", "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"makePolymorphismsAmbiguous", "[", 
          RowBox[{
           RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"#", ",", "termGapCharacter"}], "]"}], "//", 
                    "Length"}], ")"}], "<", "  ", "min"}], ",", 
                 RowBox[{"{", "\"\<N\>\"", "}"}], ",", " ", "#"}], "]"}], 
               ")"}], "//", "Union"}], ",", " ", "termGapCharacter"}], "]"}], 
           "//", "ToUpperCase"}], "]"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"a", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"StringPartition", "[", 
                RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
              "termGappedAlign"}], ")"}], "//", "Transpose"}], ")"}]}], 
         ")"}]}], ")"}], "//", "StringJoin"}]}]}], "\[IndentingNewLine]", 
   "]"}], " "}]], "Input",
 CellChangeTimes->{{3.71256493214318*^9, 3.7125649507399077`*^9}, {
  3.712565227482884*^9, 3.7125652464487867`*^9}, {3.7125652803785615`*^9, 
  3.71256532632862*^9}, {3.712565381592289*^9, 3.7125653930619063`*^9}, {
  3.7125654651017847`*^9, 3.7125654711673164`*^9}, {3.712568136078292*^9, 
  3.712568136797623*^9}, {3.7221716431639085`*^9, 3.722171689554408*^9}, {
  3.7221723064470053`*^9, 3.722172309148223*^9}, {3.722694161110976*^9, 
  3.722694170876932*^9}, {3.7226942161743755`*^9, 3.722694238925889*^9}, {
  3.7251083337714815`*^9, 3.7251083487559357`*^9}, {3.725108430564785*^9, 
  3.725108430674797*^9}, {3.725108880287373*^9, 3.7251089317707996`*^9}, {
  3.725108966965836*^9, 3.7251090614784565`*^9}}],

Cell["This is a small dependency script.", "Text",
 CellChangeTimes->{{3.7125648934754515`*^9, 3.712564898216707*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"makePolymorphismsAmbiguous", "[", "nucs_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "ns", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ns", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"nucs", ",", " ", "\"\<-\>\""}], "]"}], ",", " ", 
        "\"\<?\>\""}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"ns", "//", "Length"}], ")"}], "\[Equal]", "1"}], ",", 
       RowBox[{"ns", "[", 
        RowBox[{"[", "1", "]"}], "]"}], ",", "  ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"ns", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
       "\"\<?\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"nucs", "//", "Length"}], ")"}], "<", "1"}], ",", " ", 
       "\"\<ERROR: nucs object less than length 1\>\""}], 
      "\[IndentingNewLine]", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.712562330187994*^9, 3.7125625145125623`*^9}, {
  3.7125625451961327`*^9, 3.7125625558979793`*^9}, {3.712562620114935*^9, 
  3.712562662129139*^9}, {3.7125626936980915`*^9, 3.7125626958278913`*^9}, {
  3.7125627353379865`*^9, 3.7125628771990156`*^9}, {3.7125629229075375`*^9, 
  3.7125629284625254`*^9}, {3.712562972571983*^9, 3.712563004602146*^9}, {
  3.7125641690995917`*^9, 3.7125641784482856`*^9}, {3.7221716385423374`*^9, 
  3.722171638930708*^9}, {3.7226937952821097`*^9, 3.722693839872908*^9}, {
  3.722693948017702*^9, 3.7226940414613113`*^9}, {3.7226941034546947`*^9, 
  3.722694111377576*^9}, {3.722694245002149*^9, 3.722694258690781*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Making a consensus of duplicate sequences", "Subsection",
 CellChangeTimes->{{3.7221735907636147`*^9, 3.7221736015653276`*^9}}],

Cell[TextData[{
 "Specifically for when you have multiple sequences for the same thing \
(taxon?) but their sequences are different (different regions of the same \
locus?). This is best done using an alignment that has already been trimmed.\n\
\n",
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " = a fastaParsed object with potential duplicate sequences\n",
 StyleBox["headerGuide",
  FontWeight->"Bold"],
 " = an integer representing the position in the FASTA header you want to \
choose as the guide to make sure your comparing among the sequences you want \
to be comparing. \n",
 StyleBox["termGapCharacter ",
  FontWeight->"Bold"],
 " = a string indicating the character you are using as your terminal gap."
}], "Text",
 CellChangeTimes->{{3.7221702921641273`*^9, 3.722170398840558*^9}, {
  3.7221736084994993`*^9, 3.722173660026349*^9}, {3.725108170864324*^9, 
  3.7251081710589333`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"consenseDuplicates", "[", 
   RowBox[{
   "fastaParsed_", ",", " ", "headerGuide_", ",", " ", "terminalGapChar_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"poss", ",", " ", "gathered", ",", " ", "g2"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"poss", "=", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"#", ">", "1"}], ")"}], "&"}], "/@", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", "#", "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"gathered", "=", 
             RowBox[{"GatherBy", "[", 
              RowBox[{"fastaParsed", ",", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", " ", "headerGuide"}], "]"}], "]"}], 
                "&"}]}], "]"}]}], ")"}]}], ")"}]}], ",", " ", "True"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"g2", "=", "gathered"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"g2", "=", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{"g2", ",", 
          RowBox[{
           RowBox[{"poss", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "->", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"g2", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"poss", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], ",", " ", "1", ",", " ", 
                 "1", ",", " ", "1"}], "]"}], "]"}], ",", 
              RowBox[{"longestStrictConsensus", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{
                  RowBox[{"Extract", "[", 
                   RowBox[{"g2", ",", "poss"}], "]"}], "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
                "terminalGapChar", ",", "1"}], 
               RowBox[{"(*", 
                RowBox[{"minimum", " ", "requirement"}], "*)"}], "]"}]}], 
             "}"}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "poss", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Flatten", "[", 
      RowBox[{"g2", ",", " ", "1"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7221734487609763`*^9, 3.722173521752409*^9}, {
  3.722173738536134*^9, 3.722173741212276*^9}, {3.7251077475133677`*^9, 
  3.72510775200263*^9}, {3.725108156892516*^9, 3.725108156994371*^9}, {
  3.7251082653960896`*^9, 3.7251082921928186`*^9}, {3.7251086384170666`*^9, 
  3.7251086420996666`*^9}, {3.7251087156972127`*^9, 3.72510872038066*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Gap, unknown, and ambiguous characters", "Subchapter",
 CellChangeTimes->{{3.7230128311917315`*^9, 3.7230128384600306`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[CellGroupData[{

Cell["Changing terminal gaps to unknown in FASTA alignments", "Subsection",
 CellChangeTimes->{{3.712556675893835*^9, 3.7125566854822054`*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell["\<\
The code below takes a single string of nucleotides and replaces the defined \
gap character (e.g. \[OpenCurlyDoubleQuote]-\[OpenCurlyDoubleQuote]) with a \
new terminal character (e.g. \
\[OpenCurlyDoubleQuote]?\[OpenCurlyDoubleQuote]). This works for nucleotide \
data ONLY.\
\>", "Text",
 CellChangeTimes->{{3.712559390154036*^9, 3.712559404898529*^9}, {
  3.7125594417043176`*^9, 3.7125595070723534`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"terminalGapsToUnknown", "[", 
    RowBox[{
    "string_", ",", " ", "fromGapCharacter_String", ",", 
     "toGapCharacter_String"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"temp", " ", 
       RowBox[{"(*", 
        RowBox[{"replace", " ", "with", " ", "string"}], "*)"}], ",", "gaps", 
       ",", " ", "openGapLength", ",", "closingGapLength"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"temp", "=", "string"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"gaps", "=", 
           RowBox[{"StringSplit", "[", 
            RowBox[{"temp", ",", " ", 
             RowBox[{"Flatten", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                 "\"\<A\>\"", ",", "\"\<T\>\"", ",", "\"\<G\>\"", ",", 
                  "\"\<C\>\"", ",", "\"\<a\>\"", ",", "\"\<t\>\"", ",", 
                  "\"\<g\>\"", ",", "\"\<c\>\"", ",", " ", "\"\<N\>\"", ",", 
                  " ", "\"\<n\>\"", ",", " ", "\"\<U\>\"", ",", "\"\<R\>\"", 
                  ",", "\"\<Y\>\"", ",", "\"\<K\>\"", ",", "\"\<M\>\"", ",", 
                  "\"\<S\>\"", ",", "\"\<W\>\"", ",", "\"\<B\>\"", ",", 
                  "\"\<D\>\"", ",", "\"\<H\>\"", ",", "\"\<V\>\""}], "}"}], 
                ",", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<*\>\"", ",", "\"\<A\>\"", ",", "\"\<C\>\"", ",", 
                  "\"\<D\>\"", ",", "\"\<E\>\"", ",", "\"\<F\>\"", ",", 
                  "\"\<G\>\"", ",", "\"\<H\>\"", ",", "\"\<I\>\"", ",", 
                  "\"\<K\>\"", ",", "\"\<L\>\"", ",", "\"\<M\>\"", ",", 
                  "\"\<N\>\"", ",", "\"\<P\>\"", ",", "\"\<Q\>\"", ",", 
                  "\"\<R\>\"", ",", "\"\<S\>\"", ",", "\"\<T\>\"", ",", 
                  "\"\<V\>\"", ",", "\"\<W\>\"", ",", "\"\<Y\>\""}], "}"}]}], 
               "}"}], "]"}]}], "]"}]}], ")"}], ";", " ", 
         RowBox[{"gaps", "\[Equal]", 
          RowBox[{"{", "}"}]}]}], ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "endClosed", "]"}], ";"}], ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "lengthDefine", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "lengthDefine", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"openGapLength", "=", 
       RowBox[{
        RowBox[{"gaps", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "//", "StringLength"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"closingGapLength", "=", 
       RowBox[{
        RowBox[{"gaps", "[", 
         RowBox[{"[", 
          RowBox[{"Length", "[", "gaps", "]"}], "]"}], "]"}], "//", 
        "StringLength"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringStartsQ", "[", 
         RowBox[{"temp", ",", " ", "fromGapCharacter"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "beginningGaps", "]"}], ";"}], ",", 
        RowBox[{
         RowBox[{"Goto", "[", "beginningClosed", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "beginningGaps", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "\"\<Gaps in the beginning\>\"", "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"here", "..."}], "replace", " ", "the", " ", "openning", " ", 
        "gaps", " ", 
        RowBox[{
         RowBox[{"with", " ", "?"}], "'"}], "s"}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"temp", "=", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"temp", ",", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"StartOfString", "~~", 
            RowBox[{"fromGapCharacter", "..."}]}], " ", ")"}], " ", "\[Rule]",
           "  ", 
          RowBox[{"StringRepeat", "[", 
           RowBox[{"toGapCharacter", ",", " ", "openGapLength"}], "]"}]}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "beginningClosed", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"StringEndsQ", "[", 
         RowBox[{"temp", ",", " ", "fromGapCharacter"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "endGaps", "]"}], ";"}], ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "endClosed", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "endGaps", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "\"\<Gaps in the end\>\"", "]"}], ";"}], "*)"}],
       "\[IndentingNewLine]", 
      RowBox[{"temp", "=", 
       RowBox[{"StringTake", "[", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{"temp", ",", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"fromGapCharacter", "..."}], "~~", "EndOfString"}], 
             ")"}], " ", "\[Rule]", "  ", 
            RowBox[{"StringRepeat", "[", 
             RowBox[{"toGapCharacter", ",", " ", 
              RowBox[{
               RowBox[{"Round", "[", 
                RowBox[{
                 RowBox[{"closingGapLength", "+", "1"}], ",", " ", "2"}], 
                "]"}], "/", "2"}]}], 
             RowBox[{"(*", 
              RowBox[{
               RowBox[{"the", " ", "/", "2"}], " ", "is", " ", "because", " ",
                "it", " ", "is", " ", "repeating", " ", "sometimes", " ", 
               "and", " ", "I", " ", 
               RowBox[{"don", "'"}], "t", " ", "know", " ", 
               RowBox[{"why", ".", " ", "It"}], " ", "seems", " ", "to", " ", 
               "be", " ", "double", " ", "looping", " ", "this", " ", "part", 
               " ", "and", " ", "I", " ", 
               RowBox[{"don", "'"}], "t", " ", "really", " ", "understand", 
               " ", "why", " ", "it", " ", 
               RowBox[{"is", "."}]}], "*)"}], "]"}]}]}], "]"}], ",", " ", 
         RowBox[{"StringLength", "[", "string", "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "endClosed", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"Print", "[", "\"\<No gaps in the end\>\"", "]"}], ";"}], 
       "*)"}], "\[IndentingNewLine]", "temp"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"terminalGapsToUnknown", "[", 
   RowBox[{"string_", ",", " ", 
    RowBox[{"fromGapCharacter_String", "\[Rule]", "toGapCharacter_String"}]}],
    "]"}], ":=", 
  RowBox[{"terminalGapsToUnknown", "[", 
   RowBox[{
   "string", ",", " ", "fromGapCharacter", ",", " ", "toGapCharacter"}], 
   "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.7125575351226697`*^9, 3.712557850508935*^9}, {
   3.7125578848786373`*^9, 3.7125579293137016`*^9}, {3.7125579749844303`*^9, 
   3.7125579938910623`*^9}, {3.7125580812636485`*^9, 3.712558112660595*^9}, {
   3.7125581630749216`*^9, 3.712558188487687*^9}, {3.7125584482521734`*^9, 
   3.7125584885099134`*^9}, {3.7125585245650296`*^9, 3.71255861675972*^9}, {
   3.7125586726173477`*^9, 3.7125586921406536`*^9}, {3.7125587230237164`*^9, 
   3.712558766940838*^9}, {3.712558850282569*^9, 3.712558861536289*^9}, {
   3.7125589656297593`*^9, 3.712559012315019*^9}, {3.712559063804778*^9, 
   3.712559386606765*^9}, {3.7125594218464437`*^9, 3.712559436231578*^9}, 
   3.7125596570192213`*^9, {3.712559955119734*^9, 3.712559967651194*^9}, {
   3.71256006155161*^9, 3.7125600658441534`*^9}, {3.7125602637124796`*^9, 
   3.7125602859887886`*^9}, {3.712560353666462*^9, 3.7125603688818207`*^9}, {
   3.71256047257187*^9, 3.712560532603428*^9}, {3.712560700114114*^9, 
   3.712560740147967*^9}, {3.7125609698576684`*^9, 3.712560998443549*^9}, {
   3.7125614243385706`*^9, 3.7125614539167657`*^9}, {3.7125618886520767`*^9, 
   3.712561897772571*^9}, {3.7125619434902773`*^9, 3.712561943693384*^9}, {
   3.712561974629046*^9, 3.7125619921419535`*^9}, {3.722168542649733*^9, 
   3.722168560102133*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"terminalGapsFastaFix", "[", 
    RowBox[{
    "fasta_", ",", " ", "fromGapCharacter_String", ",", " ", 
     "toGapCharacter_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", 
         RowBox[{"terminalGapsToUnknown", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], ",", " ", "fromGapCharacter", ",",
            " ", "toGapCharacter"}], "]"}]}], "}"}], "&"}], "/@", "fasta"}]}],
     "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"terminalGapsFastaFix", "[", 
   RowBox[{"fasta_", ",", " ", 
    RowBox[{
    "fromGapCharacter_String", "\[Rule]", " ", "toGapCharacter_String"}]}], 
   "]"}], ":=", 
  RowBox[{"terminalGapsFastaFix", "[", 
   RowBox[{
   "fasta", ",", " ", "fromGapCharacter", ",", " ", "toGapCharacter"}], 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.7125596690505686`*^9, 3.7125597002331324`*^9}, {
   3.7125597410730934`*^9, 3.7125597936399994`*^9}, {3.712559925322258*^9, 
   3.7125599267615843`*^9}, {3.712560809322999*^9, 3.7125608147923937`*^9}, {
   3.712560939960059*^9, 3.7125609551725593`*^9}, 3.7125676510280533`*^9, 
   3.725107259901944*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Changing all gap characters in nucleotide alignments", "Subsection",
 CellChangeTimes->{{3.723012958604624*^9, 3.7230129736742225`*^9}},
 Background->RGBColor[0.87, 0.94, 1]],

Cell["\<\
This function will replace all the gap characters in your alignment with the \
specified character\
\>", "Text",
 CellChangeTimes->{{3.7230129763217983`*^9, 3.7230129926025324`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "SetDirectory", "[", 
    "\"\<F:\\\\Dropbox\\\\Projects\\\\Phylogeny of \
Blaberoidea\\\\Alignments\\\\orthographs + transcriptomes only targetted \
aligned and ends trimmed dec 2017\\\\alignments\>\"", "]"}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7239873966808605`*^9, 3.7239874024490895`*^9}, 
   3.7239874416895347`*^9}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"fn", "=", 
    RowBox[{"FileNames", "[", "]"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.723987408670375*^9, 3.723987439203021*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"changeAmbiguous", "[", 
     RowBox[{"#", ",", " ", "\"\<-\>\"", ",", " ", 
      RowBox[{"#", "//", "exportFileRename"}]}], "]"}], "&"}], "/@", "fn"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.723013387613*^9, 3.7230134375888386`*^9}, {
   3.72301346872532*^9, 3.723013476996854*^9}, {3.7230140573337736`*^9, 
   3.723014058287381*^9}, 3.723049089291481*^9, {3.723799571875827*^9, 
   3.7237995793826523`*^9}, 3.7237996931793995`*^9, {3.723894381225466*^9, 
   3.7238943825225887`*^9}, 3.723894793101093*^9, {3.723970571451945*^9, 
   3.723970572754967*^9}, 3.7239706697565155`*^9, {3.7239750109338512`*^9, 
   3.723975012069046*^9}, 3.7239762183883467`*^9, {3.723987404971935*^9, 
   3.723987427504403*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"changeAmbiguous", "[", 
   RowBox[{
   "fastaFile_String", ",", " ", "newCharacter_String", ",", " ", 
    "exportName_String"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fasta", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fasta", "=", 
      RowBox[{"fastaFile", "//", "importAlignment"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"exportName", ",", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", 
             RowBox[{"StringReplace", "[", 
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"\"\<-\>\"", "\[Rule]", "newCharacter"}], ",", " ", 
                 RowBox[{"\"\<N\>\"", "\[Rule]", "newCharacter"}], ",", " ", 
                 RowBox[{"\"\<?\>\"", "\[Rule]", " ", "newCharacter"}]}], 
                "}"}]}], "]"}]}], "}"}], "&"}], "/@", "fasta"}], ")"}], "//", 
        "fastaOutput"}], ",", " ", "\"\<Text\>\""}], "]"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7230130040845375`*^9, 3.7230131256871524`*^9}, {
  3.7230132003476725`*^9, 3.7230132188346834`*^9}, {3.723013260880267*^9, 
  3.7230133477880034`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SetDirectory", "[", 
  "\"\<F:\\\\Dropbox\\\\Projects\\\\Phylogeny of \
Blaberoidea\\\\Alignments\\\\orthographs + transcriptomes only targetted \
aligned and ends trimmed dec 2017\\\\Guid input remaining\>\"", 
  "]"}]], "Input",
 CellChangeTimes->{{3.7237995560144467`*^9, 3.7237995611137605`*^9}}],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{"SetDirectory", "::", "cdir"}], "MessageName"], 
  RowBox[{
  ":", " "}], "\<\"Cannot set current directory to \
\[NoBreak]\\!\\(\\*RowBox[{\\\"\\\\\\\"F:\\\\\\\\\\\\\\\\Dropbox\\\\\\\\\\\\\\\
\\Projects\\\\\\\\\\\\\\\\Phylogeny of \
Blaberoidea\\\\\\\\\\\\\\\\Alignments\\\\\\\\\\\\\\\\orthographs \
\\\\\\\"\\\", \\\"\[Ellipsis]\\\", \\\"\\\\\\\"only targetted aligned and \
ends trimmed dec 2017\\\\\\\\\\\\\\\\Guid input remaining\\\\\\\"\\\"}]\\)\
\[NoBreak]. \\!\\(\\*ButtonBox[\\\"\[RightSkeleton]\\\", \
ButtonStyle->\\\"Link\\\", ButtonFrame->None, \
ButtonData:>\\\"paclet:ref/message/General/cdir\\\", ButtonNote -> \
\\\"SetDirectory::cdir\\\"]\\)\"\>"}]], "Message", "MSG",
 CellChangeTimes->{3.723987331218157*^9, 3.7240068321401024`*^9, 
  3.7240770298568654`*^9, 3.7250047575573645`*^9, 3.7251040201348667`*^9, 
  3.7251076206003485`*^9, 3.7251084390580463`*^9, 3.7251089599671993`*^9, 
  3.7251107695638237`*^9, 3.7251791714095106`*^9, 3.72551531910225*^9, 
  3.7256081635063963`*^9}],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.7237995622434216`*^9, 3.7238735564880304`*^9, 
  3.7239480805625353`*^9, 3.7239722070923223`*^9, 3.7239742639751787`*^9, 
  3.72398733121966*^9, 3.7240068321426096`*^9, 3.7240770298593884`*^9, 
  3.7250047575573645`*^9, 3.7251040201348667`*^9, 3.7251076206003485`*^9, 
  3.7251084390580463`*^9, 3.7251089599671993`*^9, 3.7251107695794554`*^9, 
  3.7251791714095106`*^9, 3.72551531910225*^9, 3.7256081635063963`*^9}]
}, Open  ]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Padding alignments", "Subchapter",
 CellChangeTimes->{{3.7230128480580597`*^9, 3.723012855050251*^9}},
 Background->RGBColor[1, 0.9, 1]],

Cell[CellGroupData[{

Cell["Putting empty sequences into an alignment", "Subsection",
 CellChangeTimes->{{3.7129898449488316`*^9, 3.7129898506843967`*^9}}],

Cell[TextData[{
 "For some applications it is necessary to put empty sequences into an \
alignment. This is particularly important when you need taxon lists in \
alignments to always be the same or when you need to have comparable or \
mergable alignments. \n\nInput is...\n",
 StyleBox["inputAlignment",
  FontWeight->"Bold"],
 " - in a parsed FASTA format\n",
 StyleBox["tNameList",
  FontWeight->"Bold"],
 " - a simple list of all the taxon names you want to be added. They CAN be \
all the names, but they don\[CloseCurlyQuote]t HAVE TO be all the \
names...they just have to be the names you want to add. In other words, \
inputAlignment can contain names that tNameList doesn\[CloseCurlyQuote]t and \
it will work just fine.\n",
 StyleBox["blankCharacter",
  FontWeight->"Bold"],
 " - a string which is the character you want to make your empty sequences \
out of (e.g. \[OpenCurlyDoubleQuote]-\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]N\[CloseCurlyDoubleQuote], \[OpenCurlyDoubleQuote]?\
\[CloseCurlyDoubleQuote])\n",
 StyleBox["namePos",
  FontWeight->"Bold"],
 " - an integer which represents the position in the FASTA header where your \
taxon name resides.\n\nThe function will create an object \
\[OpenCurlyDoubleQuote]outputAlign\[CloseCurlyDoubleQuote] which is the \
output. But also it will output on it\[CloseCurlyQuote]s own as well."
}], "Text",
 CellChangeTimes->{{3.7129898529885283`*^9, 3.712989972120152*^9}, {
  3.7129929521255713`*^9, 3.712993116689647*^9}, {3.712993194194392*^9, 
  3.712993212830304*^9}, {3.7129932452100525`*^9, 3.7129932818563232`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"alignmentTaxonPadder", "[", 
    RowBox[{
    "inputAlignment_", ",", " ", "tNameList_", ",", " ", 
     "blankCharacter_String", ",", " ", "namePos_Integer"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "alignment", ",", " ", "nucLength", ",", "missingNames", ",", " ", 
       "blank", ",", "blankSeqs", ",", " ", "alignment2", ",", " ", "NL"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"alignment", "=", "inputAlignment"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"outputAlign", "=", "alignment"}], ";", "\[IndentingNewLine]", 
      RowBox[{"nucLength", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"NL", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"StringLength", "/@", 
               RowBox[{"alignment", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ")"}], "//", 
             "Union"}], ")"}]}], ";", " ", 
          RowBox[{
           RowBox[{"Length", "[", "NL", "]"}], ">", "1"}]}], ",", " ", 
         RowBox[{
         "Print", "[", 
          "\"\<ERROR: NUMBER OF NUCLEOTIDES IN ALIGNMENT ARE NOT EQUAL.\>\"", 
          "]"}], ",", " ", 
         RowBox[{"NL", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"missingNames", "=", 
       RowBox[{"Complement", "[", 
        RowBox[{"tNameList", ",", 
         RowBox[{"alignment", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1", ",", " ", "namePos"}], 
           RowBox[{"(*", 
            RowBox[{
            "position", " ", "in", " ", "FastaHeader", " ", "with", " ", 
             "name"}], "*)"}], "]"}], "]"}]}], " ", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"missingNames", "//", "Length"}], ")"}], "\[Equal]", "0"}], 
        ",", " ", 
        RowBox[{
         RowBox[{"Goto", "[", "\"\<skip\>\"", "]"}], ";"}], ",", " ", 
        RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"blank", "=", 
       RowBox[{"StringRepeat", "[", 
        RowBox[{"blankCharacter", ",", " ", "nucLength"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"blankSeqs", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "}"}], "//", "Flatten"}], ",", 
           " ", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
        RowBox[{"(", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"missingNames", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", " ", "blank"}], "}"}], ",",
            " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", 
             RowBox[{"Length", "[", "missingNames", "]"}]}], "}"}]}], "]"}], 
         ")"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"alignment2", "=", 
       RowBox[{"SortBy", "[", 
        RowBox[{
         RowBox[{"Flatten", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"alignment", ",", "blankSeqs"}], " ", "}"}], ",", " ", 
           "1"}], "]"}], ",", " ", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", " ", "1"}], " ", 
            RowBox[{"(*", 
             RowBox[{
              RowBox[{
               RowBox[{
               "position", " ", "in", " ", "fasta", " ", "header", " ", 
                "with", " ", "name"}], "..."}], "but", " ", "it", " ", "has", 
              " ", "to", " ", "be", " ", "1", " ", "here"}], "*)"}], "]"}], 
           "]"}], "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"outputAlign", "=", "alignment2"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<skip\>\"", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"output", "/", "export"}], "*)"}], "\[IndentingNewLine]", 
      "outputAlign"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.712991035120514*^9, 3.712991037202462*^9}, {
   3.7129911101481953`*^9, 3.7129912620709543`*^9}, {3.7129913411781034`*^9, 
   3.7129913480183206`*^9}, {3.712991547651147*^9, 3.712991655829928*^9}, {
   3.7129917056323752`*^9, 3.7129917150738416`*^9}, {3.7129917460941925`*^9, 
   3.7129923594275427`*^9}, {3.71299243632865*^9, 3.7129925800333643`*^9}, {
   3.712992613501342*^9, 3.7129929132676187`*^9}, {3.7129930750044003`*^9, 
   3.7129930805131316`*^9}, {3.7129931756285305`*^9, 3.712993191368822*^9}, {
   3.7129932317326765`*^9, 3.712993242783823*^9}, {3.7130068482696457`*^9, 
   3.7130068483385906`*^9}, 3.7130845361447687`*^9, {3.7251114901269255`*^9, 
   3.7251114902501354`*^9}}],

Cell[TextData[{
 "This version is the same as the above but with the option to add extra \
blocks to the fasta header of blank sequences.\n",
 StyleBox["entry",
  FontWeight->"Bold"],
 " - is the entry (row) you want to use the header info from. It needs to be \
an integer\n",
 StyleBox["block",
  FontWeight->"Bold"],
 " - is(are) the header block(s) you want to copy into the padded sequences. \
It can be a single block (e.g. 4) or a consecutive row of blocks (e.g. 2;;4) \
or the same block multiple times (e.g. {5, 5, 5, 5, 5})"
}], "Text",
 CellChangeTimes->{{3.7130071007066946`*^9, 3.7130071488448396`*^9}, {
  3.7130076945520678`*^9, 3.7130078326250505`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"alignmentTaxonPadder", "[", 
   RowBox[{
   "inputAlignment_", ",", " ", "tNameList_", ",", " ", 
    "blankCharacter_String", ",", " ", "namePos_Integer", ",", " ", 
    RowBox[{"{", 
     RowBox[{"entry_Integer", ",", " ", "block_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "alignment", ",", " ", "nucLength", ",", "missingNames", ",", " ", 
      "blank", ",", "blankSeqs", ",", " ", "alignment2", ",", " ", "NL", ",", 
      "mHeaderLength", ",", " ", "remainingHeader"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"alignment", "=", "inputAlignment"}], ";", "\[IndentingNewLine]", 
     RowBox[{"outputAlign", "=", "alignment"}], ";", "\[IndentingNewLine]", 
     RowBox[{"nucLength", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"NL", "=", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"StringLength", "/@", 
              RowBox[{"alignment", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ")"}], "//", 
            "Union"}], ")"}]}], ";", " ", 
         RowBox[{
          RowBox[{"Length", "[", "NL", "]"}], ">", "1"}]}], ",", " ", 
        RowBox[{
        "Print", "[", 
         "\"\<ERROR: NUMBER OF NUCLEOTIDES IN ALIGNMENT ARE NOT EQUAL.\>\"", 
         "]"}], ",", " ", 
        RowBox[{"NL", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"mHeaderLength", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"alignment", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"remainingHeader", "=", 
      RowBox[{
       RowBox[{"alignment", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"entry", ",", " ", "block"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"missingNames", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{"tNameList", ",", 
        RowBox[{"alignment", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1", ",", " ", "namePos"}], 
          RowBox[{"(*", 
           RowBox[{
           "position", " ", "in", " ", "FastaHeader", " ", "with", " ", 
            "name"}], "*)"}], "]"}], "]"}]}], " ", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"missingNames", "//", "Length"}], ")"}], "\[Equal]", "0"}], 
       ",", " ", 
       RowBox[{
        RowBox[{"Goto", "[", "\"\<skip\>\"", "]"}], ";"}], ",", " ", 
       RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"blank", "=", 
      RowBox[{"StringRepeat", "[", 
       RowBox[{"blankCharacter", ",", " ", "nucLength"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"blankSeqs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "remainingHeader"}], "}"}],
            "//", "Flatten"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"missingNames", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "blank"}], "}"}], ",", 
          " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", 
            RowBox[{"Length", "[", "missingNames", "]"}]}], "}"}]}], "]"}], 
        ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"alignment2", "=", 
      RowBox[{"SortBy", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"alignment", ",", "blankSeqs"}], " ", "}"}], ",", " ", 
          "1"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "1"}], " ", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{
              RowBox[{
              "position", " ", "in", " ", "fasta", " ", "header", " ", "with",
                " ", "name"}], "..."}], "but", " ", "it", " ", "has", " ", 
             "to", " ", "be", " ", "1", " ", "here"}], "*)"}], "]"}], "]"}], 
         "&"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"outputAlign", "=", "alignment2"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<skip\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"output", "/", "export"}], "*)"}], "\[IndentingNewLine]", 
     "outputAlign"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.712991035120514*^9, 3.712991037202462*^9}, {
   3.7129911101481953`*^9, 3.7129912620709543`*^9}, {3.7129913411781034`*^9, 
   3.7129913480183206`*^9}, {3.712991547651147*^9, 3.712991655829928*^9}, {
   3.7129917056323752`*^9, 3.7129917150738416`*^9}, {3.7129917460941925`*^9, 
   3.7129923594275427`*^9}, {3.71299243632865*^9, 3.7129925800333643`*^9}, {
   3.712992613501342*^9, 3.7129929132676187`*^9}, {3.7129930750044003`*^9, 
   3.7129930805131316`*^9}, {3.7129931756285305`*^9, 3.712993191368822*^9}, {
   3.7129932317326765`*^9, 3.712993242783823*^9}, {3.7130068482696457`*^9, 
   3.7130068483385906`*^9}, {3.7130071521273074`*^9, 
   3.7130071589694242`*^9}, {3.713007195772922*^9, 3.713007201981326*^9}, {
   3.7130072483027973`*^9, 3.7130073135025463`*^9}, {3.7130074771200514`*^9, 
   3.713007562970276*^9}, {3.713007609438219*^9, 3.713007624262705*^9}, {
   3.71300772529764*^9, 3.7130077265790267`*^9}, 3.7130845288914185`*^9, 
   3.7136107235056105`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Concatenation and partitioning functions", "Subchapter",
 CellChangeTimes->{{3.7230128598508067`*^9, 3.723012885938563*^9}},
 Background->RGBColor[1, 0.9, 0.8]],

Cell[CellGroupData[{

Cell["Calculating stats and partitions for mutliple alignments", "Subsection",
 CellChangeTimes->{{3.713075308781165*^9, 3.7130753349474244`*^9}}],

Cell[TextData[{
 "This function will generate a RAXML style partition file and a text \
document giving the total information of multiple alignments.\n\n",
 StyleBox["listOfParsedAlign - ",
  FontWeight->"Bold"],
 "is a fastaParsed list of fasta alignments.\n",
 StyleBox["locusName - ",
  FontWeight->"Bold"],
 "is an integer indicating the position in the header where the locus name \
resides\n",
 StyleBox["datatype - ",
  FontWeight->"Bold"],
 "is a string indicating what type of data is in the file. This will be \
printed out in the RAXML file.\n\t\tPossible options are:\n\t\t\t\
\[OpenCurlyDoubleQuote]DNALoci\[CloseCurlyDoubleQuote] - this will output a \
RAXML style block with specifications for each locus, no codon positions\n\t\t\
\t\[OpenCurlyDoubleQuote]DNAcodons\[CloseCurlyDoubleQuote] - this will output \
a RAXML style block with specifications for each locus by codon position, \
assuming that the alignments are in reading frame (first positions = 1st \
codon, with no frame shifts throughout)."
}], "Text",
 CellChangeTimes->{{3.7130733706704807`*^9, 3.713073395900798*^9}, {
  3.713075337714077*^9, 3.7130754174880877`*^9}, {3.7255162878591576`*^9, 
  3.7255163752943506`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"alignmentRandR2", "[", 
    RowBox[{
    "listOfParsedAlign_", ",", " ", "locusName_Integer", ",", " ", 
     "dataType_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "alignment", ",", " ", "startingPos", ",", " ", "lName", ",", " ", 
       "locusLength", ",", " ", "ll", ",", " ", "str", ",", " ", "endingpos", 
       ",", " ", "a", ",", " ", "b", ",", " ", "bb", ",", " ", "c"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<beginning RAXML partition file generation...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"startingPos", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"RAXMLPart", "=", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"lName", "=", 
            RowBox[{
             RowBox[{"listOfParsedAlign", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", " ", "All", ",", " ", "1", ",", 
                RowBox[{"(*", "PROBLEM", "*)"}], " ", "locusName"}], "]"}], 
              "]"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"lName", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
              "Print", "[", 
               "\"\<ERROR: FASTA CONSISTS OF >1 LOCUS NAME. IS THIS AN \
ALIGNMENT FILE?\nCHECK THE LOCUS NAME POSITION IN THE FASTA FILE\>\"", "]"}], 
              ";", 
              RowBox[{"Goto", "[", 
               RowBox[{"\"\<thow\>\"", ";"}], "]"}], ";"}], ",", " ", 
             RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"locusLength", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ll", "=", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"StringLength", "/@", 
                  RowBox[{"listOfParsedAlign", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", " ", "All", ",", " ", "2"}], "]"}], 
                   "]"}]}], ")"}], "//", "Union"}]}], ")"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ll", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
              "Print", "[", 
               "\"\<ERROR: SEQUENCE lengths are not equal. IS THIS AN \
ALIGNMENT FILE?\nCHECK FOR FORMATTING ERRORS\>\"", "]"}], ";", 
              RowBox[{"Goto", "[", 
               RowBox[{"\"\<thow\>\"", ";"}], "]"}], ";"}], ",", " ", 
             RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"Switch", "[", 
            RowBox[{"dataType", ",", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "if", " ", "the", " ", "data", " ", "type", " ", "are", " ", 
               "just", " ", "nucleotide", " ", "loci"}], "*)"}], 
             "\"\<DNALoci\>\"", ",", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"str", "=", 
               RowBox[{"StringJoin", "[", 
                RowBox[{
                 RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
                 RowBox[{"lName", "<>", "\"\<=\>\"", "<>", 
                  RowBox[{"ToString", "[", "startingPos", "]"}], "<>", 
                  "\"\<-\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"endingpos", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                    "startingPos"}], ")"}]}], "]"}], "<>", "\"\<\n\>\""}]}], 
                "]"}]}], ";"}], ",", " ", "\[IndentingNewLine]", 
             RowBox[{"(*", 
              RowBox[{
              "if", " ", "the", " ", "data", " ", "type", " ", "are", " ", 
               "codons"}], "*)"}], "\"\<DNACodon\>\"", ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"str", "=", 
               RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
                RowBox[{"(*", "codon1", "*)"}], 
                RowBox[{
                 RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
                 RowBox[{"lName", "<>", "\"\<_c1=\>\"", "<>", 
                  RowBox[{"ToString", "[", "startingPos", "]"}], "<>", 
                  "\"\<-\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"endingpos", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                    "startingPos"}], ")"}]}], "]"}], "<>", 
                  "\"\<\\\\3;\n\>\""}], ",", 
                 RowBox[{"(*", 
                  RowBox[{"codon", " ", "2"}], "*)"}], " ", 
                 RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
                 RowBox[{"lName", "<>", "\"\<_c2=\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"startingPos", "+", "1"}], "]"}], "<>", 
                  "\"\<-\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"endingpos", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                    "startingPos"}], ")"}]}], "]"}], "<>", 
                  "\"\<\\\\3;\n\>\""}], ",", " ", 
                 RowBox[{"(*", 
                  RowBox[{"codon", " ", "3"}], "*)"}], 
                 RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
                 RowBox[{"lName", "<>", "\"\<_c3=\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"startingPos", "+", "2"}], "]"}], "<>", 
                  "\"\<-\>\"", "<>", 
                  RowBox[{"ToString", "[", 
                   RowBox[{"endingpos", "=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                    "startingPos"}], ")"}]}], "]"}], "<>", 
                  "\"\<\\\\3;\n\>\""}]}], "]"}]}], ";"}]}], 
            "\[IndentingNewLine]", "]"}], ";", 
           RowBox[{"(*", 
            RowBox[{"end", " ", "switch"}], "*)"}], "\[IndentingNewLine]", 
           RowBox[{"startingPos", "=", 
            RowBox[{"locusLength", "+", "startingPos"}]}], ";", 
           "\[IndentingNewLine]", "str"}], "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", 
            RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], "}"}]}], 
         "]"}], "//", "StringJoin"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<throw\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"ALIGNMENT", " ", "STATISTICS", " ", "FILE"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", "\"\<calculating basic alignment statistics...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alignStat", "=", 
       RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<There are \>\"", ",", " ", 
         RowBox[{"ToString", "[", "endingpos", "]"}], ",", " ", 
         "\"\< nucleotides in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\nThere are \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Length", "[", "listOfParsedAlign", "]"}], " ", "]"}], ",", 
         " ", "\"\< loci in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\n\nAvg. locus length is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"endingpos", "/", 
             RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], ")"}], "//",
            "N"}], " ", "]"}], ",", "\"\<.\>\"", ",", "\[IndentingNewLine]", 
         "\"\<\n\nThe number of missing (?, -, or N) characters is \>\"", ",",
          " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"bb", "=", 
           RowBox[{"StringCount", "[", 
            RowBox[{
             RowBox[{"b", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], 
                 "]"}], "//", "StringJoin"}], ")"}]}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<?\>\"", ",", " ", "\"\<-\>\"", ",", " ", "\"\<N\>\""}], 
              "}"}]}], " ", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         "\"\< out of \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", "=", 
           RowBox[{"(", 
            RowBox[{"StringLength", "[", 
             RowBox[{
              RowBox[{"listOfParsedAlign", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], "]"}],
               "//", "StringJoin"}], " ", "]"}], ")"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\< or \>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"bb", "/", "a"}], ")"}], "//", "N"}], ")"}], "*", 
           "100"}], "]"}], ",", " ", "\"\< %.\>\"", ",", " ", 
         "\[IndentingNewLine]", 
         "\"\<\nThe total number of missing data blocks (taxa missing all \
it's data from a given locus) is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"StringLength", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"StringTrim", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"\"\<N\>\"", "|", "\"\<?\>\"", "|", "\"\<-\>\""}],
                     ")"}], "..."}]}], "]"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"listOfParsedAlign", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "All", ",", " ", "2"}], "]"}], "]"}], 
                 "]"}], ")"}]}], ")"}]}], ",", " ", "0"}], "]"}], "]"}], ",", 
         " ", "\"\< out of \>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"(*", 
           RowBox[{
           "#", " ", "of", " ", "RAXML", " ", "parititions", " ", "times", 
            " ", "number", " ", "of", " ", "taxa"}], "*)"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringCount", "[", 
               RowBox[{"RAXMLPart", ",", " ", "\"\<=\>\""}], "]"}], "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "All"}], "]"}], "]"}], "//", "Length"}], 
               ")"}]}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{
                  "All", ",", " ", "All", ",", " ", "1", ",", " ", "1"}], 
                  "]"}], "]"}], "//", "Union"}], "//", "Flatten"}], "//", 
              "Length"}], ")"}]}], ")"}], "]"}], ",", 
         "\"\< total. \n\nGREAT JOB! You rock!\>\""}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<RAXMLpart.txt\>\"", ",", " ", "RAXMLPart"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<alignmentStats.txt\>\"", ",", " ", "alignStat"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<\n...\nDone.\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.712999227195413*^9, 3.7129994155659666`*^9}, {
   3.7129994551150846`*^9, 3.71299948123287*^9}, {3.712999569924389*^9, 
   3.7129996698800325`*^9}, {3.7129997162032347`*^9, 3.71299973243548*^9}, {
   3.7129997845840406`*^9, 3.712999790333276*^9}, {3.7129999710020943`*^9, 
   3.7130001211624627`*^9}, {3.713000181222314*^9, 3.7130002778276634`*^9}, {
   3.71300031936034*^9, 3.7130003233053727`*^9}, {3.7130004722398543`*^9, 
   3.7130004930598564`*^9}, {3.7130005747049255`*^9, 
   3.7130006257381535`*^9}, {3.7130006854943323`*^9, 
   3.7130007738476686`*^9}, {3.7130008141451707`*^9, 3.713000903745262*^9}, {
   3.713001053783224*^9, 3.713001097089858*^9}, {3.7130011845799665`*^9, 
   3.713001436666582*^9}, {3.71300150465979*^9, 3.713001507143193*^9}, {
   3.7130015448966894`*^9, 3.7130018174527493`*^9}, {3.713001866212515*^9, 
   3.7130018871460447`*^9}, {3.7130019345015497`*^9, 
   3.7130019392233562`*^9}, {3.713001988883997*^9, 3.7130020045802865`*^9}, {
   3.7130020736644325`*^9, 3.713002122301342*^9}, {3.713002215163065*^9, 
   3.7130022385436954`*^9}, {3.713002780549679*^9, 3.7130029143228006`*^9}, {
   3.7130029456737127`*^9, 3.7130029460751314`*^9}, 3.7130029986705513`*^9, {
   3.713003845361868*^9, 3.713003925016458*^9}, {3.7130053349105225`*^9, 
   3.7130053362075615`*^9}, {3.713006737248191*^9, 3.7130068008153105`*^9}, {
   3.7130082986329327`*^9, 3.7130083168312364`*^9}, {3.7130742895304303`*^9, 
   3.7130743312002506`*^9}, {3.713074451551178*^9, 3.713074455839665*^9}, 
   3.7130748456635027`*^9, {3.713084647468552*^9, 3.713084647531878*^9}, {
   3.713522187515457*^9, 3.713522203038528*^9}, {3.713522247906955*^9, 
   3.71352227900834*^9}, {3.7135225325372486`*^9, 3.713522584974641*^9}, {
   3.713522625177586*^9, 3.713522647399002*^9}, {3.725467392371729*^9, 
   3.725467393465564*^9}, {3.725514809014086*^9, 3.7255148150301385`*^9}, {
   3.725515751930728*^9, 3.7255157541075*^9}, {3.725515969811652*^9, 
   3.725515991932928*^9}, {3.7255160731638255`*^9, 3.7255160848589716`*^9}}],

Cell[CellGroupData[{

Cell["Old versions", "Subsubsection",
 CellChangeTimes->{{3.725516194311275*^9, 3.7255161958140354`*^9}}],

Cell["\<\
These are the original versions of the R&R function. It differs in that it \
does not specify codon positions.\
\>", "Text",
 CellChangeTimes->{{3.7255162252368994`*^9, 3.7255162514901714`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"alignmentRandR", "[", 
    RowBox[{
    "listOfParsedAlign_", ",", " ", "locusName_Integer", ",", " ", 
     "dataType_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "alignment", ",", " ", "startingPos", ",", " ", "lName", ",", " ", 
       "locusLength", ",", " ", "ll", ",", " ", "str", ",", " ", "endingpos", 
       ",", " ", "a", ",", " ", "b", ",", " ", "bb", ",", " ", "c"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<beginning RAXML partition file generation...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"startingPos", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"RAXMLPart", "=", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"lName", "=", 
            RowBox[{
             RowBox[{"listOfParsedAlign", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", " ", "All", ",", " ", "1", ",", 
                RowBox[{"(*", "PROBLEM", "*)"}], " ", "locusName"}], "]"}], 
              "]"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"lName", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
              "Print", "[", 
               "\"\<ERROR: FASTA CONSISTS OF >1 LOCUS NAME. IS THIS AN \
ALIGNMENT FILE?\nCHECK THE LOCUS NAME POSITION IN THE FASTA FILE\>\"", "]"}], 
              ";", 
              RowBox[{"Goto", "[", 
               RowBox[{"\"\<thow\>\"", ";"}], "]"}], ";"}], ",", " ", 
             RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"locusLength", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ll", "=", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"StringLength", "/@", 
                  RowBox[{"listOfParsedAlign", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", " ", "All", ",", " ", "2"}], "]"}], 
                   "]"}]}], ")"}], "//", "Union"}]}], ")"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ll", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
              "Print", "[", 
               "\"\<ERROR: SEQUENCE lengths are not equal. IS THIS AN \
ALIGNMENT FILE?\nCHECK FOR FORMATTING ERRORS\>\"", "]"}], ";", 
              RowBox[{"Goto", "[", 
               RowBox[{"\"\<thow\>\"", ";"}], "]"}], ";"}], ",", " ", 
             RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"str", "=", 
            RowBox[{"StringJoin", "[", 
             RowBox[{
              RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
              RowBox[{
               RowBox[{"ToString", "[", 
                RowBox[{"lName", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "]"}], "<>", "\"\<=\>\"", "<>", 
               RowBox[{"ToString", "[", "startingPos", "]"}], "<>", 
               "\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"endingpos", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                   "startingPos"}], ")"}]}], "]"}], "<>", "\"\<\n\>\""}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"startingPos", "=", 
            RowBox[{"locusLength", "+", "startingPos"}]}], ";", 
           "\[IndentingNewLine]", "str"}], "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", 
            RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], "}"}]}], 
         "]"}], "//", "StringJoin"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<throw\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"ALIGNMENT", " ", "STATISTICS", " ", "FILE"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", "\"\<calculating basic alignment statistics...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alignStat", "=", 
       RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<There are \>\"", ",", " ", 
         RowBox[{"ToString", "[", "endingpos", "]"}], ",", " ", 
         "\"\< nucleotides in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\nThere are \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Length", "[", "listOfParsedAlign", "]"}], " ", "]"}], ",", 
         " ", "\"\< loci in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\n\nAvg. locus length is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"endingpos", "/", 
             RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], ")"}], "//",
            "N"}], " ", "]"}], ",", "\"\<.\>\"", ",", "\[IndentingNewLine]", 
         "\"\<\n\nThe number of missing (?, -, or N) characters is \>\"", ",",
          " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"bb", "=", 
           RowBox[{"StringCount", "[", 
            RowBox[{
             RowBox[{"b", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], 
                 "]"}], "//", "StringJoin"}], ")"}]}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<?\>\"", ",", " ", "\"\<-\>\"", ",", " ", "\"\<N\>\""}], 
              "}"}]}], " ", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         "\"\< out of \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", "=", 
           RowBox[{"(", 
            RowBox[{"StringLength", "[", 
             RowBox[{
              RowBox[{"listOfParsedAlign", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], "]"}],
               "//", "StringJoin"}], " ", "]"}], ")"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\< or \>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"bb", "/", "a"}], ")"}], "//", "N"}], ")"}], "*", 
           "100"}], "]"}], ",", " ", "\"\< %.\>\"", ",", " ", 
         "\[IndentingNewLine]", 
         "\"\<\nThe total number of missing data blocks (taxa missing all \
it's data from a given locus) is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"StringLength", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"StringTrim", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"\"\<N\>\"", "|", "\"\<?\>\"", "|", "\"\<-\>\""}],
                     ")"}], "..."}]}], "]"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"listOfParsedAlign", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "All", ",", " ", "2"}], "]"}], "]"}], 
                 "]"}], ")"}]}], ")"}]}], ",", " ", "0"}], "]"}], "]"}], ",", 
         " ", "\"\< out of \>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"(*", 
           RowBox[{
           "#", " ", "of", " ", "RAXML", " ", "parititions", " ", "times", 
            " ", "number", " ", "of", " ", "taxa"}], "*)"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringCount", "[", 
               RowBox[{"RAXMLPart", ",", " ", "\"\<=\>\""}], "]"}], "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "All"}], "]"}], "]"}], "//", "Length"}], 
               ")"}]}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{
                  "All", ",", " ", "All", ",", " ", "1", ",", " ", "1"}], 
                  "]"}], "]"}], "//", "Union"}], "//", "Flatten"}], "//", 
              "Length"}], ")"}]}], ")"}], "]"}], ",", 
         "\"\< total. \n\nGREAT JOB! You rock!\>\""}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<RAXMLpart.txt\>\"", ",", " ", "RAXMLPart"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<alignmentStats.txt\>\"", ",", " ", "alignStat"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<\n...\nDone.\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.712999227195413*^9, 3.7129994155659666`*^9}, {
   3.7129994551150846`*^9, 3.71299948123287*^9}, {3.712999569924389*^9, 
   3.7129996698800325`*^9}, {3.7129997162032347`*^9, 3.71299973243548*^9}, {
   3.7129997845840406`*^9, 3.712999790333276*^9}, {3.7129999710020943`*^9, 
   3.7130001211624627`*^9}, {3.713000181222314*^9, 3.7130002778276634`*^9}, {
   3.71300031936034*^9, 3.7130003233053727`*^9}, {3.7130004722398543`*^9, 
   3.7130004930598564`*^9}, {3.7130005747049255`*^9, 
   3.7130006257381535`*^9}, {3.7130006854943323`*^9, 
   3.7130007738476686`*^9}, {3.7130008141451707`*^9, 3.713000903745262*^9}, {
   3.713001053783224*^9, 3.713001097089858*^9}, {3.7130011845799665`*^9, 
   3.713001436666582*^9}, {3.71300150465979*^9, 3.713001507143193*^9}, {
   3.7130015448966894`*^9, 3.7130018174527493`*^9}, {3.713001866212515*^9, 
   3.7130018871460447`*^9}, {3.7130019345015497`*^9, 
   3.7130019392233562`*^9}, {3.713001988883997*^9, 3.7130020045802865`*^9}, {
   3.7130020736644325`*^9, 3.713002122301342*^9}, {3.713002215163065*^9, 
   3.7130022385436954`*^9}, {3.713002780549679*^9, 3.7130029143228006`*^9}, {
   3.7130029456737127`*^9, 3.7130029460751314`*^9}, 3.7130029986705513`*^9, {
   3.713003845361868*^9, 3.713003925016458*^9}, {3.7130053349105225`*^9, 
   3.7130053362075615`*^9}, {3.713006737248191*^9, 3.7130068008153105`*^9}, {
   3.7130082986329327`*^9, 3.7130083168312364`*^9}, {3.7130742895304303`*^9, 
   3.7130743312002506`*^9}, {3.713074451551178*^9, 3.713074455839665*^9}, 
   3.7130748456635027`*^9, {3.713084647468552*^9, 3.713084647531878*^9}, {
   3.713522187515457*^9, 3.713522203038528*^9}, {3.713522247906955*^9, 
   3.71352227900834*^9}, {3.7135225325372486`*^9, 3.713522584974641*^9}, {
   3.713522625177586*^9, 3.713522647399002*^9}, {3.725467392371729*^9, 
   3.725467393465564*^9}, {3.725514809014086*^9, 3.7255148150301385`*^9}, {
   3.725515751930728*^9, 3.7255157541075*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"alignmentRandR", "[", 
    RowBox[{
    "listOfParsedAlign_", ",", " ", "locusName_String", ",", " ", 
     "dataType_String"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "alignment", ",", " ", "startingPos", ",", " ", "lName", ",", " ", 
       "locusLength", ",", " ", "ll", ",", " ", "str", ",", " ", "endingpos", 
       ",", " ", "a", ",", " ", "b", ",", " ", "bb", ",", " ", "c"}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "Print", "[", "\"\<beginning RAXML partition file generation...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"startingPos", "=", "1"}], ";", "\[IndentingNewLine]", 
      RowBox[{"RAXMLPart", "=", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"lName", "=", " ", "locusName"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"locusLength", "=", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"ll", "=", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"StringLength", "/@", 
                  RowBox[{"listOfParsedAlign", "[", 
                   RowBox[{"[", 
                    RowBox[{"i", ",", " ", "All", ",", " ", "2"}], "]"}], 
                   "]"}]}], ")"}], "//", "Union"}]}], ")"}], "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"ll", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
             RowBox[{
              RowBox[{
              "Print", "[", 
               "\"\<ERROR: SEQUENCE lengths are not equal. IS THIS AN \
ALIGNMENT FILE?\nCHECK FOR FORMATTING ERRORS\>\"", "]"}], ";", 
              RowBox[{"Goto", "[", 
               RowBox[{"\"\<thow\>\"", ";"}], "]"}], ";"}], ",", " ", 
             RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
           "\[IndentingNewLine]", 
           RowBox[{"str", "=", 
            RowBox[{"StringJoin", "[", 
             RowBox[{
              RowBox[{"dataType", "<>", "\"\<, \>\""}], ",", " ", 
              RowBox[{"lName", "<>", "\"\<=\>\"", "<>", 
               RowBox[{"ToString", "[", "startingPos", "]"}], "<>", 
               "\"\<-\>\"", "<>", 
               RowBox[{"ToString", "[", 
                RowBox[{"endingpos", "=", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"locusLength", "-", "1"}], ")"}], "+", 
                   "startingPos"}], ")"}]}], "]"}], "<>", "\"\<\n\>\""}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"startingPos", "=", 
            RowBox[{"locusLength", "+", "startingPos"}]}], ";", 
           "\[IndentingNewLine]", "str"}], "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", 
           RowBox[{"i", ",", " ", "1", ",", " ", 
            RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], "}"}]}], 
         "]"}], "//", "StringJoin"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<throw\>\"", "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"ALIGNMENT", " ", "STATISTICS", " ", "FILE"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
      "Print", "[", "\"\<calculating basic alignment statistics...\>\"", 
       "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"alignStat", "=", 
       RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
        RowBox[{"\"\<There are \>\"", ",", " ", 
         RowBox[{"ToString", "[", "endingpos", "]"}], ",", " ", 
         "\"\< nucleotides in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\nThere are \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Length", "[", "listOfParsedAlign", "]"}], " ", "]"}], ",", 
         " ", "\"\< loci in this alignment.\>\"", ",", " ", 
         "\[IndentingNewLine]", "\"\<\n\nAvg. locus length is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"endingpos", "/", 
             RowBox[{"Length", "[", "listOfParsedAlign", "]"}]}], ")"}], "//",
            "N"}], " ", "]"}], ",", "\"\<.\>\"", ",", "\[IndentingNewLine]", 
         "\"\<\n\nThe number of missing (?, -, or N) characters is \>\"", ",",
          " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"bb", "=", 
           RowBox[{"StringCount", "[", 
            RowBox[{
             RowBox[{"b", "=", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], 
                 "]"}], "//", "StringJoin"}], ")"}]}], ",", 
             RowBox[{"{", 
              RowBox[{
              "\"\<?\>\"", ",", " ", "\"\<-\>\"", ",", " ", "\"\<N\>\""}], 
              "}"}]}], " ", "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
         "\"\< out of \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"a", "=", 
           RowBox[{"(", 
            RowBox[{"StringLength", "[", 
             RowBox[{
              RowBox[{"listOfParsedAlign", "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], "]"}],
               "//", "StringJoin"}], " ", "]"}], ")"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "\"\< or \>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"ToString", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"bb", "/", "a"}], ")"}], "//", "N"}], ")"}], "*", 
           "100"}], "]"}], ",", " ", "\"\< %.\>\"", ",", " ", 
         "\[IndentingNewLine]", 
         "\"\<\nThe total number of missing data blocks (taxa missing all \
it's data from a given locus) is \>\"", ",", " ", 
         RowBox[{"ToString", "[", 
          RowBox[{"Count", "[", 
           RowBox[{
            RowBox[{"StringLength", "/@", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"StringTrim", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"\"\<N\>\"", "|", "\"\<?\>\"", "|", "\"\<-\>\""}],
                     ")"}], "..."}]}], "]"}], "&"}], "/@", 
               RowBox[{"(", 
                RowBox[{"Flatten", "[", 
                 RowBox[{"listOfParsedAlign", "[", 
                  RowBox[{"[", 
                   RowBox[{"All", ",", "All", ",", " ", "2"}], "]"}], "]"}], 
                 "]"}], ")"}]}], ")"}]}], ",", " ", "0"}], "]"}], "]"}], ",", 
         " ", "\"\< out of \>\"", ",", 
         RowBox[{"ToString", "[", 
          RowBox[{"(*", 
           RowBox[{
           "#", " ", "of", " ", "RAXML", " ", "parititions", " ", "times", 
            " ", "number", " ", "of", " ", "taxa"}], "*)"}], 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"StringCount", "[", 
               RowBox[{"RAXMLPart", ",", " ", "\"\<=\>\""}], "]"}], "*", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", "All"}], "]"}], "]"}], "//", "Length"}], 
               ")"}]}], ")"}], "*", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"listOfParsedAlign", "[", 
                 RowBox[{"[", 
                  RowBox[{
                  "All", ",", " ", "All", ",", " ", "1", ",", " ", "1"}], 
                  "]"}], "]"}], "//", "Union"}], "//", "Flatten"}], "//", 
              "Length"}], ")"}]}], ")"}], "]"}], ",", 
         "\"\< total. \n\nGREAT JOB! You rock!\>\""}], "\[IndentingNewLine]", 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<RAXMLpart.txt\>\"", ",", " ", "RAXMLPart"}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{"\"\<alignmentStats.txt\>\"", ",", " ", "alignStat"}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<\n...\nDone.\>\"", "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.712999227195413*^9, 3.7129994155659666`*^9}, {
   3.7129994551150846`*^9, 3.71299948123287*^9}, {3.712999569924389*^9, 
   3.7129996698800325`*^9}, {3.7129997162032347`*^9, 3.71299973243548*^9}, {
   3.7129997845840406`*^9, 3.712999790333276*^9}, {3.7129999710020943`*^9, 
   3.7130001211624627`*^9}, {3.713000181222314*^9, 3.7130002778276634`*^9}, {
   3.71300031936034*^9, 3.7130003233053727`*^9}, {3.7130004722398543`*^9, 
   3.7130004930598564`*^9}, {3.7130005747049255`*^9, 
   3.7130006257381535`*^9}, {3.7130006854943323`*^9, 
   3.7130007738476686`*^9}, {3.7130008141451707`*^9, 3.713000903745262*^9}, {
   3.713001053783224*^9, 3.713001097089858*^9}, {3.7130011845799665`*^9, 
   3.713001436666582*^9}, {3.71300150465979*^9, 3.713001507143193*^9}, {
   3.7130015448966894`*^9, 3.7130018174527493`*^9}, {3.713001866212515*^9, 
   3.7130018871460447`*^9}, {3.7130019345015497`*^9, 
   3.7130019392233562`*^9}, {3.713001988883997*^9, 3.7130020045802865`*^9}, {
   3.7130020736644325`*^9, 3.713002122301342*^9}, {3.713002215163065*^9, 
   3.7130022385436954`*^9}, {3.713002780549679*^9, 3.7130029143228006`*^9}, {
   3.7130029456737127`*^9, 3.7130029460751314`*^9}, 3.7130029986705513`*^9, {
   3.713003845361868*^9, 3.713003925016458*^9}, {3.7130053349105225`*^9, 
   3.7130053362075615`*^9}, {3.713006737248191*^9, 3.7130068008153105`*^9}, {
   3.7130082986329327`*^9, 3.7130083168312364`*^9}, {3.7130742895304303`*^9, 
   3.7130743312002506`*^9}, {3.713074451551178*^9, 3.713074455839665*^9}, 
   3.7130748456635027`*^9, {3.713084647468552*^9, 3.713084647531878*^9}, {
   3.713522187515457*^9, 3.713522203038528*^9}, {3.713522247906955*^9, 
   3.71352227900834*^9}, {3.7135225325372486`*^9, 3.713522584974641*^9}, {
   3.713522625177586*^9, 3.713522647399002*^9}, {3.725111727899525*^9, 
   3.725111817520383*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Concatenating alignments", "Subsection",
 CellChangeTimes->{{3.71299343156974*^9, 3.712993438503641*^9}}],

Cell[TextData[{
 "This function will concatenate multiple alignments if their taxon sets are \
all the same. It also outputs a RAXML style partition file. NOTE that your \
input MUST have the same formatting of the fasta files (same data positions \
in the headers) and you ",
 StyleBox["must",
  FontWeight->"Bold"],
 " have the same taxa in all the alignments.. \n\n",
 StyleBox["Input and parameters",
  FontVariations->{"Underline"->True}],
 "\n",
 StyleBox["alignments - ",
  FontWeight->"Bold"],
 "is a fastaParsed list of fasta alignments.\n",
 StyleBox["locusNamePosition - ",
  FontWeight->"Bold"],
 "is an integer indicating the position in the header where the locus name \
resides\n",
 StyleBox["datatype - ",
  FontWeight->"Bold"],
 "is a string indicating what type of data is in the file. This will be \
printed out in the RAXML file.\n"
}], "Text",
 CellChangeTimes->{{3.7129934432280893`*^9, 3.7129934900067368`*^9}, {
  3.7129978634507775`*^9, 3.7129978738879585`*^9}, {3.712998118617277*^9, 
  3.712998145939644*^9}, {3.7129995572226343`*^9, 3.7129995576601048`*^9}, {
  3.7130079259875393`*^9, 3.7130079383714633`*^9}, {3.7130750510432825`*^9, 
  3.7130751091149373`*^9}, {3.7130751518604927`*^9, 3.7130752767838507`*^9}, {
  3.7251118632819557`*^9, 3.7251118896047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"concatenateAlignments", "[", 
   RowBox[{
   "alignments_List", ",", "locusNamePosition_", ",", "dataType_String"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "out", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<concatAlign_\>\"", "<>", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"ToString", "/@", 
             RowBox[{"Date", "[", "]"}]}], ",", " ", "\"\<-\>\""}], "]"}], "//",
           "StringJoin"}], ")"}], "<>", "\"\<.fasta\>\""}], ",", 
       RowBox[{"out", "=", 
        RowBox[{"concatAlign", "[", "alignments", "]"}]}], ",", " ", 
       "\"\<Text\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"alignmentRandR2", "[", 
      RowBox[{"alignments", ",", "locusNamePosition", ",", " ", "dataType"}], 
      " ", "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7130053544354277`*^9, 3.713005392733615*^9}, {
   3.7130054797868657`*^9, 3.7130056837805867`*^9}, {3.7130063825126057`*^9, 
   3.713006382637539*^9}, {3.7130082332339096`*^9, 3.7130082357654233`*^9}, {
   3.713074945477454*^9, 3.7130749474451494`*^9}, {3.7251118537834387`*^9, 
   3.725111858595806*^9}, 3.725515511747821*^9, 3.7255156130950346`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"concatenateAlignments", "[", 
   RowBox[{
   "alignments_List", ",", "locusNamePosition_", ",", "dataType_String"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "out", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<concatAlign_\>\"", "<>", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{
            RowBox[{"ToString", "/@", 
             RowBox[{"Date", "[", "]"}]}], ",", " ", "\"\<-\>\""}], "]"}], "//",
           "StringJoin"}], ")"}], "<>", "\"\<.fasta\>\""}], ",", 
       RowBox[{"out", "=", 
        RowBox[{"concatAlign", "[", "alignments", "]"}]}], ",", " ", 
       "\"\<Text\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"alignmentRandR2", "[", 
      RowBox[{"alignments", ",", "locusNamePosition", ",", " ", "dataType"}], 
      " ", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7130053544354277`*^9, 3.713005392733615*^9}, {
   3.7130054797868657`*^9, 3.7130056837805867`*^9}, {3.7130063825126057`*^9, 
   3.713006382637539*^9}, {3.7130082332339096`*^9, 3.7130082357654233`*^9}, {
   3.713074945477454*^9, 3.7130749474451494`*^9}, {3.7251118537834387`*^9, 
   3.725111858595806*^9}, {3.7251119084522047`*^9, 3.725111915409978*^9}, 
   3.7255155273116302`*^9, 3.7255156192768755`*^9, 3.725515841186448*^9}],

Cell["\<\
Dependency script that does the actual merging of the alignment.\
\>", "Text",
 CellChangeTimes->{{3.7129991708555365`*^9, 3.7129991856349564`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"concatAlign", "[", "listOfParsedAlign_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"temp", ",", "elf"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Length", "/@", "listOfParsedAlign"}], ")"}], "//", 
            "Union"}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], ",",
        " ", 
       RowBox[{"Null", ";"}], ",", " ", 
       RowBox[{
        RowBox[{
        "Print", "[", 
         "\"\<ERROR: ALIGNMENTS HAVE DIFFERENT NUMBER OF ENTRIES. FIX BEFORE \
YOU CONTINUE\>\"", "]"}], ";", " ", 
        RowBox[{"Goto", "[", "\"\<throw\>\"", "]"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"elf", "=", 
      RowBox[{
       RowBox[{"SortBy", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{
           "the", " ", "name", "                               ", "The", " ", 
            "sequences"}], "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"temp", "=", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", 
                    RowBox[{"j", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}],
                     ")"}], "&"}], "/@", "listOfParsedAlign"}], ")"}], "//", 
                "Union"}], ",", " ", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"j", ",", " ", "2"}], "]"}], "]"}], "&"}], "/@", 
                "listOfParsedAlign"}]}], "}"}]}], ";", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"temp", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
              RowBox[{"StringJoin", "[", 
               RowBox[{"temp", "[", 
                RowBox[{"[", 
                 RowBox[{"2", ";;", 
                  RowBox[{"Length", "[", "temp", "]"}]}], "]"}], "]"}], 
               "]"}]}], "}"}]}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", 
            RowBox[{"j", ",", " ", "1", ",", " ", 
             RowBox[{"Length", "[", 
              RowBox[{"listOfParsedAlign", "[", 
               RowBox[{"[", "1", "]"}], "]"}], "]"}]}], "}"}]}], "]"}], 
         "\[IndentingNewLine]", ",", " ", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], "&"}]}], "]"}], "//", 
       "fastaOutput"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<throw\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<done merging files...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "elf"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.712997882484505*^9, 3.7129981155699873`*^9}, {
  3.712998154994977*^9, 3.712998508560383*^9}, {3.7129988593280215`*^9, 
  3.712998908825699*^9}, {3.7129989397372203`*^9, 3.712998999071229*^9}, {
  3.7129990372137027`*^9, 3.71299915014307*^9}, {3.7130067155001974`*^9, 
  3.713006722482088*^9}}],

Cell["This is the simple version.", "Text",
 CellChangeTimes->{{3.7156947461263065`*^9, 3.715694753490639*^9}}],

Cell["?????????", "Text",
 CellChangeTimes->{{3.7251122483828273`*^9, 3.725112272857468*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Cutting an alignment based on a sets or partition file", "Subsection",
 CellChangeTimes->{{3.715737968010706*^9, 3.7157379758678865`*^9}, 
   3.722072578076563*^9}],

Cell["\<\
This function will take an alignment and limit it to a single part based on a \
RAXML style partition file. As of right now, only consecutive sections of \
nucleotides will work. I should modify this later to be able to work with the \
notation \[OpenCurlyDoubleQuote]3-499/3\[CloseCurlyDoubleQuote] to extract \
codon positions.\
\>", "Text",
 CellChangeTimes->{{3.715737983889516*^9, 3.715738109234762*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"alignmentSet", "[", 
   RowBox[{"alignment_", ",", " ", "nucleotidePositions_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "alpha", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"alpha", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", 
          RowBox[{"StringTake", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
            RowBox[{"nucleotidePositions", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], "]"}]}], "}"}], "&"}], "/@", 
       "alignment"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "[", 
         RowBox[{"alpha", "[", 
          RowBox[{"[", 
           RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "]"}], "\[Equal]", 
        "0"}], ",", " ", "alpha", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], " ", "]"}]}], "}"}], "&"}], "/@",
         "alpha"}]}], "]"}]}]}], "\[IndentingNewLine]", "\[IndentingNewLine]",
    "]"}]}]], "Input",
 CellChangeTimes->{{3.7157381149445*^9, 3.71573829804257*^9}, {
  3.7157383385559597`*^9, 3.71573834356131*^9}, {3.7157383832135215`*^9, 
  3.715738385549893*^9}, {3.7157395092283273`*^9, 3.71573954843254*^9}, {
  3.7157395899196253`*^9, 3.715739624095997*^9}, {3.7157396948321342`*^9, 
  3.71573969495714*^9}, {3.71573976171616*^9, 3.7157397621536207`*^9}, {
  3.7157398093312345`*^9, 3.7157398149415474`*^9}, {3.7157761956487703`*^9, 
  3.7157761963174767`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Cutting alignment based on codon positions, when codon positions are known\
\>", "Subsection",
 CellChangeTimes->{{3.7159179549580164`*^9, 3.715917964270178*^9}}],

Cell[TextData[{
 "This function will remove characters in sets of three, following codon \
position patterns. However, this function does not infer the position of \
codons from the alignment, you have to do that elsewhere.\n",
 StyleBox["alignment",
  FontWeight->"Bold"],
 " = a fastaParsed alignment object\n",
 StyleBox["positionToExtract",
  FontWeight->"Bold"],
 " = a list of integers representing the codons you want to extract from your \
alignment\n",
 StyleBox["codonStartPos",
  FontWeight->"Bold"],
 " = an integer representing the position of the FIRST instance of a FIRST \
codon position"
}], "Text",
 CellChangeTimes->{{3.7159179682531166`*^9, 3.7159180169544954`*^9}, {
  3.7159206426095285`*^9, 3.7159206568161993`*^9}, {3.7159206937265563`*^9, 
  3.7159207707668924`*^9}, {3.7159209550245495`*^9, 3.715920957400385*^9}, {
  3.722947606147582*^9, 3.7229476066534357`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"codonExtract", "[", 
   RowBox[{
   "alignment_", ",", " ", "positionToExtract_List", ",", " ", 
    "codonStartPos_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"positionToExtract", "//", "Length"}], ")"}], ">", "1"}], 
       ",", " ", 
       RowBox[{"Null", ";"}], ",", " ", 
       RowBox[{
        RowBox[{"Goto", "[", "\"\<single\>\"", "]"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "the", " ", "part", " ", "immediately", " ", "below", " ", "is", " ", 
        "doing", " ", "something", " ", "wrong", " ", "because", " ", 
        "positionToExtract"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}], " ", "and", " ", 
         RowBox[{"{", 
          RowBox[{"1", ",", " ", "2"}], "}"}], " ", "do", " ", "the", " ", 
         "same", " ", "thing"}], "..."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"positionToExtract", "//", "Length"}], ")"}], "\[Equal]", 
        "2"}], ",", " ", 
       RowBox[{"Null", ";"}], ",", " ", 
       RowBox[{
        RowBox[{"Goto", "[", "\"\<triple\>\"", "]"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"abc", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringJoin", "[", 
         RowBox[{"Riffle", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"codonParse", "[", 
            RowBox[{"alignment", ",", " ", "codonStartPos"}], "]"}], "[", 
           RowBox[{"[", "positionToExtract", "]"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "All", ",", " ", "2"}], "]"}], "]"}], "//",
          "Transpose"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"alignedCodons", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"alignment", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", "abc"}], "]"}],
         ",", " ", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Goto", "[", "\"\<end\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<triple\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "one", " ", "just", " ", "cuts", " ", "out", " ", "the", 
       " ", "beginning", " ", "of", " ", "the", " ", "alignment", " ", "so", 
       " ", "that", " ", "it", " ", "is", " ", "aligned", " ", "with", " ", 
       "the", " ", "first", " ", "nucleotide", " ", "being", " ", "the", " ", 
       "start", " ", "of", " ", "the", " ", "reading", " ", "frame"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"alignedCodons", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{"StringDrop", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
            RowBox[{"codonStartPos", "-", "1"}]}], "]"}]}], "}"}], "&"}], "/@",
        "aaa"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Goto", "[", "\"\<end\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<single\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"alignedCodons", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}], "//", "StringJoin"}]}], "}"}], 
        "&"}], "/@", 
       RowBox[{
        RowBox[{
         RowBox[{"codonParse", "[", 
          RowBox[{"alignment", ",", " ", "codonStartPos"}], "]"}], "[", 
         RowBox[{"[", "positionToExtract", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<end\>\"", "]"}], ";", "\[IndentingNewLine]", 
     "alignedCodons"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.715918067448204*^9, 3.715918097065934*^9}, {
   3.7159192034671926`*^9, 3.7159192252344165`*^9}, {3.715919255907303*^9, 
   3.715919320671857*^9}, {3.715919359781686*^9, 3.7159195277753963`*^9}, {
   3.715919758473945*^9, 3.7159197587395954`*^9}, {3.7159197892173815`*^9, 
   3.7159198068021727`*^9}, {3.7159198791243534`*^9, 
   3.7159200138429227`*^9}, {3.7159200685459146`*^9, 
   3.7159200820436625`*^9}, {3.715920206543557*^9, 3.7159203415123887`*^9}, {
   3.715920416024064*^9, 3.7159204663513794`*^9}, {3.7159205028759604`*^9, 
   3.715920629873236*^9}, {3.7159209522064943`*^9, 3.7159209526108656`*^9}, {
   3.722947905595709*^9, 3.7229479183877244`*^9}, {3.7229482581582355`*^9, 
   3.7229483021022053`*^9}, 3.722948367819945*^9, {3.7229484697431574`*^9, 
   3.722948520248076*^9}, 3.7229485557695785`*^9, {3.722948616384864*^9, 
   3.7229486319020844`*^9}, 3.72294866237881*^9, {3.7229487035067034`*^9, 
   3.722948731940364*^9}}],

Cell["\<\
This function will just take an alignment and prepare it for easy codon \
extraction. Options are the same as above.\
\>", "Text",
 CellChangeTimes->{{3.7159180529283667`*^9, 3.715918065341107*^9}, {
  3.715920774638756*^9, 3.715920781559395*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"codonParse", "[", 
   RowBox[{"alignment_", ",", " ", "codonStartPos_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"aligns", ",", "alignLength"}], "}"}], ",", 
    "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"alignLength", "=", 
      RowBox[{"Union", "[", 
       RowBox[{"StringLength", "/@", 
        RowBox[{"alignment", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"alignLength", "//", "Length"}], ")"}], ">", "1"}], ",", " ", 
       RowBox[{
       "Print", "[", 
        "\"\<ERROR: NUCLEOTIDE SEQS NOT OF EQUAL LENGTH. IS THIS AN \
ALIGNMENT?\>\"", "]"}], ",", " ", 
       RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"aligns", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringDrop", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"codonStartPos", "-", "1"}]}], "]"}], "&"}], "/@", 
       RowBox[{"alignment", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"FirstCodonPos", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"alignment", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"StringPartition", "[", 
             RowBox[{"#", ",", " ", "1", ",", " ", "3"}], "]"}], "&"}], "/@", 
           "aligns"}]}], "]"}], ",", " ", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"aligns", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringDrop", "[", 
         RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", "aligns"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"SecondCodonPos", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"alignment", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"StringPartition", "[", 
             RowBox[{"#", ",", " ", "1", ",", " ", "3"}], "]"}], "&"}], "/@", 
           "aligns"}]}], "]"}], ",", " ", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"aligns", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringDrop", "[", 
         RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", "aligns"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ThirdCodonPos", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{
          RowBox[{"alignment", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", 
          RowBox[{
           RowBox[{
            RowBox[{"StringPartition", "[", 
             RowBox[{"#", ",", " ", "1", ",", " ", "3"}], "]"}], "&"}], "/@", 
           "aligns"}]}], "]"}], ",", " ", "2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "FirstCodonPos", ",", "SecondCodonPos", ",", " ", "ThirdCodonPos"}], 
      "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.715918019466185*^9, 3.715918041267506*^9}, {
  3.7159181009536147`*^9, 3.7159183884197483`*^9}, {3.715918452123369*^9, 
  3.7159185071938095`*^9}, {3.715918544777943*^9, 3.715918558350233*^9}, {
  3.715918589903715*^9, 3.71591859988724*^9}, {3.715918638922632*^9, 
  3.7159187947351694`*^9}, {3.715918916471458*^9, 3.7159189474507914`*^9}, {
  3.7159190051173296`*^9, 3.715919047832906*^9}, {3.715919080142432*^9, 
  3.7159191465846887`*^9}, {3.715919236641045*^9, 3.7159192482122107`*^9}, {
  3.7159198207191105`*^9, 3.715919861698984*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Trimming alignments", "Subchapter",
 CellChangeTimes->{{3.723012872042474*^9, 3.7230128743814855`*^9}},
 Background->RGBColor[0.9, 1, 1]],

Cell[CellGroupData[{

Cell["Trimming alignments (horizontal)", "Subsection",
 CellChangeTimes->{{3.7131668555429344`*^9, 3.7131668582906957`*^9}, {
  3.7228732249068594`*^9, 3.722873227919814*^9}}],

Cell[CellGroupData[{

Cell["Trim positions", "Subsubsection",
 CellChangeTimes->{{3.722869415891667*^9, 3.7228694180332313`*^9}}],

Cell[TextData[{
 "TrimAl is a very good software for quickly trimming alignments. However, it \
can\[CloseCurlyQuote]t handle large files. I wrote a very simplistic \
alignment reducer that can handle larger alignments simply because it\
\[CloseCurlyQuote]s based in mathematica.\n",
 StyleBox["Input\n",
  FontVariations->{"Underline"->True}],
 "alignment - a raw alignment file name in FASTA format\n",
 StyleBox["Parameters\n",
  FontVariations->{"Underline"->True}],
 "reductionPercent - the % of data you want to reduce by. For example, a \
value of .80 will delete the 80% least complete positions."
}], "Text",
 CellChangeTimes->{{3.713166860674369*^9, 3.713167037753801*^9}, {
  3.713169094571203*^9, 3.7131690956187944`*^9}, {3.7168885455276413`*^9, 
  3.716888545809001*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimAlign", "[", 
   RowBox[{"alignment_", ",", " ", "reductionPercent_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucleotides", ",", "  ", "abc", ",", " ", "best", ",", " ", "names", 
      ",", " ", "worst"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<Importing file...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "align", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"align", "=", 
         RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<Import complete.\nSorting and counting...\>\"", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"nucleotides", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
          RowBox[{"align", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"names", "=", 
         RowBox[{"align", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}]}]}], "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"abc", "=", 
      RowBox[{"SortBy", "[", 
       RowBox[{
        RowBox[{"nucleotides", "//", "Transpose"}], ",", 
        RowBox[{
         RowBox[{"Count", "[", 
          RowBox[{"#", ",", " ", 
           RowBox[{"(", 
            RowBox[{
            "\"\<?\>\"", "|", "\"\<-\>\"", "|", "\"\<N\>\"", "|", 
             "\"\<n\>\""}], ")"}]}], "]"}], "&"}]}], " ", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Sorting and counting complete.\nMaking the better \
alignment...\>\"", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"best", "=", 
      RowBox[{"Take", "[", 
       RowBox[{"abc", "[", 
        RowBox[{"[", 
         RowBox[{"1", ";;", 
          RowBox[{"(", 
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "abc", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", " ", "-", " ", "reductionPercent"}], ")"}]}], 
              ")"}], ",", " ", "1"}], "]"}], ")"}]}], "]"}], "]"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"worst", "=", 
      RowBox[{"Take", "[", 
       RowBox[{"abc", "[", 
        RowBox[{"[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Round", "[", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "abc", "]"}], "*", 
               RowBox[{"(", 
                RowBox[{"1", " ", "-", " ", "reductionPercent"}], ")"}]}], 
              ")"}], ",", " ", "1"}], "]"}], ")"}], ";;", 
          RowBox[{"Length", "[", "abc", "]"}]}], "]"}], "]"}], "   ", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<All positiongs in the alignment have ~\>\"", "<>", 
         RowBox[{"ToString", "[", "]"}], "<>", 
         "\"\< or more nucleotides.\>\""}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Made the best one from your parameters...just need to export.\>\"",
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<bestOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", 
            RowBox[{"StringJoin", "/@", 
             RowBox[{"(", 
              RowBox[{"best", "//", "Transpose"}], ")"}]}]}], "]"}], ",", " ",
           "2"}], "]"}], "//", "fastaOutput"}], ",", " ", "\"\<String\>\""}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<worstOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", 
            RowBox[{"StringJoin", "/@", 
             RowBox[{"(", 
              RowBox[{"worst", "//", "Transpose"}], ")"}]}]}], "]"}], ",", 
          " ", "2"}], "]"}], "//", "fastaOutput"}], ",", " ", 
       "\"\<String\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Done.\n\nHHHHHYAAA!   \>\"", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713167045548545*^9, 3.7131672137937794`*^9}, {
  3.713167657765791*^9, 3.7131676675754223`*^9}, {3.713167928029702*^9, 
  3.713167937084417*^9}, {3.7131688324884977`*^9, 3.713168922496355*^9}, {
  3.7131689531074452`*^9, 3.713169062607267*^9}, {3.7131691172607937`*^9, 
  3.713169194560309*^9}, {3.7131693504983225`*^9, 3.7131693968900776`*^9}, {
  3.713169754603243*^9, 3.7131699558045564`*^9}, {3.717132502656804*^9, 
  3.7171325118465986`*^9}}],

Cell[TextData[{
 "This function is similar to the above but uses a different (possibly more \
useful) method. The parameter it uses to trim the alignment is the proportion \
of sequences with missing data.\n\n",
 StyleBox["Input\n",
  FontVariations->{"Underline"->True}],
 StyleBox["alignment",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " - a raw alignment file name in FASTA format\n",
 StyleBox["Parameters\n",
  FontVariations->{"Underline"->True}],
 StyleBox["missingProportion",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " - The max percentage of missing data you accept. All positions with more \
missing data than this will be deleted.  For example, a value of 0.2 will \
remove all nucleotide positions with 20% or more missing data. A higher \
number means that more nucleotides will be deleted"
}], "Text",
 CellChangeTimes->{{3.717135695543138*^9, 3.717135768993041*^9}, {
   3.717136503239478*^9, 3.717136551118408*^9}, {3.717136608524476*^9, 
   3.7171366168462934`*^9}, 3.717145242303829*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimAlign2", "[", 
   RowBox[{"alignment_", ",", " ", "missingProportion_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucleotides", ",", "  ", "abc", ",", " ", "best", ",", " ", "names", 
      ",", " ", "worst", ",", " ", "alignLength", ",", " ", 
      "missingDataCounts"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<Importing file...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "align", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"align", "=", 
         RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<Import complete.\nDoing some data prep...\>\"", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"nucleotides", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
          RowBox[{"align", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"names", "=", 
         RowBox[{"align", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"alignLength", "=", 
         RowBox[{"align", "//", "Length"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"abc", "=", 
      RowBox[{"nucleotides", "//", "Transpose"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Initial steps complete.\nMaking the better alignment...\>\"", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"missingDataCounts", "=", 
      RowBox[{"ParallelTable", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"abc", "[", 
           RowBox[{"[", "i", 
            RowBox[{"(*", "loop", "*)"}], "]"}], "]"}], ",", 
          RowBox[{
          "\"\<?\>\"", "|", "\"\<-\>\"", "|", "\"\<N\>\"", "|", 
           "\"\<n\>\""}]}], " ", "]"}], "\[IndentingNewLine]", ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "abc", "]"}]}], " ", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"worst", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "\[GreaterEqual]", " ", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"best", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "<", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<All positiongs in the alignment have ~\>\"", "<>", 
         RowBox[{"ToString", "[", "]"}], "<>", 
         "\"\< or more nucleotides.\>\""}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Made the best one from your parameters...just need to export.\>\"",
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<bestOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", "best"}], "]"}], ",", " ", "2"}], "]"}], "//",
         "fastaOutput"}], ",", " ", "\"\<String\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<worstOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", "worst"}], "]"}], ",", " ", "2"}], "]"}], "//",
         "fastaOutput"}], ",", " ", "\"\<String\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", "\"\<Done.\n\nGRRRRAAAAAHHHHHHHHHHH!   \>\"", "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713167045548545*^9, 3.7131672137937794`*^9}, {
   3.713167657765791*^9, 3.7131676675754223`*^9}, {3.713167928029702*^9, 
   3.713167937084417*^9}, {3.7131688324884977`*^9, 3.713168922496355*^9}, {
   3.7131689531074452`*^9, 3.713169062607267*^9}, {3.7131691172607937`*^9, 
   3.713169194560309*^9}, {3.7131693504983225`*^9, 3.7131693968900776`*^9}, {
   3.713169754603243*^9, 3.7131699558045564`*^9}, {3.717132502656804*^9, 
   3.7171325118465986`*^9}, 3.7171327122384863`*^9, {3.7171327671154785`*^9, 
   3.7171327952700205`*^9}, {3.7171328386102557`*^9, 3.717132874759642*^9}, {
   3.7171329272840734`*^9, 3.7171330831211395`*^9}, {3.7171331613936167`*^9, 
   3.71713329276867*^9}, {3.7171335583799567`*^9, 3.717133721738325*^9}, {
   3.7171337528387213`*^9, 3.717133758229885*^9}, {3.7171340888140745`*^9, 
   3.717134095347103*^9}, {3.7171353178545165`*^9, 3.717135359144906*^9}, {
   3.7171354957507935`*^9, 3.7171355060809994`*^9}, {3.717136582573677*^9, 
   3.717136582767891*^9}}],

Cell["\<\
This is a version of the above compatible with amino-acid sequences.\
\>", "Text",
 CellChangeTimes->{{3.7240781814564447`*^9, 3.7240781931199493`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimAlign2AA", "[", 
   RowBox[{"alignment_", ",", " ", "missingProportion_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucleotides", ",", "  ", "abc", ",", " ", "best", ",", " ", "names", 
      ",", " ", "worst", ",", " ", "alignLength", ",", " ", 
      "missingDataCounts"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<Importing file...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "align", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"align", "=", 
         RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", "\"\<Import complete.\nDoing some data prep...\>\"", 
         "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"nucleotides", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
          RowBox[{"align", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"names", "=", 
         RowBox[{"align", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"alignLength", "=", 
         RowBox[{"align", "//", "Length"}]}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"abc", "=", 
      RowBox[{"nucleotides", "//", "Transpose"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Initial steps complete.\nMaking the better alignment...\>\"", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"missingDataCounts", "=", 
      RowBox[{"ParallelTable", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"abc", "[", 
           RowBox[{"[", "i", 
            RowBox[{"(*", "loop", "*)"}], "]"}], "]"}], ",", 
          RowBox[{"\"\<?\>\"", "|", "\"\<-\>\""}]}], " ", "]"}], 
        "\[IndentingNewLine]", ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "abc", "]"}]}], " ", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"worst", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "\[GreaterEqual]", " ", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"best", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "<", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<All positiongs in the alignment have ~\>\"", "<>", 
         RowBox[{"ToString", "[", "]"}], "<>", 
         "\"\< or more nucleotides.\>\""}], "]"}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<Made the best one from your parameters...just need to export.\>\"",
       "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<bestOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", "best"}], "]"}], ",", " ", "2"}], "]"}], "//",
         "fastaOutput"}], ",", " ", "\"\<String\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<worstOf_\>\"", "<>", "alignment"}], ",", 
       RowBox[{
        RowBox[{"Partition", "[", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"names", ",", "worst"}], "]"}], ",", " ", "2"}], "]"}], "//",
         "fastaOutput"}], ",", " ", "\"\<String\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", "\"\<Done.\n\nGRRRRAAAAAHHHHHHHHHHH!   \>\"", "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.713167045548545*^9, 3.7131672137937794`*^9}, {
   3.713167657765791*^9, 3.7131676675754223`*^9}, {3.713167928029702*^9, 
   3.713167937084417*^9}, {3.7131688324884977`*^9, 3.713168922496355*^9}, {
   3.7131689531074452`*^9, 3.713169062607267*^9}, {3.7131691172607937`*^9, 
   3.713169194560309*^9}, {3.7131693504983225`*^9, 3.7131693968900776`*^9}, {
   3.713169754603243*^9, 3.7131699558045564`*^9}, {3.717132502656804*^9, 
   3.7171325118465986`*^9}, 3.7171327122384863`*^9, {3.7171327671154785`*^9, 
   3.7171327952700205`*^9}, {3.7171328386102557`*^9, 3.717132874759642*^9}, {
   3.7171329272840734`*^9, 3.7171330831211395`*^9}, {3.7171331613936167`*^9, 
   3.71713329276867*^9}, {3.7171335583799567`*^9, 3.717133721738325*^9}, {
   3.7171337528387213`*^9, 3.717133758229885*^9}, {3.7171340888140745`*^9, 
   3.717134095347103*^9}, {3.7171353178545165`*^9, 3.717135359144906*^9}, {
   3.7171354957507935`*^9, 3.7171355060809994`*^9}, {3.717136582573677*^9, 
   3.717136582767891*^9}, {3.7240781230681553`*^9, 3.724078123198249*^9}, {
   3.7240781541036115`*^9, 3.7240781563594637`*^9}}],

Cell["\<\
This is a slimmed down version of the above function that takes a fastaParsed \
list as input, rather than a file name.\
\>", "Text",
 CellChangeTimes->{{3.7171357923363447`*^9, 3.717135851097741*^9}, {
  3.717135935185501*^9, 3.7171359623608046`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimAlign2Slim", "[", 
   RowBox[{"alignment_List", ",", " ", "missingProportion_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucleotides", ",", "  ", "abc", ",", " ", "best", ",", " ", "names", 
      ",", " ", "worst", ",", " ", "alignLength", ",", " ", "align", ",", " ",
       "missingDataCounts"}], "}"}], ",", " ", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", "alignment"}], ";", "\[IndentingNewLine]", 
     RowBox[{"nucleotides", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringPartition", "[", 
         RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
       RowBox[{"align", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"names", "=", 
      RowBox[{"align", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"alignLength", "=", 
      RowBox[{"align", "//", "Length"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"abc", "=", 
      RowBox[{"nucleotides", "//", "Transpose"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"missingDataCounts", "=", 
      RowBox[{"ParallelTable", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Count", "[", 
         RowBox[{
          RowBox[{"abc", "[", 
           RowBox[{"[", "i", 
            RowBox[{"(*", "loop", "*)"}], "]"}], "]"}], ",", 
          RowBox[{
          "\"\<?\>\"", "|", "\"\<-\>\"", "|", "\"\<N\>\"", "|", 
           "\"\<n\>\""}]}], " ", "]"}], "\[IndentingNewLine]", ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "abc", "]"}]}], " ", "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"worst", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "\[GreaterEqual]", " ", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"best", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Pick", "[", 
          RowBox[{"abc", ",", "missingDataCounts", ",", 
           RowBox[{"x_", "/;", 
            RowBox[{"(", 
             RowBox[{"x", "<", 
              RowBox[{"(", 
               RowBox[{"missingProportion", "*", "alignLength"}], ")"}]}], 
             ")"}]}]}], "]"}], "//", "Transpose"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"bestPositions", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{"names", ",", "best"}], "]"}], ",", " ", "2"}], "]"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"worstPositions", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{
        RowBox[{"Riffle", "[", 
         RowBox[{"names", ",", "worst"}], "]"}], ",", " ", "2"}], "]"}]}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7171358188184958`*^9, 3.7171359376611023`*^9}, {
  3.7171359995218916`*^9, 3.7171360132186613`*^9}, {3.717136083363778*^9, 
  3.7171360994621143`*^9}, {3.717136590280759*^9, 3.717136590477216*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Trim from ends", "Subsubsection",
 CellChangeTimes->{{3.7228694224853363`*^9, 3.7228694242040825`*^9}}],

Cell[TextData[{
 "Automated trimming is great but could potentially change codon structure or \
delete incorrectly internally aligned regions. To account for this we can \
just make the decision to trim from the end of the alignments. We can base \
how much we trim on an arbitrary number (e.g. 50 nucleotides), or we can base \
it on the number of sequences represented (e.g. 20%).\n\n",
 StyleBox["fastaFile",
  FontWeight->"Bold"],
 "=the name of an alignment file in the working directory\n",
 StyleBox["emptinessAllowed",
  FontWeight->"Bold"],
 "= the maximum percentage of emptiness you\[CloseCurlyQuote]re willing to \
allow. Any percentage lower than this will be removed"
}], "Text",
 CellChangeTimes->{{3.722869431641526*^9, 3.7228695687210555`*^9}, {
  3.722872771529747*^9, 3.72287282601781*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"trimEnds", "[", 
     RowBox[{"#", ",", " ", ".8"}], "]"}], "&"}], "/@", "fn"}], 
  "*)"}]], "Input",
 CellChangeTimes->{
  3.722872770672768*^9, {3.7228731391037436`*^9, 3.722873145618659*^9}, {
   3.7229178240189266`*^9, 3.722917829960032*^9}, {3.722918468427787*^9, 
   3.7229184757727885`*^9}, {3.72291859649376*^9, 3.722918611037114*^9}, {
   3.722918881723607*^9, 3.722918909708686*^9}, 3.722919290959543*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimEnds", "[", 
   RowBox[{"fastaFile_", ",", "emptinessAllowed_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "seqs", ",", " ", "fasta", ",", " ", "seqsRev", ",", " ", "align", ",", 
      " ", "alignRev", ",", " ", "totCharacters", ",", " ", "totTaxa", ",", 
      "frontCut", ",", " ", "backCut", ",", "emptinessPercent"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqs", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"fasta", "=", 
         RowBox[{"importAlignment", "[", "fastaFile", "]"}]}], ")"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"seqsRev", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringReverse", "[", "#", "]"}], "&"}], "/@", "seqs"}], 
       ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"emptinessPercent", "=", "emptinessAllowed"}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"align", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", "seqs"}], ")"}], "//",
         "Transpose"}]}], ")"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"alignRev", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{"#", ",", "1"}], "]"}], "&"}], "/@", "seqsRev"}], ")"}], "//",
         "Transpose"}]}], ")"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"totCharacters", "=", 
      RowBox[{"align", "//", "Length"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"totTaxa", "=", 
      RowBox[{"seqs", "//", "Length"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"find", " ", "cut", " ", "front", " ", "cut"}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"frontCut", "=", 
      RowBox[{"findcut", "[", 
       RowBox[{"align", ",", " ", "emptinessPercent"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"backCut", "=", 
      RowBox[{"findcut", "[", 
       RowBox[{"alignRev", ",", " ", "emptinessPercent"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<endCut.\>\"", "<>", "fastaFile"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{"StringDrop", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "frontCut"}], "]"}], 
               ",", " ", 
               RowBox[{"-", "backCut"}]}], "]"}]}], "}"}], "&"}], "/@", 
          "fasta"}], ")"}], "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7228723300964317`*^9, 3.722872503816969*^9}}],

Cell["\<\
In the simple version we will automatically chop the alignment down to the \
core data set (sites with 75 % of their data present).\
\>", "Text",
 CellChangeTimes->{{3.7228730199180202`*^9, 3.7228730379713717`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimEnds", "[", "fastaFile_", "]"}], ":=", 
  RowBox[{"trimEnds", "[", 
   RowBox[{"fastaFile", ",", ".25"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.722873045346699*^9, 3.7228730549083776`*^9}}],

Cell["\<\
This version will simply trim the specified amount off of both ends of the \
alignment.\
\>", "Text",
 CellChangeTimes->{{3.7228733060003157`*^9, 3.722873324663392*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimEnds", "[", 
   RowBox[{"fastaFile_", ",", "length_", ",", " ", "\"\<Length\>\""}], "]"}], 
  ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "seqs", ",", " ", "fasta", ",", " ", "seqsRev", ",", " ", "align", ",", 
      " ", "alignRev", ",", " ", "totCharacters", ",", " ", "totTaxa", ",", 
      "frontCut", ",", " ", "backCut", ",", "emptinessPercent"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"frontCut", "=", "length"}], ";", "\[IndentingNewLine]", 
     RowBox[{"backCut", "=", "length"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<endCut.\>\"", "<>", "fastaFile"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{"StringDrop", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", "frontCut"}], "]"}], 
               ",", " ", 
               RowBox[{"-", "backCut"}]}], "]"}]}], "}"}], "&"}], "/@", 
          "fasta"}], ")"}], "//", "fastaOutput"}], ",", " ", "\"\<Text\>\""}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7228732663190093`*^9, 3.722873300303522*^9}}],

Cell["Another version to keep the formatting consistent.", "Text",
 CellChangeTimes->{{3.722873375351771*^9, 3.722873384336817*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"trimEnds", "[", 
   RowBox[{
   "fastaFile_", ",", "emptinessAllowed_", ",", "\"\<Percentage\>\""}], "]"}],
   ":=", 
  RowBox[{"trimEnds", "[", 
   RowBox[{"fastaFile", ",", "emptinessAllowed"}], "]"}]}]], "Input"],

Cell["Dependency script.", "Text",
 CellChangeTimes->{{3.722871612252701*^9, 3.7228716238272605`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findcut", "[", 
   RowBox[{"align_", ",", " ", "emptinessPercent_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"blockEmptiness", ",", "totTaxa"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"totTaxa", "=", 
      RowBox[{
       RowBox[{"align", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "//", "Length"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"blockEmptiness", "=", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"countMissing", "/@", 
                  RowBox[{"{", 
                   RowBox[{
                   "#1", ",", "#2", ",", " ", "#3", ",", " ", "#4", ",", " ", 
                    "#5", ",", " ", "#6", ",", " ", "#7", ",", " ", "#8", ",",
                     " ", "#9", ",", " ", "#10"}], "}"}]}], ")"}], "&"}], "[", 
               RowBox[{
                RowBox[{"align", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "1"}], "]"}], "]"}], ",", " ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "2"}], "]"}], "]"}], ",", " ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "3"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "4"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "5"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "6"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "7"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "8"}], "]"}], "]"}], ",", "  ", 
                RowBox[{"align", "[", 
                 RowBox[{"[", 
                  RowBox[{"i", "+", "9"}], "]"}], "]"}]}], "]"}], ")"}], "//",
              "Total"}], ")"}], "/", "10"}], ")"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
          "the", " ", "above", " ", "block", " ", "will", " ", "count", " ", 
           "the", " ", "average", " ", "number", " ", "of", " ", "characters",
            " ", "missing", " ", 
           RowBox[{"(", 
            RowBox[{"-", " ", 
             RowBox[{"or", " ", "?"}]}], ")"}], " ", "in", " ", "a", " ", 
           "block", " ", "of", " ", "10", " ", "in", " ", "an", " ", 
           RowBox[{"alignment", ".", " ", "if"}], " ", "you", " ", "want", 
           " ", "the", " ", "sliding", " ", "window", " ", "to", " ", "be"}], 
          " ", ">", 
          RowBox[{
          "10", " ", "you", " ", "will", " ", "have", " ", "to", " ", 
           "change", " ", "the", " ", "above", " ", "code"}]}], "*)"}], " ", 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"blockEmptiness", ">", 
           RowBox[{"(", 
            RowBox[{"totTaxa", "*", "emptinessPercent"}], ")"}]}], ",", 
          RowBox[{"Null", ";"}], ",", 
          RowBox[{
           RowBox[{"cut", "=", "i"}], ";", " ", 
           RowBox[{"Goto", "[", "\"\<throw\>\"", "]"}], ";"}]}], " ", "]"}]}],
        "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
           "the", " ", "above", " ", "says", " ", "if", " ", "the", " ", 
            "average", " ", "number", " ", "of", " ", "characters", " ", 
            "missing", " ", "is", " ", "above", " ", "the", " ", "amount", 
            " ", "specified", " ", "by", " ", "the", " ", "input", " ", 
            "then", " ", "keep", " ", "going"}], "..."}], "when", " ", 
          RowBox[{"it", "'"}], "s", " ", "above", " ", "that", " ", 
          "amount"}], ",", " ", 
         RowBox[{"log", " ", "the", " ", "position", " ", 
          RowBox[{"(", "cut", ")"}]}]}], "*)"}], "\[IndentingNewLine]", ",", 
       " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "align", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Label", "[", "\"\<throw\>\"", "]"}], ";", "\[IndentingNewLine]",
      "cut"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7229187572092266`*^9, 3.7229187574172983`*^9}, {
  3.7229190181032104`*^9, 3.7229190207318625`*^9}}],

Cell["Dependancy script.", "Text",
 CellChangeTimes->{3.7228731299071646`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countMissing", "[", "nucList_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Count", "[", 
      RowBox[{"nucList", ",", " ", "\"\<-\>\""}], "]"}], "+", 
     RowBox[{"Count", "[", 
      RowBox[{"nucList", ",", " ", "\"\<?\>\""}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.722873120774531*^9, 3.7228731267142973`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[OpenCurlyDoubleQuote]Square\[CloseCurlyDoubleQuote] an alignment", \
"Subsection",
 CellChangeTimes->{{3.717136125819307*^9, 3.71713612917896*^9}, 
   3.722072547886777*^9}],

Cell[TextData[{
 "This function combines two trimming functions to fix an alignment with a \
high proportion of missing data. It trims the data vertically (by removing \
taxa with missing data) and horizontally (by removing positions with missing \
data).\n",
 StyleBox["Input\n",
  FontVariations->{"Underline"->True}],
 StyleBox["alignment",
  FontWeight->"Bold"],
 " = an alignment file name. So you must set the directory to the folder with \
your alignments.\n",
 StyleBox["Parameters\n",
  FontVariations->{"Underline"->True}],
 StyleBox["verticalTrim - ",
  FontWeight->"Bold"],
 "parameter for ",
 StyleBox["deleteEmptySequences",
  FontSlant->"Italic"],
 " function. The maximum amount of missing data a sequence can have, \
otherwise it is deleted.",
 StyleBox["\nhorizontalTrim ",
  FontWeight->"Bold"],
 "- parameter for trimAlign2Slim function. The max percentage of missing data \
you accept. All positions with more missing data than this will be deleted.  \
For example, a value of 0.2 will remove all nucleotide positions with 20% or \
more missing data. A higher number means that more nucleotides will be \
deleted.\n",
 StyleBox["format",
  FontWeight->"Bold"],
 " - a string indicating the output style. Currently accepted options are \
\[OpenCurlyDoubleQuote]Fasta\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]Nexus\[CloseCurlyDoubleQuote]. Nexus format will \
remove taxon names."
}], "Text",
 CellChangeTimes->{{3.7171361321332555`*^9, 3.717136177942505*^9}, {
  3.717136274661079*^9, 3.7171362865544605`*^9}, {3.7171372132642207`*^9, 
  3.7171372798219814`*^9}, {3.717137458588904*^9, 3.7171375690274324`*^9}, {
  3.717137602673405*^9, 3.717137697936912*^9}, {3.717144872227738*^9, 
  3.717144904895587*^9}, {3.717145139041623*^9, 3.717145161835456*^9}, {
  3.7171453602768793`*^9, 3.7171453628741875`*^9}, {3.7221740296942453`*^9, 
  3.722174029862729*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"squareAlignment", "[", 
   RowBox[{
   "alignment_", ",", " ", "verticalTrim_", ",", " ", "horizontalTrim_", ",", 
    " ", "\"\<Nexus\>\""}], " ", 
   RowBox[{"(*", "format", "*)"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", " ", "newAlign"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trimAlign2Slim", "[", 
      RowBox[{
       RowBox[{"deleteEmptySequences", "[", 
        RowBox[{"align", ",", " ", "verticalTrim"}], "]"}], ",", " ", 
       "horizontalTrim"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"alignment", "<>", "\"\<.square.nex\>\""}], ",", " ", 
       RowBox[{"bestPositions", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", "\"\<Nexus\>\""}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7171361797238646`*^9, 3.7171363044792085`*^9}, {
  3.7171363349412518`*^9, 3.7171364111864796`*^9}, {3.717136678963164*^9, 
  3.717136709621848*^9}, {3.717136818306752*^9, 3.717136820585657*^9}, {
  3.7171369375702724`*^9, 3.717136942628027*^9}, {3.7171370502708693`*^9, 
  3.717137051458568*^9}, {3.7171371463321257`*^9, 3.7171371493191004`*^9}, {
  3.7171377032163095`*^9, 3.717137714597988*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"squareAlignment", "[", 
   RowBox[{
   "alignment_", ",", " ", "verticalTrim_", ",", " ", "horizontalTrim_", ",", 
    " ", "\"\<Fasta\>\""}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", " ", "newAlign"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trimAlign2Slim", "[", 
      RowBox[{
       RowBox[{"deleteEmptySequences", "[", 
        RowBox[{"align", ",", " ", "verticalTrim"}], "]"}], ",", " ", 
       "horizontalTrim"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"alignment", "<>", "\"\<.square.fasta\>\""}], ",", " ", 
       RowBox[{"bestPositions", "//", "fastaOutput"}], ",", "\"\<Text\>\""}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7171371873310595`*^9, 3.717137206651045*^9}, {
  3.717137718997012*^9, 3.717137724431183*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"squareAlignment", "[", 
   RowBox[{
   "alignment_", ",", " ", "verticalTrim_", ",", " ", "horizontalTrim_", ",", 
    " ", "\"\<Phylip\>\""}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", " ", "newAlign"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{"importAlignment", "[", "alignment", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trimAlign2Slim", "[", 
      RowBox[{
       RowBox[{"deleteEmptySequences", "[", 
        RowBox[{"align", ",", " ", "verticalTrim"}], "]"}], ",", " ", 
       "horizontalTrim"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"alignment", "<>", "\"\<.square.phy\>\""}], ",", " ", 
       RowBox[{"bestPositions", "//", "toPhylip"}], ",", "\"\<Text\>\""}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.720354629441125*^9, 3.720354644178723*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Codons and AminoAcids", "Subchapter",
 CellChangeTimes->{{3.7230129121627717`*^9, 3.723012919654533*^9}},
 Background->RGBColor[0.94, 0.91, 0.88]],

Cell["\<\
NOTE: Add in a function here that calls MAFFT or Muscle to realign if the \
number of stop codons is too high.\
\>", "Text",
 CellChangeTimes->{{3.7240537773063107`*^9, 3.724053806269519*^9}}],

Cell[CellGroupData[{

Cell["Translate an alignment to amino acids", "Subsection",
 CellChangeTimes->{{3.7229290223832912`*^9, 3.722929028160033*^9}}],

Cell["\<\
NOTE: I need to update the below functions to handle non-standard genetic \
codes. I can add it as an option to choose the matrix used.\
\>", "Text",
 CellChangeTimes->{{3.7219893551201115`*^9, 3.7219893827296934`*^9}}],

Cell[TextData[StyleBox["NOTE: That this does work with alignments, but still \
messes up some sequences that should be aligned correctly. I am not sure why \
but I should explore more.",
 Background->RGBColor[1, 0.5, 0]]], "Text",
 CellChangeTimes->{{3.722931800811754*^9, 3.722931831268345*^9}}],

Cell["\<\
This version requires that you decide on a correct reading direction in the \
alignment. This can be done via the --adjustdirection option in MAFFT. The \
only way this differs from the analogous function in the FASTA section is \
that this does not test reverse complement trand reads...so it\
\[CloseCurlyQuote]s actually faster in that respect.\
\>", "Text",
 CellChangeTimes->{{3.72292903717142*^9, 3.7229291096078215`*^9}}],

Cell[TextData[StyleBox["Translate multiple FASTA files",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.72198748455087*^9, 3.721987493600369*^9}}],

Cell[TextData[{
 StyleBox["input",
  FontWeight->"Bold"],
 " = the nucleotide FASTA file name you want to translate\n",
 StyleBox["suffix",
  FontWeight->"Bold"],
 " = the suffix you want to add to the file, INCLUDING the format suffix (e.g \
\[OpenCurlyDoubleQuote].fasta\[CloseCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote].txt\[CloseCurlyDoubleQuote] )"
}], "Text",
 CellChangeTimes->{{3.7219877566552114`*^9, 3.72198778657812*^9}, {
   3.721987817806065*^9, 3.7219878524181857`*^9}, 3.722925225951001*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translateAlignmentFile", "[", 
   RowBox[{"input_", ",", " ", "suffix_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"StringSplit", "[", 
          RowBox[{"input", ",", " ", "\"\<.\>\""}], "]"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], "<>", "\"\<.\>\"", "<>", "suffix"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"importAlignment", "[", "input", "]"}], "//", 
         "translateAlignment"}], "//", "fastaOutput"}], ",", " ", 
       "\"\<Text\>\""}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7219874969835896`*^9, 3.721987588617464*^9}, {
  3.7219876353755383`*^9, 3.7219877403236065`*^9}, {3.7229293578902035`*^9, 
  3.722929365183609*^9}, {3.722931084024943*^9, 3.722931085892118*^9}}],

Cell[TextData[StyleBox["Translate a whole FASTA parsed object",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.7219819288198576`*^9, 3.721981935642774*^9}, {
  3.721987904068366*^9, 3.7219879078087835`*^9}}],

Cell[TextData[{
 StyleBox["fastaParsed",
  FontWeight->"Bold"],
 " = a fastaParsed object"
}], "Text",
 CellChangeTimes->{{3.721987916091482*^9, 3.721987926505068*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translateAlignment", "[", "fastaParsed_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"translate2", "[", 
         RowBox[{"#", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "}"}], "&"}], "/@", 
     "fastaParsed"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7219819398774667`*^9, 3.7219820769704194`*^9}, {
   3.721982143286683*^9, 3.72198214699759*^9}, {3.72198219697466*^9, 
   3.7219822087629957`*^9}, 3.7229296146867037`*^9, 3.7229310896890507`*^9}],

Cell[TextData[StyleBox["Translating a single FASTA entry",
 FontWeight->"Bold"]], "Text",
 CellChangeTimes->{{3.721974143704458*^9, 3.721974153117324*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"translate2", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", " ", "c", ",", "d", ",", " ", "transLateIn3Frames", ",", 
      "numStops", ",", "stopPoss", ",", "distances", ",", "maxDistance", ",", 
      "numstopsMiddle", ",", " ", "crit1", ",", " ", "crit2", ",", " ", 
      "crit3", ",", "crit4", ",", "crit5", ",", " ", "crit6", ",", " ", 
      "crit7", ",", " ", "crit8", ",", " ", "crit9", ",", "translation", ",", 
      " ", "scores1", ",", " ", "scores2", ",", " ", "scores3", ",", " ", 
      "tally"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "translate", " ", "in", " ", "6", " ", "standard", " ", "reading", " ", 
      "frames"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringPartition", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"sequence", "//", "ToUpperCase"}], ",", "#"}], "]"}], 
           ",", " ", "3"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"b", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"sequence", "//", "ToUpperCase"}], "//", "revComp"}], 
               ",", "#"}], "]"}], ",", " ", "3"}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";",
        " ", 
       RowBox[{
       "Commentted", " ", "out", " ", "because", " ", "this", " ", "was", " ",
         "the", " ", "reverse", " ", "complement", " ", "section"}]}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", " ", "1"}], "]"}], "/.", 
       StyleBox["replaceTableStd",
        FontVariations->{"Underline"->True}]}]}], 
     StyleBox[";",
      FontVariations->{"Underline"->True}], "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"transLateIn3Frames", "/.", 
         RowBox[{
          RowBox[{"x_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"StringLength", "[", "x", "]"}], ">", "2"}], ")"}]}], 
          "\[Rule]", "\"\<?\>\""}]}], ")"}], "//", "Quiet"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "line", " ", "just", " ", "turns", " ", "any", " ", 
       "untranslated", " ", "codons", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
         "because", " ", "they", " ", "have", " ", "some", " ", "kind", " ", 
          "of", " ", "undefined", " ", "degeneracy"}], ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"into", " ", "?"}], "'"}], "s"}]}]}]}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "I", " ", "am", " ", "using", " ", "three", " ", "criteria", " ", "to",
         " ", "determine", " ", "the", " ", "reading", " ", "frame", " ", 
        "of", " ", "the", " ", 
        RowBox[{"sequence", ".", "\[IndentingNewLine]", "1."}], " ", "The", 
        " ", "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the",
         " ", "number", " ", "of", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "2."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "creates", " ", "the", 
        " ", "largest", " ", "gap", " ", "without", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "3."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the", 
        " ", "number", " ", "of", " ", "stop", " ", "codons", " ", "in", " ", 
        "the", " ", "middle", " ", "of", " ", "the", " ", 
        RowBox[{
        "read", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "Criteria"}], " ", "3", " ", "is", " ", "the", " ", "tie", " ", 
        "breaking", " ", 
        RowBox[{"criterion", ".", " ", "The"}], " ", "rationale", " ", "is", 
        " ", "that", " ", "a", " ", "read", " ", "or", " ", "transcript", " ",
         "should", " ", "be", " ", "dirty", " ", "on", " ", "the", " ", "end",
         " ", "and", " ", "we", " ", "would", " ", "expect", " ", "stop", " ",
         "codons", " ", "there", " ", "because", " ", "these", " ", "are", 
        " ", "introns"}], ",", " ", 
       RowBox[{"or", " ", "dirty", " ", 
        RowBox[{"data", "."}]}]}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"numStops", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stopPoss", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", "#", "]"}], "&"}], "/@", 
               RowBox[{"StringPosition", "[", 
                RowBox[{"#", ",", "\"\<*\>\""}], "]"}]}], ")"}], ",", " ", 
             "0", ",", " ", 
             RowBox[{"StringLength", "[", "#", "]"}]}], "}"}], "]"}], "//", 
          "Sort"}], ")"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"distances", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Differences", "[", "#", "]"}], "&"}], "/@", "#"}], "&"}], 
        "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", " ", "2"}], "]"}], ")"}], "&"}], "/@", 
          "stopPoss"}], ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxDistance", "=", 
      RowBox[{"Max", "/@", "distances"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numstopsMiddle", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"StringDrop", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"#", ",", "10"}], "]"}], ",", 
            RowBox[{"-", "10"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}], ")"}]}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"crit1", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numStops", ",", " ", 
         RowBox[{"numStops", "//", "Min"}]}], "]"}], "//", "Flatten"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"crit2", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"maxDistance", ",", " ", 
         RowBox[{"maxDistance", "//", "Max"}]}], "]"}], "//", "Flatten"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"crit3", " ", "=", " ", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numstopsMiddle", ",", " ", 
         RowBox[{"numstopsMiddle", "//", "Min"}]}], "]"}], "//", 
       "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "this", " ", "part", " ", "actually", " ", "makes", " ", "the", " ", 
        "decision", " ", "of", " ", "which", " ", "criteria", " ", 
        RowBox[{"wins", ".", " ", "It"}], " ", "is", " ", "unfinished", " ", 
        "because", " ", "it", " ", 
        RowBox[{"doesn", "'"}], "t", " ", "say", " ", "what", " ", "to", " ", 
        "do", " ", "if", " ", "there", " ", "is", " ", "a", " ", "tie"}], ",",
        " ", 
       RowBox[{"which", " ", "is", " ", "possible"}], ",", " ", 
       RowBox[{"although", " ", 
        RowBox[{"unlikely", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Which", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"c", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], 
               "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"c", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"c", "//", "Length"}], ")"}], "\[NotEqual]", " ", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", "c"}], ";", " ", 
          RowBox[{"Print", "[", "\"\<Criteria ambiguous.\>\"", "]"}]}]}], 
        RowBox[{"(*", 
         RowBox[{
         "throw", " ", "to", " ", "a", " ", "script", " ", "that", " ", 
          "makes", " ", "more", " ", "than", " ", "one", " ", "sequence"}], 
         "*)"}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"print", " ", "a", " ", "single", " ", "output"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "note", " ", "that", " ", "if", " ", "a", " ", "nucleotide", " ", 
          "sequence", " ", "has", " ", "an", " ", "ambiguity", " ", 
          RowBox[{"(", "N", ")"}], " ", "it", " ", "could", " ", "be", " ", 
          "that", " ", "there", " ", "is", " ", "a", " ", "frame", " ", 
          "shift", " ", "within", " ", "the", " ", 
          RowBox[{"sequence", ".", " ", "We"}], " ", "could", " ", "account", 
          " ", "for", " ", "this", " ", "by", " ", "duplicating", " ", "the", 
          " ", "original", " ", "sequence", " ", "by", " ", "replacing", " ", 
          "all", " ", "the", " ", 
          RowBox[{"\"\<N\>\"", "'"}], "s", " ", "with", " ", 
          RowBox[{"\"\<NN\>\"", "'"}], "s", " ", "or", " ", 
          RowBox[{"\"\<\>\"", "'"}], 
          RowBox[{"s", ".", " ", "I"}], " ", "looked", " ", "in", " ", "the", 
          " ", "transcriptome", " ", "files", " ", "and", " ", "this", " ", 
          "seems", " ", "to", " ", "be", " ", "a", " ", "very", " ", "rare", 
          " ", "case"}], ",", " ", 
         RowBox[{
         "so", " ", "I", " ", "am", " ", "not", " ", "adding", " ", "it", " ", 
          RowBox[{"now", ".", " ", "It"}], " ", "might", " ", "be", " ", "an",
           " ", "issue", " ", "witht", " ", "eh", " ", "AHE", " ", "files", 
          " ", "or", " ", "different", " ", "data", " ", "types"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"translation", "//", "StringJoin"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn3Frames", "[", 
          RowBox[{"[", 
           RowBox[{"crit1", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"which", " ", "condition", " ", "1"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn3Frames", "[", 
          RowBox[{"[", 
           RowBox[{"crit2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"d", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}]}],
            ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn3Frames", "[", 
          RowBox[{"[", 
           RowBox[{"d", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "further", " ", "criteria"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"crit4", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numStops", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numStops", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit5", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"maxDistance", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"maxDistance", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Max"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit6", "=", " ", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numstopsMiddle", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numstopsMiddle", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";"}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"crit4", ",", " ", "crit5", ",", " ", "crit6"}], 
              "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}]}], 
       ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn3Frames", "[", 
          RowBox[{"[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "another", " ", "criteria", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "this", " ", "one", " ", "depends", " ", "on", " ", "giving", " ", 
            "scores", " ", "based", " ", "on", " ", "ranks"}], ",", " ", 
           RowBox[{
           "and", " ", "the", " ", "one", " ", "with", " ", "the", " ", 
            "lowest", " ", "score"}], ",", " ", 
           RowBox[{"wins", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"scores1", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{
                   RowBox[{"numStops", "//", "Sort"}], ",", " ", "#"}], "]"}],
                  "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "numStops"}], 
              ")"}], "//", "Flatten"}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores2", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"maxDistance", "//", "Sort"}], "//", "Reverse"}], 
                  ",", " ", "#"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "maxDistance"}], 
             ")"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores3", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"numstopsMiddle", "//", "Sort"}], ",", " ", "#"}], 
                 "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
              "numstopsMiddle"}], ")"}], "//", "Flatten"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tally", "=", 
           RowBox[{"scores1", "+", "scores2", "+", "scores3"}]}], ";"}], 
         ")"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Position", "[", 
              RowBox[{"tally", ",", " ", 
               RowBox[{"Min", "[", "tally", "]"}]}], "]"}]}], ")"}], "//", 
           "Length"}], ")"}], "\[Equal]", "1"}]}], ",", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{"transLateIn3Frames", "[", 
          RowBox[{"[", 
           RowBox[{"c", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"another", " ", 
          RowBox[{"criteria", ":", " ", 
           RowBox[{
           "this", " ", "one", " ", "will", " ", "pick", " ", "randomly", " ",
             "from", " ", "among", " ", "some", " ", "of", " ", "the", " ", 
            "best", " ", 
            RowBox[{"options", ".", " ", "At"}], " ", "this", " ", 
            "point"}]}]}], ",", " ", 
         RowBox[{
         "we", " ", "have", " ", "eliminated", " ", "the", " ", "vast", " ", 
          "majority", " ", "of", " ", 
          RowBox[{"sequences", ".", " ", "Now"}]}], ",", " ", 
         RowBox[{
         "we", " ", "are", " ", "only", " ", "dealing", " ", "with", " ", 
          "very", " ", "rare", " ", "cases"}], ",", " ", 
         RowBox[{
         "so", " ", "choosing", " ", "randomly", " ", "among", " ", "a", " ", 
          "set", " ", "of", " ", "possible", " ", "options", " ", 
          RowBox[{"isn", "'"}], "t", " ", "such", " ", "a", " ", "bad", " ", 
          RowBox[{"idea", ".", " ", "The"}], " ", "bad", " ", "ones", " ", 
          "should", " ", "be", " ", "eliminated", " ", "in", " ", "masking", 
          " ", "phase", " ", "anyway"}]}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"1", "\[Equal]", "1"}], " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"will", " ", "always", " ", "be", " ", "true"}], "..."}], 
        "*)"}], ",", " ", 
       RowBox[{"translation", "=", 
        RowBox[{"transLateIn3Frames", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{
            RowBox[{"Append", "[", 
             RowBox[{
              RowBox[{"Intersection", "[", 
               RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}],
               ",", " ", "crit2"}], "]"}], "//", "Flatten"}], "//", 
           "RandomChoice"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "]"}], ";", " ", "\[IndentingNewLine]", 
     RowBox[{"translation", "//", "StringJoin"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.721977637093128*^9, 3.721977697030266*^9}, {
   3.7219777274079385`*^9, 3.721977968818316*^9}, {3.721978047821655*^9, 
   3.7219781636014023`*^9}, 3.7219781974233055`*^9, {3.721978482718737*^9, 
   3.721978499204916*^9}, {3.721981723149268*^9, 3.7219817528573008`*^9}, {
   3.7219817837459664`*^9, 3.721981797319458*^9}, {3.721981842017214*^9, 
   3.721981917337189*^9}, {3.7219846743041496`*^9, 3.721984857488023*^9}, {
   3.721985742452217*^9, 3.721985753706478*^9}, {3.7219862571959486`*^9, 
   3.7219863044993525`*^9}, {3.721986463739582*^9, 3.721986620513022*^9}, {
   3.7219866601809807`*^9, 3.7219866698806314`*^9}, 3.721986714148181*^9, {
   3.72198693440825*^9, 3.7219869367865543`*^9}, {3.721986978168607*^9, 
   3.7219870556651134`*^9}, {3.721987107072499*^9, 3.721987111019472*^9}, {
   3.7219871665848417`*^9, 3.7219872369433775`*^9}, {3.7219872880120564`*^9, 
   3.7219873331819377`*^9}, {3.7219873727491255`*^9, 
   3.7219873909038043`*^9}, {3.7229293826233854`*^9, 
   3.7229294868435555`*^9}, {3.722929536842176*^9, 3.7229295395756707`*^9}, {
   3.7229296103532953`*^9, 3.7229296106873355`*^9}, {3.7229311547139015`*^9, 
   3.7229311554415092`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Count stop-codons", "Subsection",
 CellChangeTimes->{{3.725005165680743*^9, 3.725005177404461*^9}}],

Cell["\<\
The functions here use the code from the translation functions.\
\>", "Text",
 CellChangeTimes->{{3.7250051920289817`*^9, 3.7250052077847104`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countStopCodonsInFile", "[", "fileName_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Total", "[", 
     RowBox[{"Min", "/@", 
      RowBox[{"(", 
       RowBox[{"countStopCodonInAlignment", "[", 
        RowBox[{"importAlignment", "[", "fileName", "]"}], "]"}], ")"}]}], 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.725005289767441*^9, 3.725005312055339*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countStopCodonInAlignment", "[", "fastaParsed_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"countStopCodonInSequence", "[", "#", "]"}], "&"}], "/@", 
     RowBox[{"fastaParsed", "[", 
      RowBox[{"[", 
       RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.725005062515759*^9, 3.725005113017432*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countStopCodonInSequence", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", " ", "c", ",", "d", ",", " ", "transLateIn3Frames", ",", 
      "numStops", ",", "stopPoss", ",", "distances", ",", "maxDistance", ",", 
      "numstopsMiddle", ",", " ", "crit1", ",", " ", "crit2", ",", " ", 
      "crit3", ",", "crit4", ",", "crit5", ",", " ", "crit6", ",", " ", 
      "crit7", ",", " ", "crit8", ",", " ", "crit9", ",", "translation", ",", 
      " ", "scores1", ",", " ", "scores2", ",", " ", "scores3", ",", " ", 
      "tally"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "translate", " ", "in", " ", "6", " ", "standard", " ", "reading", " ", 
      "frames"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringPartition", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"sequence", "//", "ToUpperCase"}], ",", "#"}], "]"}], 
           ",", " ", "3"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"b", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"sequence", "//", "ToUpperCase"}], "//", "revComp"}], 
               ",", "#"}], "]"}], ",", " ", "3"}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";",
        " ", 
       RowBox[{
       "Commentted", " ", "out", " ", "because", " ", "this", " ", "was", " ",
         "the", " ", "reverse", " ", "complement", " ", "section"}]}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", " ", "1"}], "]"}], "/.", 
       StyleBox["replaceTableStd",
        FontVariations->{"Underline"->True}]}]}], 
     StyleBox[";",
      FontVariations->{"Underline"->True}], "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"transLateIn3Frames", "/.", 
         RowBox[{
          RowBox[{"x_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"StringLength", "[", "x", "]"}], ">", "2"}], ")"}]}], 
          "\[Rule]", "\"\<?\>\""}]}], ")"}], "//", "Quiet"}]}], ";", " ", 
     "\[IndentingNewLine]", 
     RowBox[{"numStops", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}]}], ";", 
     "\[IndentingNewLine]", "numStops"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7250049848016396`*^9, 3.7250050510840263`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Exporting alignments by codon position", "Subsection",
 CellChangeTimes->{{3.7229457776119213`*^9, 3.722945831694679*^9}}],

Cell[TextData[{
 "This function takes advantage of the AA translation scripts to determine \
reading frame. This version however, requires that sequences have been \
prealigned and are all in the same reading direction (i.e. not reverse \
complemented).\n",
 StyleBox["alignmentFile",
  FontWeight->"Bold"],
 " = alignment file name\n",
 StyleBox["codonsYouWantList",
  FontWeight->"Bold"],
 " = list of integers giving what codons you want in the exported alignment \n\
",
 StyleBox["exportName",
  FontWeight->"Bold"],
 " = the name of the file to export."
}], "Text",
 CellChangeTimes->{{3.722945791896907*^9, 3.722945796585376*^9}, {
  3.7229458364423037`*^9, 3.72294588537647*^9}, {3.722948991178375*^9, 
  3.722949030145952*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeCodonReadAlignment", "[", 
   RowBox[{
   "alignmentFile_", ",", "codonsYouWantList_", ",", " ", "exportName_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "aaa", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Export", "[", 
     RowBox[{"exportName", ",", " ", 
      RowBox[{
       RowBox[{"codonExtract", "[", 
        RowBox[{
         RowBox[{"aaa", "=", 
          RowBox[{"alignmentFile", "//", "importAlignment"}]}], ",", 
         "codonsYouWantList", ",", " ", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"readingFrame", "/@", 
               RowBox[{"aaa", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ")"}], "//", 
             "Commonest"}], ")"}], "[", 
           RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], " ", "]"}], "//", 
       "fastaOutput"}], ",", " ", "\"\<Text\>\""}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7229487657422323`*^9, 3.722948895255321*^9}, 
   3.7256106841344175`*^9}],

Cell["\<\
Dependency script that determines the reading frame through a modified \
version of the AA translation code.\
\>", "Text",
 CellChangeTimes->{{3.72294741034615*^9, 3.7229474359341927`*^9}, {
  3.725610714692844*^9, 3.725610714839921*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"readingFrame", "[", "sequence_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "a", ",", " ", "c", ",", "d", ",", " ", "transLateIn3Frames", ",", 
      "numStops", ",", "stopPoss", ",", "distances", ",", "maxDistance", ",", 
      "numstopsMiddle", ",", " ", "crit1", ",", " ", "crit2", ",", " ", 
      "crit3", ",", "crit4", ",", "crit5", ",", " ", "crit6", ",", " ", 
      "crit7", ",", " ", "crit8", ",", " ", "crit9", ",", "translation", ",", 
      " ", "scores1", ",", " ", "scores2", ",", " ", "scores3", ",", " ", 
      "tally"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "translate", " ", "in", " ", "6", " ", "standard", " ", "reading", " ", 
      "frames"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"a", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"StringPartition", "[", 
          RowBox[{
           RowBox[{"StringDrop", "[", 
            RowBox[{
             RowBox[{"sequence", "//", "ToUpperCase"}], ",", "#"}], "]"}], 
           ",", " ", "3"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"b", "=", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringPartition", "[", 
            RowBox[{
             RowBox[{"StringDrop", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"sequence", "//", "ToUpperCase"}], "//", "revComp"}], 
               ",", "#"}], "]"}], ",", " ", "3"}], "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{"0", ",", " ", "1", ",", " ", "2"}], "}"}]}], ")"}]}], ";",
        " ", 
       RowBox[{
       "Commentted", " ", "out", " ", "because", " ", "this", " ", "was", " ",
         "the", " ", "reverse", " ", "complement", " ", "section"}]}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"{", "a", "}"}], ",", " ", "1"}], "]"}], "/.", 
       StyleBox["replaceTableStd",
        FontVariations->{"Underline"->True}]}]}], 
     StyleBox[";",
      FontVariations->{"Underline"->True}], "\[IndentingNewLine]", 
     RowBox[{"transLateIn3Frames", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"transLateIn3Frames", "/.", 
         RowBox[{
          RowBox[{"x_", "/;", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"StringLength", "[", "x", "]"}], ">", "2"}], ")"}]}], 
          "\[Rule]", "\"\<?\>\""}]}], ")"}], "//", "Quiet"}]}], ";", " ", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "line", " ", "just", " ", "turns", " ", "any", " ", 
       "untranslated", " ", "codons", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
         "because", " ", "they", " ", "have", " ", "some", " ", "kind", " ", 
          "of", " ", "undefined", " ", "degeneracy"}], ",", " ", 
         RowBox[{
          RowBox[{
           RowBox[{"into", " ", "?"}], "'"}], "s"}]}]}]}], "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "I", " ", "am", " ", "using", " ", "three", " ", "criteria", " ", "to",
         " ", "determine", " ", "the", " ", "reading", " ", "frame", " ", 
        "of", " ", "the", " ", 
        RowBox[{"sequence", ".", "\[IndentingNewLine]", "1."}], " ", "The", 
        " ", "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the",
         " ", "number", " ", "of", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "2."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "creates", " ", "the", 
        " ", "largest", " ", "gap", " ", "without", " ", "stop", " ", 
        RowBox[{"codons", ".", "\[IndentingNewLine]", "3."}], " ", "The", " ",
         "reading", " ", "frame", " ", "that", " ", "reduces", " ", "the", 
        " ", "number", " ", "of", " ", "stop", " ", "codons", " ", "in", " ", 
        "the", " ", "middle", " ", "of", " ", "the", " ", 
        RowBox[{
        "read", ".", "\[IndentingNewLine]", "\[IndentingNewLine]", 
         "Criteria"}], " ", "3", " ", "is", " ", "the", " ", "tie", " ", 
        "breaking", " ", 
        RowBox[{"criterion", ".", " ", "The"}], " ", "rationale", " ", "is", 
        " ", "that", " ", "a", " ", "read", " ", "or", " ", "transcript", " ",
         "should", " ", "be", " ", "dirty", " ", "on", " ", "the", " ", "end",
         " ", "and", " ", "we", " ", "would", " ", "expect", " ", "stop", " ",
         "codons", " ", "there", " ", "because", " ", "these", " ", "are", 
        " ", "introns"}], ",", " ", 
       RowBox[{"or", " ", "dirty", " ", 
        RowBox[{"data", "."}]}]}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"numStops", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stopPoss", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Flatten", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Union", "[", "#", "]"}], "&"}], "/@", 
               RowBox[{"StringPosition", "[", 
                RowBox[{"#", ",", "\"\<*\>\""}], "]"}]}], ")"}], ",", " ", 
             "0", ",", " ", 
             RowBox[{"StringLength", "[", "#", "]"}]}], "}"}], "]"}], "//", 
          "Sort"}], ")"}], "&"}], "/@", 
       RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"distances", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Differences", "[", "#", "]"}], "&"}], "/@", "#"}], "&"}], 
        "/@", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", " ", "2"}], "]"}], ")"}], "&"}], "/@", 
          "stopPoss"}], ")"}]}], ")"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxDistance", "=", 
      RowBox[{"Max", "/@", "distances"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numstopsMiddle", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringCount", "[", 
         RowBox[{"#", ",", "\"\<*\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"StringDrop", "[", 
           RowBox[{
            RowBox[{"StringDrop", "[", 
             RowBox[{"#", ",", "10"}], "]"}], ",", 
            RowBox[{"-", "10"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringJoin", "/@", "transLateIn3Frames"}]}], ")"}]}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"crit1", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numStops", ",", " ", 
         RowBox[{"numStops", "//", "Min"}]}], "]"}], "//", "Flatten"}]}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"crit2", "=", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"maxDistance", ",", " ", 
         RowBox[{"maxDistance", "//", "Max"}]}], "]"}], "//", "Flatten"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"crit3", " ", "=", " ", 
      RowBox[{
       RowBox[{"Position", "[", 
        RowBox[{"numstopsMiddle", ",", " ", 
         RowBox[{"numstopsMiddle", "//", "Min"}]}], "]"}], "//", 
       "Flatten"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "this", " ", "part", " ", "actually", " ", "makes", " ", "the", " ", 
        "decision", " ", "of", " ", "which", " ", "criteria", " ", 
        RowBox[{"wins", ".", " ", "It"}], " ", "is", " ", "unfinished", " ", 
        "because", " ", "it", " ", 
        RowBox[{"doesn", "'"}], "t", " ", "say", " ", "what", " ", "to", " ", 
        "do", " ", "if", " ", "there", " ", "is", " ", "a", " ", "tie"}], ",",
        " ", 
       RowBox[{"which", " ", "is", " ", "possible"}], ",", " ", 
       RowBox[{"although", " ", 
        RowBox[{"unlikely", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"Which", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit1", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"crit2", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"c", "=", 
              RowBox[{"Intersection", "[", 
               RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], 
               "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", 
           RowBox[{"transLateIn6Frames", "[", 
            RowBox[{"[", 
             RowBox[{"c", "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"c", "//", "Length"}], ")"}], "\[NotEqual]", " ", "1"}], 
         ",", 
         RowBox[{
          RowBox[{"translation", "=", "c"}], ";", " ", 
          RowBox[{"Print", "[", "\"\<Criteria ambiguous.\>\"", "]"}]}]}], 
        RowBox[{"(*", 
         RowBox[{
         "throw", " ", "to", " ", "a", " ", "script", " ", "that", " ", 
          "makes", " ", "more", " ", "than", " ", "one", " ", "sequence"}], 
         "*)"}], "\[IndentingNewLine]", "]"}], ";", " ", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"print", " ", "a", " ", "single", " ", "output"}], "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "note", " ", "that", " ", "if", " ", "a", " ", "nucleotide", " ", 
          "sequence", " ", "has", " ", "an", " ", "ambiguity", " ", 
          RowBox[{"(", "N", ")"}], " ", "it", " ", "could", " ", "be", " ", 
          "that", " ", "there", " ", "is", " ", "a", " ", "frame", " ", 
          "shift", " ", "within", " ", "the", " ", 
          RowBox[{"sequence", ".", " ", "We"}], " ", "could", " ", "account", 
          " ", "for", " ", "this", " ", "by", " ", "duplicating", " ", "the", 
          " ", "original", " ", "sequence", " ", "by", " ", "replacing", " ", 
          "all", " ", "the", " ", 
          RowBox[{"\"\<N\>\"", "'"}], "s", " ", "with", " ", 
          RowBox[{"\"\<NN\>\"", "'"}], "s", " ", "or", " ", 
          RowBox[{"\"\<\>\"", "'"}], 
          RowBox[{"s", ".", " ", "I"}], " ", "looked", " ", "in", " ", "the", 
          " ", "transcriptome", " ", "files", " ", "and", " ", "this", " ", 
          "seems", " ", "to", " ", "be", " ", "a", " ", "very", " ", "rare", 
          " ", "case"}], ",", " ", 
         RowBox[{
         "so", " ", "I", " ", "am", " ", "not", " ", "adding", " ", "it", " ", 
          RowBox[{"now", ".", " ", "It"}], " ", "might", " ", "be", " ", "an",
           " ", "issue", " ", "witht", " ", "eh", " ", "AHE", " ", "files", 
          " ", "or", " ", "different", " ", "data", " ", "types"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"translation", "//", "StringJoin"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Which", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"crit1", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"whichOne", "=", 
         RowBox[{"crit1", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"which", " ", "condition", " ", "1"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"crit3", "\[Equal]", "crit2"}], ",", 
       RowBox[{
        RowBox[{"whichOne", "=", 
         RowBox[{"crit2", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "2"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"d", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}]}],
            ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}], ",", 
       RowBox[{
        RowBox[{"whichOne", "=", 
         RowBox[{"d", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "3"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "further", " ", "criteria"}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"crit4", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numStops", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numStops", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit5", "=", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"maxDistance", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"maxDistance", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Max"}]}], 
             "]"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"crit6", "=", " ", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"numstopsMiddle", "[", 
               RowBox[{"[", 
                RowBox[{"1", ";;", "3"}], "]"}], "]"}], ",", " ", 
              RowBox[{
               RowBox[{"numstopsMiddle", "[", 
                RowBox[{"[", 
                 RowBox[{"1", ";;", "3"}], "]"}], "]"}], "//", "Min"}]}], 
             "]"}], "//", "Flatten"}]}], ";"}], ")"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Intersection", "[", 
              RowBox[{"crit4", ",", " ", "crit5", ",", " ", "crit6"}], 
              "]"}]}], ")"}], "//", "Length"}], ")"}], "\[Equal]", "1"}]}], 
       ",", 
       RowBox[{
        RowBox[{"whichOne", "=", 
         RowBox[{"c", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "4"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"Calculate", " ", "another", " ", "criteria", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
           "this", " ", "one", " ", "depends", " ", "on", " ", "giving", " ", 
            "scores", " ", "based", " ", "on", " ", "ranks"}], ",", " ", 
           RowBox[{
           "and", " ", "the", " ", "one", " ", "with", " ", "the", " ", 
            "lowest", " ", "score"}], ",", " ", 
           RowBox[{"wins", "."}]}]}]}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"scores1", "=", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"Position", "[", 
                  RowBox[{
                   RowBox[{"numStops", "//", "Sort"}], ",", " ", "#"}], "]"}],
                  "[", 
                 RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "numStops"}], 
              ")"}], "//", "Flatten"}], ")"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores2", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"maxDistance", "//", "Sort"}], "//", "Reverse"}], 
                  ",", " ", "#"}], "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "maxDistance"}], 
             ")"}], "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"scores3", "=", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{
                RowBox[{"Position", "[", 
                 RowBox[{
                  RowBox[{"numstopsMiddle", "//", "Sort"}], ",", " ", "#"}], 
                 "]"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", 
              "numstopsMiddle"}], ")"}], "//", "Flatten"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"tally", "=", 
           RowBox[{"scores1", "+", "scores2", "+", "scores3"}]}], ";"}], 
         ")"}], ";", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"c", "=", 
             RowBox[{"Position", "[", 
              RowBox[{"tally", ",", " ", 
               RowBox[{"Min", "[", "tally", "]"}]}], "]"}]}], ")"}], "//", 
           "Length"}], ")"}], "\[Equal]", "1"}]}], ",", 
       RowBox[{
        RowBox[{"whichOne", "=", 
         RowBox[{"c", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", " ", 
       RowBox[{"(*", 
        RowBox[{"condition", " ", "6"}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"another", " ", 
          RowBox[{"criteria", ":", " ", 
           RowBox[{
           "this", " ", "one", " ", "will", " ", "pick", " ", "randomly", " ",
             "from", " ", "among", " ", "some", " ", "of", " ", "the", " ", 
            "best", " ", 
            RowBox[{"options", ".", " ", "At"}], " ", "this", " ", 
            "point"}]}]}], ",", " ", 
         RowBox[{
         "we", " ", "have", " ", "eliminated", " ", "the", " ", "vast", " ", 
          "majority", " ", "of", " ", 
          RowBox[{"sequences", ".", " ", "Now"}]}], ",", " ", 
         RowBox[{
         "we", " ", "are", " ", "only", " ", "dealing", " ", "with", " ", 
          "very", " ", "rare", " ", "cases"}], ",", " ", 
         RowBox[{
         "so", " ", "choosing", " ", "randomly", " ", "among", " ", "a", " ", 
          "set", " ", "of", " ", "possible", " ", "options", " ", 
          RowBox[{"isn", "'"}], "t", " ", "such", " ", "a", " ", "bad", " ", 
          RowBox[{"idea", ".", " ", "The"}], " ", "bad", " ", "ones", " ", 
          "should", " ", "be", " ", "eliminated", " ", "in", " ", "masking", 
          " ", "phase", " ", "anyway"}]}], "*)"}], "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"1", "\[Equal]", "1"}], " ", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"will", " ", "always", " ", "be", " ", "true"}], "..."}], 
        "*)"}], ",", " ", 
       RowBox[{
        RowBox[{"translation", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"Append", "[", 
            RowBox[{
             RowBox[{"Intersection", "[", 
              RowBox[{"crit1", ",", " ", "crit2", ",", " ", "crit3"}], "]"}], 
             ",", " ", "crit2"}], "]"}], "//", "Flatten"}], "//", 
          "RandomChoice"}]}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", " ",
      "\[IndentingNewLine]", 
     RowBox[{"whichOne", "-", "1"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.721977637093128*^9, 3.721977697030266*^9}, {
   3.7219777274079385`*^9, 3.721977968818316*^9}, {3.721978047821655*^9, 
   3.7219781636014023`*^9}, 3.7219781974233055`*^9, {3.721978482718737*^9, 
   3.721978499204916*^9}, {3.721981723149268*^9, 3.7219817528573008`*^9}, {
   3.7219817837459664`*^9, 3.721981797319458*^9}, {3.721981842017214*^9, 
   3.721981917337189*^9}, {3.7219846743041496`*^9, 3.721984857488023*^9}, {
   3.721985742452217*^9, 3.721985753706478*^9}, {3.7219862571959486`*^9, 
   3.7219863044993525`*^9}, {3.721986463739582*^9, 3.721986620513022*^9}, {
   3.7219866601809807`*^9, 3.7219866698806314`*^9}, 3.721986714148181*^9, {
   3.72198693440825*^9, 3.7219869367865543`*^9}, {3.721986978168607*^9, 
   3.7219870556651134`*^9}, {3.721987107072499*^9, 3.721987111019472*^9}, {
   3.7219871665848417`*^9, 3.7219872369433775`*^9}, {3.7219872880120564`*^9, 
   3.7219873331819377`*^9}, {3.7219873727491255`*^9, 
   3.7219873909038043`*^9}, {3.7229293826233854`*^9, 
   3.7229294868435555`*^9}, {3.722929536842176*^9, 3.7229295395756707`*^9}, {
   3.7229296103532953`*^9, 3.7229296106873355`*^9}, {3.7229311547139015`*^9, 
   3.7229311554415092`*^9}, {3.7229459866215224`*^9, 3.7229460384503756`*^9}, 
   3.7229465540289664`*^9, 3.722946628832919*^9, {3.722946831072528*^9, 
   3.7229469954710217`*^9}, {3.7229473327231984`*^9, 3.722947348591443*^9}, 
   3.7229473949366627`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Calculating other stats for an alignment", "Subchapter",
 CellChangeTimes->{{3.725263670865935*^9, 3.725263683047699*^9}, {
  3.725466126853961*^9, 3.72546612737016*^9}},
 Background->RGBColor[1, 1, 0.85]],

Cell[CellGroupData[{

Cell["Counting number of taxa in a certain group (e.g. outgroups)", \
"Subsection",
 CellChangeTimes->{{3.725263697645243*^9, 3.725263717210066*^9}}],

Cell["\<\
The function below counts the number of taxa in a specified list are present \
in a list of taxa.\
\>", "Text",
 CellChangeTimes->{{3.7252691848205767`*^9, 3.725269217920274*^9}}],

Cell[TextData[{
 "Parameters are:\n",
 StyleBox["fasta",
  FontWeight->"Bold"],
 " - is either a fastaParsed object or an alignment/sequence file.\n",
 StyleBox["listOfTaxa",
  FontWeight->"Bold"],
 " - is a list of strings EXACTLY matching the list of strings (e.g. taxon \
names) you want to count in the file.\n",
 StyleBox["headerPos",
  FontWeight->"Bold"],
 " - is the position in the fasta header you should look for the above list \
of strings."
}], "Text",
 CellChangeTimes->{{3.725269221330524*^9, 3.7252693733696957`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countTaxa", "[", 
   RowBox[{"fasta_List", ",", " ", "listOfTaxa_", ",", " ", "headerPos_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Intersection", "[", 
      RowBox[{"listOfTaxa", ",", " ", 
       RowBox[{"fasta", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "1", ",", " ", "headerPos"}], "]"}], 
        "]"}]}], "   ", "]"}], "//", "Length"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7252680750635195`*^9, 3.725268143571779*^9}, {
  3.725268222554569*^9, 3.725268299921367*^9}, {3.725269072298567*^9, 
  3.7252691208909216`*^9}, {3.725269558615982*^9, 3.7252695595167966`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"countTaxa", "[", 
   RowBox[{"fasta_String", ",", " ", "listOfTaxa_", ",", " ", "headerPos_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "align", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{"fasta", "//", "importAlignment"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"fasta", ",", 
       RowBox[{
        RowBox[{"Intersection", "[", 
         RowBox[{"listOfTaxa", ",", " ", 
          RowBox[{"align", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1", ",", " ", "headerPos"}], "]"}], 
           "]"}]}], "   ", "]"}], "//", "Length"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7252691178100586`*^9, 3.725269179620652*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["XXFinding and counting alignment regionsXX", "Subsection",
 CellChangeTimes->{{3.7252637245468864`*^9, 3.72526372880579*^9}, {
  3.72535906667306*^9, 3.725359074182681*^9}}],

Cell[TextData[{
 "This function uses a ",
 Cell[BoxData[
  ButtonBox["SquaredEuclideanDistance",
   BaseStyle->"Link",
   ButtonData->"paclet:ref/SquaredEuclideanDistance"]],
  GridBoxOptions->{
  GridBoxBackground->{
   "Columns" -> {{None}}, "ColumnsIndexed" -> {}, "Rows" -> {None, None, None, 
      Dynamic[
       If[CurrentValue[{TaggingRules, "ModificationHighlight"}] === True, 
        RGBColor[1, 0.988235, 0.721569], None]], {None}}, "RowsIndexed" -> {}},
  GridBoxDividers->{"Rows" -> {{True, True, True, True, True, True}}}}],
 " function to split the alignment into clusters horizontally and counts how \
many regions it splits it into."
}], "Text",
 CellChangeTimes->{{3.725275081635579*^9, 3.7252751333624554`*^9}, {
   3.725275191539818*^9, 3.725275206166751*^9}, 3.725275274844574*^9}],

Cell["\<\
NOTE: That this function gives results that are not representative of what it \
is supposed to measure. DONOT use this function as written now 18 Jan 2018.\
\>", "Text",
 CellChangeTimes->{{3.7252930808327074`*^9, 3.7252931163294544`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "SetDirectory", "[", 
    "\"\<F:\\\\Dropbox\\\\Projects\\\\Phylogeny of \
Blaberoidea\\\\Alignments\\\\Ready to merge alignments Jan 2018\>\"", "]"}], 
   ";", "\[IndentingNewLine]", 
   RowBox[{"fn", "=", 
    RowBox[{"Drop", "[", 
     RowBox[{
      RowBox[{"FileNames", "[", "]"}], ",", " ", "5"}], "]"}]}], ";"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7252890516428328`*^9, 3.7252891040583906`*^9}, 
   3.725293076602189*^9}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"clusters", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"findAlignmentClusters", "[", "#", "]"}], "&"}], "/@", "fn"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.725275307169014*^9, 3.7252753167380514`*^9}, {
   3.7252753880226574`*^9, 3.725275389796948*^9}, {3.7252891076690836`*^9, 
   3.725289113789695*^9}, 3.7252930740089293`*^9}],

Cell[TextData[{
 StyleBox["Input is:",
  FontVariations->{"Underline"->True}],
 "\neither an alignment ",
 StyleBox["fileName",
  FontWeight->"Bold"],
 " or a ",
 StyleBox["fasta ",
  FontWeight->"Bold"],
 "parsed list."
}], "Text",
 CellChangeTimes->{{3.7252752086360855`*^9, 3.725275248288519*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findAlignmentClusters", "[", "fileName_List", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "binarizeNucs", ",", "binarizeNucs2", ",", " ", "binarizeNucs3", ",", 
      "binaryMat", ",", "out"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"binarizeNucs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Replace", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], ",", " ", 
              RowBox[{"\"\<t\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<c\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<g\>\"", "\[Rule]", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<A\>\"", "\[Rule]", "1"}], ",", " ", 
              RowBox[{"\"\<T\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<C\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<G\>\"", "\[Rule]", "1"}], ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<-\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<n\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<N\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<?\>\"", "\[Rule]", "0"}]}], "\[IndentingNewLine]", 
             "}"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringPartition", "[", 
          RowBox[{"#", ",", " ", "1"}], "]"}]}], "&"}], "/@", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"fileName", "//", "importAlignment"}], ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "section", " ", "should", " ", "delete", " ", "empty", " ",
        "rows", " ", "and", " ", "columns"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"binarizeNucs2", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "//", "Total"}], ")"}], ">", "9"}], ",", " ", "#",
              ",", " ", "Null"}], "]"}], "&"}], "/@", "binarizeNucs"}], ",", 
         " ", "Null"}], "]"}]}], ")"}], ";", "\[IndentingNewLine]", 
     RowBox[{"binarizeNucs3", "=", 
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "//", "Total"}], ")"}], ">", "9"}], ",", " ", "#",
              ",", " ", "Null"}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"binarizeNucs2", "//", "Transpose"}], ")"}]}], ",", " ", 
         "Null"}], "]"}], "//", "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "section", " ", "sorts", " ", "the", " ", "sequences", " ",
        "in", " ", "the", " ", "specified", " ", "direction"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"binaryMat", "=", 
        RowBox[{"(", 
         RowBox[{"Sort", "/@", 
          RowBox[{"(", 
           RowBox[{"binarizeNucs3", "//", "Transpose"}], ")"}]}], ")"}]}], 
       ")"}], "//", "MatrixForm"}], ";", "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"Colorize", "/@", 
       RowBox[{"FindClusters", "[", 
        RowBox[{"(", "binaryMat", ")"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"fileName", ",", " ", 
       RowBox[{"out", "//", "Length"}]}], "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.725269897808647*^9, 3.725270075990347*^9}, {
   3.7252701273159733`*^9, 3.7252703423063593`*^9}, {3.7252709168403378`*^9, 
   3.725271000642696*^9}, {3.7252713139127293`*^9, 3.7252713141574707`*^9}, {
   3.725271527522478*^9, 3.7252717388137345`*^9}, {3.7252718080244427`*^9, 
   3.7252718099178143`*^9}, {3.7252718533318386`*^9, 3.725271962392784*^9}, {
   3.7252720085200047`*^9, 3.725272103739668*^9}, {3.7252721492430925`*^9, 
   3.7252721886698875`*^9}, {3.725274722456723*^9, 3.7252747273890457`*^9}, {
   3.7252748250224476`*^9, 3.725275013101118*^9}, {3.7252750627614827`*^9, 
   3.7252750631187315`*^9}, {3.7252754186277113`*^9, 3.725275421116023*^9}, {
   3.725275554024542*^9, 3.7252755626444297`*^9}, 3.725275633414154*^9, {
   3.7252757317800665`*^9, 3.7252757370711713`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"findAlignmentClusters", "[", "fasta_List", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "binarizeNucs", ",", "binarizeNucs2", ",", " ", "binarizeNucs3", ",", 
      "binaryMat", ",", "out"}], " ", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"binarizeNucs", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Replace", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"\"\<a\>\"", "\[Rule]", "1"}], ",", " ", 
              RowBox[{"\"\<t\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<c\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<g\>\"", "\[Rule]", "1"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<A\>\"", "\[Rule]", "1"}], ",", " ", 
              RowBox[{"\"\<T\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<C\>\"", "\[Rule]", "1"}], ",", 
              RowBox[{"\"\<G\>\"", "\[Rule]", "1"}], ",", " ", 
              "\[IndentingNewLine]", 
              RowBox[{"\"\<-\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<n\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<N\>\"", "\[Rule]", "0"}], ",", 
              RowBox[{"\"\<?\>\"", "\[Rule]", "0"}]}], "\[IndentingNewLine]", 
             "}"}]}], "]"}], "&"}], "/@", 
         RowBox[{"StringPartition", "[", 
          RowBox[{"#", ",", " ", "1"}], "]"}]}], "&"}], "/@", 
       RowBox[{
        RowBox[{"(", "fasta", ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "section", " ", "should", " ", "delete", " ", "empty", " ",
        "rows", " ", "and", " ", "columns"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(", 
      RowBox[{"binarizeNucs2", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "//", "Total"}], ")"}], ">", "9"}], ",", " ", "#",
              ",", " ", "Null"}], "]"}], "&"}], "/@", "binarizeNucs"}], ",", 
         " ", "Null"}], "]"}]}], ")"}], ";", "\[IndentingNewLine]", 
     RowBox[{"binarizeNucs3", "=", 
      RowBox[{
       RowBox[{"DeleteCases", "[", 
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#", "//", "Total"}], ")"}], ">", "9"}], ",", " ", "#",
              ",", " ", "Null"}], "]"}], "&"}], "/@", 
          RowBox[{"(", 
           RowBox[{"binarizeNucs2", "//", "Transpose"}], ")"}]}], ",", " ", 
         "Null"}], "]"}], "//", "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "section", " ", "sorts", " ", "the", " ", "sequences", " ",
        "in", " ", "the", " ", "specified", " ", "direction"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"binaryMat", "=", 
        RowBox[{"(", 
         RowBox[{"Sort", "/@", 
          RowBox[{"(", 
           RowBox[{"binarizeNucs3", "//", "Transpose"}], ")"}]}], ")"}]}], 
       ")"}], "//", "MatrixForm"}], ";", "\[IndentingNewLine]", 
     RowBox[{"out", "=", 
      RowBox[{"Colorize", "/@", 
       RowBox[{"FindClusters", "[", 
        RowBox[{"(", "binaryMat", ")"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"out", "//", "Length"}], "}"}]}]}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.725269897808647*^9, 3.725270075990347*^9}, {
  3.7252701273159733`*^9, 3.7252703423063593`*^9}, {3.7252709168403378`*^9, 
  3.725271000642696*^9}, {3.7252713139127293`*^9, 3.7252713141574707`*^9}, {
  3.725271527522478*^9, 3.7252717388137345`*^9}, {3.7252718080244427`*^9, 
  3.7252718099178143`*^9}, {3.7252718533318386`*^9, 3.725271962392784*^9}, {
  3.7252720085200047`*^9, 3.725272103739668*^9}, {3.7252721492430925`*^9, 
  3.7252721886698875`*^9}, {3.725274722456723*^9, 3.7252747273890457`*^9}, {
  3.7252748250224476`*^9, 3.725275013101118*^9}, {3.7252750468034644`*^9, 
  3.725275059242302*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["XXCalculating nucleotide saturationXX", "Subsection",
 CellChangeTimes->{{3.7252637387942977`*^9, 3.7252637509004*^9}, {
  3.7253590644938765`*^9, 3.725359075698394*^9}}],

Cell["NOT DONE YET", "Text",
 CellChangeTimes->{{3.725355738175582*^9, 3.7253557435116515`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Counting missing data", "Subsection",
 CellChangeTimes->{{3.725355782833059*^9, 3.7253557952328873`*^9}}],

Cell[TextData[{
 "These functions will calculate the total missing data for an alignment, the \
mean and StdDev of missing data per site. They can be calculated based on the \
total number of sequences in the alignment, or a specific number of sequence \
(if, for example, the alignment is missing taxa with no data). \nInput:\n\t",
 StyleBox["align - ",
  FontWeight->"Bold"],
 "a nucleotide or amino acid alignment file name\n\t",
 StyleBox["total",
  FontWeight->"Bold"],
 " - the total number of taxa in the alignment. If not specified, it will \
calculate this on its own. If specified, valid options are:\n\t\t\
\[OpenCurlyDoubleQuote]Estimate\[CloseCurlyDoubleQuote] - which will do the \
same as the default;\n\t\tAn integer - which specifies how many total taxa \
you should consider as being the maximum. This is useful if you have deleted \
empty sequences from your alignment, but want to consider the total number of \
taxa from a greater set of sequences.\n\t",
 StyleBox["dataType",
  FontWeight->"Bold"],
 " - either \[OpenCurlyDoubleQuote]nuc\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]aa\[CloseCurlyDoubleQuote]; this determines the set of \
characters considered  as missing data.\n\t\n\tOutput is given in the order: \
\n\t\[OpenCurlyDoubleQuote]locus name \[OpenCurlyDoubleQuote], \
\[OpenCurlyDoubleQuote]mean % of missing data per site \
\[OpenCurlyDoubleQuote], \[OpenCurlyDoubleQuote]std dev of msising data per \
site \[OpenCurlyDoubleQuote], \[OpenCurlyDoubleQuote]# of sites missing 100% \
of data \[OpenCurlyDoubleQuote], \[OpenCurlyDoubleQuote]mean % of missing \
data per taxon \[OpenCurlyDoubleQuote], \[OpenCurlyDoubleQuote]std. dev of \
missing data per taxon \[OpenCurlyDoubleQuote], \[OpenCurlyDoubleQuote]# of \
taxa missing 100% of data\[CloseCurlyDoubleQuote]."
}], "Text",
 CellChangeTimes->{{3.725355803002491*^9, 3.725355952840451*^9}, {
  3.725359112967944*^9, 3.7253591553085365`*^9}, {3.7253594128549957`*^9, 
  3.7253595981556263`*^9}, {3.7253597257747536`*^9, 3.7253597704252286`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", 
   RowBox[{"EXAMPLE", ":"}], " ", "*)"}], 
  RowBox[{
   RowBox[{"missingDataCalculator", "[", 
    RowBox[{
     RowBox[{"fn", "[", 
      RowBox[{"[", "15", "]"}], "]"}], ",", " ", "136", ",", " ", 
     "\"\<nuc\>\""}], "]"}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.725357905220868*^9, 3.7253579435126176`*^9}, 
   3.7253580910771503`*^9, {3.7253581605080338`*^9, 3.725358162147131*^9}, {
   3.725358197235454*^9, 3.7253581973298607`*^9}, {3.725358824923877*^9, 
   3.725358835093124*^9}, {3.725359031707036*^9, 3.725359033036749*^9}, {
   3.7253590979763584`*^9, 3.7253591107941027`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"missingDataCalculator", "[", 
   RowBox[{"align_String", ",", " ", "total_", ",", " ", "dataType_String"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"missChars", "=", 
      RowBox[{"Switch", "[", 
       RowBox[{
       "dataType", ",", " ", "\[IndentingNewLine]", "\"\<aa\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<-\>\"", ",", "\"\<?\>\""}], "}"}], ",", 
        "\[IndentingNewLine]", "\"\<nuc\>\"", ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<-\>\"", ",", "\"\<?\>\"", ",", "\"\<n\>\"", ",", " ", 
          "\"\<N\>\""}], "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"positions", "=", 
      RowBox[{"StringJoin", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"StringPartition", "[", 
             RowBox[{"#", ",", " ", "1"}], "]"}], "&"}], "/@", 
           RowBox[{"(", 
            RowBox[{"taxa", "=", 
             RowBox[{
              RowBox[{"importAlignment", "[", "align", "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ")"}]}], ")"}],
          "//", "Transpose"}], ")"}]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"total", "\[Equal]", "\"\<Estimate\>\""}], ",", 
       RowBox[{
        RowBox[{"numTaxa", "=", 
         RowBox[{"taxa", "//", "Length"}]}], ";"}], ",", " ", 
       RowBox[{
        RowBox[{"numTaxa", "=", "total"}], ";"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"missingTaxa", "=", 
      RowBox[{"numTaxa", "-", 
       RowBox[{"(", 
        RowBox[{"taxa", "//", "Length"}], ")"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"posMiss", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"StringCount", "[", 
            RowBox[{"#", ",", "missChars"}], "]"}], ")"}], "&"}], "/@", 
         "positions"}], ")"}], "+", "missingTaxa"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"seqLength", "=", 
      RowBox[{"StringLength", "[", 
       RowBox[{"taxa", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"taxMiss", "=", 
      RowBox[{
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"StringCount", "[", 
             RowBox[{"#", ",", "missChars"}], "]"}], "&"}], "/@", "taxa"}], 
          ")"}], ",", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"seqLength", ",", "missingTaxa"}], " ", "]"}]}], " ", "]"}],
        "//", "Flatten"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"align", ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"posMiss", "//", "Mean"}], ")"}], "/", "numTaxa"}], ")"}], 
        "//", "N"}], ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"(", "posMiss", ")"}], "//", "StandardDeviation"}], "//", 
        "N"}], ",", 
       RowBox[{"Count", "[", 
        RowBox[{"posMiss", ",", "numTaxa"}], " ", "]"}], " ", ",", 
       "\[IndentingNewLine]", " ", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"taxMiss", "//", "Mean"}], ")"}], "/", "seqLength"}], 
         ")"}], "//", "N"}], ",", " ", 
       RowBox[{
        RowBox[{"taxMiss", "//", "StandardDeviation"}], "//", "N"}], ",", 
       RowBox[{"Count", "[", 
        RowBox[{"taxMiss", ",", "seqLength"}], " ", "]"}]}], " ", "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"the", " ", "results", " ", "are", " ", "given", " ", "as", " ", 
    RowBox[{"follows", ":", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<locus name\>\"", ",", " ", 
       "\"\<mean % of missing data per site\>\"", ",", " ", 
       "\"\<std dev of msising data per site\>\"", ",", " ", 
       "\"\<# of sites missing 100% of data\>\"", ",", " ", 
       "\"\<mean % of missing data per taxon\>\"", ",", " ", 
       "\"\<std. dev of missing data per taxon\>\"", ",", " ", 
       "\"\<# of taxa missing 100% of data\>\""}], "}"}]}]}], 
   "*)"}]}]}], "Input",
 CellChangeTimes->{{3.725356242958578*^9, 3.7253562700166063`*^9}, {
  3.725356579229169*^9, 3.725356620096088*^9}, {3.725356791899458*^9, 
  3.7253569039752693`*^9}, {3.7253570204280252`*^9, 3.725357124628584*^9}, {
  3.7253571566012926`*^9, 3.7253571793903146`*^9}, {3.7253573277231035`*^9, 
  3.7253574906963997`*^9}, {3.7253575300199547`*^9, 3.7253575309897556`*^9}, {
  3.7253575943558607`*^9, 3.7253575994727955`*^9}, {3.725357650178851*^9, 
  3.72535782213796*^9}, {3.725357882904419*^9, 3.7253578830294237`*^9}, {
  3.725357922822318*^9, 3.725358029731907*^9}, {3.725358072222928*^9, 
  3.7253580805564437`*^9}, {3.725358130534194*^9, 3.7253581353171344`*^9}, {
  3.725358791680558*^9, 3.725358815892085*^9}, {3.725358864452433*^9, 
  3.7253589669548426`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Nucleotide compositional bias", "Subsection",
 CellChangeTimes->{{3.7256091346686573`*^9, 3.725609144122325*^9}}],

Cell[CellGroupData[{

Cell["Total", "Subsubsection",
 CellChangeTimes->{{3.725609155667144*^9, 3.7256091561692033`*^9}}],

Cell[TextData[{
 "The function below calculates the prevalence (%) of each nucleotide among \
all positions with a determined base (doesn\[CloseCurlyQuote]t count missing \
data). It also gives the standard deviation of the percentages, which is a \
measure of compositional bias.\nInput is:\n",
 StyleBox["fileName",
  FontWeight->"Bold"],
 " - a string with the name of the file you want to import. It doesn\
\[CloseCurlyQuote]t have to be aligned and could be in phylip or fasta format."
}], "Text",
 CellChangeTimes->{{3.7256093112439055`*^9, 3.725609382937184*^9}, {
  3.7256104294110126`*^9, 3.7256105839206395`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"compositionalBiasTotal", "[", "fileName_", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucFreqs", ",", " ", "nucProportions", ",", " ", "nucDev", ",", " ", 
      "align"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"align", "=", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"fileName", "//", "importAlignment"}], ")"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nucFreqs", "=", 
      RowBox[{"Total", "/@", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"StringCount", "[", 
               RowBox[{
                RowBox[{"#", "//", "ToUpperCase"}], ",", " ", 
                RowBox[{"nucs", "[", 
                 RowBox[{"[", "n", "]"}], "]"}]}], "]"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"n", ",", " ", "1", ",", " ", "4"}], "}"}]}], "]"}], 
            "&"}], "/@", "align"}], ")"}], "//", "Transpose"}], ")"}]}]}], 
     ";", 
     RowBox[{"(*", 
      RowBox[{"given", " ", "in", " ", "the", " ", "order", " ", "ATCG"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"nucProportions", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{"#", "*", "100"}], ")"}], "/", 
            RowBox[{"(", 
             RowBox[{"nucFreqs", "//", "Total"}], ")"}]}], ")"}], "//", "N"}],
          ")"}], "&"}], "/@", "nucFreqs"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"nucDev", "=", 
      RowBox[{"nucProportions", "//", "StandardDeviation"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"fileName", ",", "nucProportions", ",", " ", "nucDev"}], " ", 
       "}"}], "//", "Flatten"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7256092292488265`*^9, 3.7256092377007246`*^9}, {
  3.72560941132685*^9, 3.725609588820267*^9}, {3.7256099671860304`*^9, 
  3.7256100933267193`*^9}, {3.7256131728781586`*^9, 3.725613192993394*^9}, {
  3.725613429037718*^9, 3.7256134296314907`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"nucs", "=", 
   RowBox[{"{", 
    RowBox[{
    "\"\<A\>\"", ",", "\"\<T\>\"", ",", " ", "\"\<C\>\"", ",", " ", 
     "\"\<G\>\""}], "}"}]}], ";"}]], "Input"],

Cell["Usage example:", "Text",
 CellChangeTimes->{{3.7256104133254824`*^9, 3.725610415164147*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{"\"\<totalNucCompBias.xlsx\>\"", ",", 
     RowBox[{"Prepend", "[", 
      RowBox[{
       RowBox[{"compositionalBiasTotal", "/@", "fn"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{
        "\"\<Locus name\>\"", ",", " ", "\"\<A%\>\"", ",", " ", "\"\<T%\>\"", 
         ",", " ", "\"\<C%\>\"", ",", " ", "\"\<G%\>\"", ",", " ", 
         "\"\<Nuc std. dev\>\""}], "}"}]}], "]"}]}], "]"}], "//", "Timing"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.725609598483904*^9, 3.7256096890758657`*^9}, {
   3.7256099393744235`*^9, 3.725609982060779*^9}, {3.725610098108308*^9, 
   3.7256101023562107`*^9}, {3.72561023535874*^9, 3.7256103104362373`*^9}, 
   3.72561041011706*^9, {3.7256131991173496`*^9, 3.7256132005476713`*^9}, {
   3.7256132363041253`*^9, 3.7256132384495745`*^9}, 3.725613512355281*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"15.671875`", ",", "\<\"totalNucCompBias.xlsx\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.725613456746909*^9}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["By codon position", "Subsubsection",
 CellChangeTimes->{{3.7256091648030577`*^9, 3.7256091668413143`*^9}}],

Cell[TextData[{
 "The function below calculates the prevalence (%) of each nucleotide among \
all positions with a determined base (doesn' t count missing data).It also \
gives the standard deviation of the percentages, which is a measure of \
compositional bias.\n\nInput is : \n",
 StyleBox["fileName",
  FontWeight->"Bold"],
 " - a string with the name of the alignment file you want to import.It can \
be in phylip or fasta format."
}], "Text",
 CellChangeTimes->{{3.7256106295610423`*^9, 3.7256106381399193`*^9}, 
   3.7256128771748753`*^9, {3.725612979816251*^9, 3.7256130095516605`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"usage", " ", "example"}], "*)"}], 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Export", "[", 
     RowBox[{"\"\<codonNucCompBias.xlsx\>\"", ",", 
      RowBox[{"Prepend", "[", 
       RowBox[{
        RowBox[{"compositionalBiasCodons", "/@", "fn"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{
         "\"\<Locus name\>\"", ",", " ", "\"\<C1 A%\>\"", ",", " ", 
          "\"\<C1 T%\>\"", ",", " ", "\"\<C1 C%\>\"", ",", " ", 
          "\"\<C1 G%\>\"", ",", " ", "\"\<C1 Nuc std. dev\>\"", ",", " ", 
          "\"\<C2 A%\>\"", ",", " ", "\"\<C2 T%\>\"", ",", " ", 
          "\"\<C2 C%\>\"", ",", " ", "\"\<C2 G%\>\"", ",", " ", 
          "\"\<C2 Nuc std. dev\>\"", ",", "\"\<C3 A%\>\"", ",", " ", 
          "\"\<C3 T%\>\"", ",", " ", "\"\<C3 C%\>\"", ",", " ", 
          "\"\<C3 G%\>\"", ",", " ", "\"\<C3 Nuc std. dev\>\""}], "}"}]}], 
       "]"}]}], "]"}], "//", "Timing"}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.725613547959437*^9, 3.7256136316474066`*^9}, {
  3.7256137643455734`*^9, 3.7256137769460917`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1038.171875`", ",", "\<\"codonNucCompBias.xlsx\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7256136410722785`*^9, 3.7256148249236784`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"compositionalBiasCodons", "[", "filename_String", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "nucFreqs", ",", " ", "nucProportions", ",", " ", "nucDev", ",", " ", 
      "align", ",", " ", "codonAligns"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{"first", ",", " ", 
      RowBox[{
      "break", " ", "up", " ", "the", " ", "alignment", " ", "by", " ", 
       "codon", " ", "position"}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"codonAligns", "=", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"makeCodonFASTAParsedObjects", "[", 
           RowBox[{"filename", ",", " ", "#"}], "]"}], "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", "1", "}"}], ",", 
          RowBox[{"{", "2", "}"}], ",", 
          RowBox[{"{", "3", "}"}]}], "}"}]}], ")"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "now", " ", "just", " ", "cound", " ", "the", " ", "nucleotides", " ", 
       "in", " ", "each"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"cBias", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"align", "=", 
          RowBox[{"codonAligns", "[", 
           RowBox[{"[", "c", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"nucFreqs", "=", 
          RowBox[{"Total", "/@", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{"StringCount", "[", 
                   RowBox[{
                    RowBox[{"#", "//", "ToUpperCase"}], ",", " ", 
                    RowBox[{"nucs", "[", 
                    RowBox[{"[", "n", "]"}], "]"}]}], "]"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"n", ",", " ", "1", ",", " ", "4"}], "}"}]}], 
                 "]"}], "&"}], "/@", "align"}], ")"}], "//", "Transpose"}], 
            ")"}]}]}], ";", 
         RowBox[{"(*", 
          RowBox[{"given", " ", "in", " ", "the", " ", "order", " ", "ATCG"}],
           "*)"}], "\[IndentingNewLine]", 
         RowBox[{"nucProportions", "=", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#", "*", "100"}], ")"}], "/", 
                RowBox[{"(", 
                 RowBox[{"nucFreqs", "//", "Total"}], ")"}]}], ")"}], "//", 
              "N"}], ")"}], "&"}], "/@", "nucFreqs"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"nucDev", "=", 
          RowBox[{"nucProportions", "//", "StandardDeviation"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"nucProportions", ",", " ", "nucDev"}], "}"}], "//", 
          "Flatten"}]}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"c", ",", " ", "1", ",", " ", "3"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"filename", ",", "cBias"}], " ", "}"}], "//", "Flatten"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7256109366553497`*^9, 3.725610948708886*^9}, {
  3.725610978786211*^9, 3.725611091827411*^9}, {3.7256111383428974`*^9, 
  3.7256112369541597`*^9}, {3.725612120627451*^9, 3.725612147406334*^9}, {
  3.7256128790322475`*^9, 3.72561289250139*^9}}],

Cell["\<\
Dependency script which is modified from the finding codons section.\
\>", "Text",
 CellChangeTimes->{{3.725612091389567*^9, 3.7256121064378767`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"makeCodonFASTAParsedObjects", "[", 
   RowBox[{"alignmentFile_", ",", " ", "position_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "aaa", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"codonExtract", "[", 
     RowBox[{
      RowBox[{"aaa", "=", 
       RowBox[{"alignmentFile", "//", "importAlignment"}]}], ",", "position", 
      ",", " ", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{"readingFrame", "/@", 
            RowBox[{"aaa", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ")"}], "//", 
          "Commonest"}], ")"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "+", "1"}]}], " ", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7229487657422323`*^9, 3.722948895255321*^9}, 
   3.7256106841344175`*^9, {3.725610746218001*^9, 3.7256108514522133`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7256123364977818`*^9, 3.7256123764544735`*^9}, {
  3.725612409932268*^9, 3.7256124318907175`*^9}, {3.725612473047434*^9, 
  3.7256125596252203`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.725612438281145*^9, 3.7256124432976513`*^9}, {
  3.7256125041562967`*^9, 3.7256125043124924`*^9}, {3.72561254087647*^9, 
  3.7256125437883053`*^9}}]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other workflows & software specific scripts", "Title",
 CellChangeTimes->{{3.7130754788233833`*^9, 3.7130754853177786`*^9}, {
  3.7135233378246984`*^9, 3.7135233626123347`*^9}}],

Cell[CellGroupData[{

Cell["Processing assemblies of targeted enrichment data", "Subsection",
 CellChangeTimes->{{3.7113559885893087`*^9, 3.7113560116992445`*^9}, {
  3.7130754704027157`*^9, 3.7130754704807673`*^9}, {3.7161113571021676`*^9, 
  3.7161113571802936`*^9}}],

Cell["\<\
Assembled genomes from Illumina sequencing should yield lots of good DNA, \
some of which is target-organism genomic or mitchondrial. Yet, if you \
sequenced libraries that were prepared with probes to target certain loci, \
then those loci will be of interest to you. 

Extracting these loci from the assemblies is done primarily through BLAST or \
other searching algorithm (in my case, VSearch). However, these searches can \
only identify the loci targeted by your probes, they don\[CloseCurlyQuote]t \
actually pull them out or do any processing. The code below is designed to do \
that. 

The code does three things:
1. Inserts taxon names into tokenized file names
2. Renames fasta-headers so they have locus names and taxon names.
3. Removes instances where probes were non-specific in their binding to genes

Point 3 is the important issue. We design our probes based on known taxa but \
we use them for unknown taxa. So any genes that are orthologous in the known \
taxa might not be orthologous in the unknown taxa. Also, regardless of \
orthology, junk DNA/pseudogenes could be unintentionally targetted by the \
probes. These cases will mess up the homology and and we should discard all \
instances of probed loci (both intentional and unintentional) that are not \
entirely unique. NOTE that we are not removing contigs that match with more \
than one probe, but only matching probes that match with more than one contig.\
\>", "Text",
 CellChangeTimes->{{3.711356016635313*^9, 3.711356020149587*^9}, {
  3.711356063823355*^9, 3.711356439245382*^9}, {3.7113564793332796`*^9, 
  3.7113565827151155`*^9}}],

Cell[CellGroupData[{

Cell["Dependancy scripts", "Subsubsection",
 CellChangeTimes->{{3.7113566010738125`*^9, 3.7113566076353073`*^9}, 
   3.712649858178811*^9}],

Cell["\<\
This function finds probes that match with more than one contig using an \
input of BLAST style output results (easily output from VSearch).\
\>", "Text",
 CellChangeTimes->{{3.711356632710663*^9, 3.711356668458669*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"findDangerousLoci", "[", "blastO_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "badStuff", ",", " ", "uniquenessList", ",", "  ", 
       "findDangerousLoci"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"uniquenessList", "=", 
       RowBox[{"Union", "/@", 
        RowBox[{"GatherBy", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Table", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"StringReplace", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"StringSplit", "[", 
                  RowBox[{
                   RowBox[{"blastO", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
                   RowBox[{"{", 
                    RowBox[{"\"\<|\>\"", ",", " ", "\"\<;\>\""}], "}"}]}], 
                  "]"}], "[", 
                 RowBox[{"[", "2", "]"}], "]"}], ",", " ", 
                RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", 
              " ", 
              RowBox[{
               RowBox[{"StringSplit", "[", 
                RowBox[{
                 RowBox[{"blastO", "[", 
                  RowBox[{"[", 
                   RowBox[{"i", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"\"\< \>\"", ",", " ", "\"\<|\>\""}], "}"}]}], 
                "]"}], "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], "}"}], "\[IndentingNewLine]",
             ",", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", "1", ",", " ", 
              RowBox[{"Length", "[", "blastO", "]"}]}], "}"}]}], "]"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "&"}]}], "]"}]}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"badStuff", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"uniquenessList", "[", 
          RowBox[{"[", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{
              RowBox[{"Length", "/@", "uniquenessList"}], ",", " ", 
              RowBox[{"x_", "/;", 
               RowBox[{"x", ">", "1"}]}]}], "]"}], "//", "Flatten"}], " ", 
           "]"}], "]"}], "//", "Flatten"}], "//", "Union"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"dangerousProbes", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"dangerousLoci", " ", "=", " ", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"StringTake", "[", 
           RowBox[{"#", ",", " ", "2"}], "]"}], ",", " ", 
          "\[IndentingNewLine]", "\"\<Zn\>\"", " ", 
          RowBox[{"(*", 
           RowBox[{"<", 
            RowBox[{
             RowBox[{"-", " ", "use"}], " ", "this", " ", "for", " ", "ZNEV", 
             " ", "probes"}]}], "*)"}], ",", " ", 
          RowBox[{
           RowBox[{"dangerousProbes", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"{", "#", "}"}], ",", " ", "dangerousProbes"}], "]"}]}],
            ";"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", 
           RowBox[{"\"\<TR\>\"", " ", "<", 
            RowBox[{
             RowBox[{"-", " ", "use"}], " ", "this", " ", "for", " ", 
             "assemblues", " ", "obtained", " ", "through", " ", 
             "trinity"}]}], "*)"}], "_", " ", 
          RowBox[{"(*", 
           RowBox[{"<", 
            RowBox[{
             RowBox[{"-", " ", "use"}], " ", "this", " ", "for", " ", 
             "general", " ", "purpose", " ", "use"}]}], "*)"}], ",", " ", 
          RowBox[{
           RowBox[{"dangerousLoci", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"{", "#", "}"}], ",", " ", "dangerousLoci"}], "]"}]}], 
           ";"}]}], "\[IndentingNewLine]", "]"}], "&"}], "/@", "badStuff"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"dangerousProbes", "=", 
       RowBox[{"dangerousProbes", "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"dangerousLoci", " ", "=", " ", 
       RowBox[{"dangerousLoci", "//", "Flatten"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"just", " ", "some", " ", "output", " ", "strings"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<             There are...\>\"", ",", " ", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"dangerousProbes", "//", "Length"}], ")"}], "//", 
               "ToString"}], ")"}], "<>", "\"\</\>\"", "<>", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"StringSplit", "[", 
                    RowBox[{
                    RowBox[{"blastO", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"\"\<|\>\"", ",", " ", "\"\<;\>\""}], "}"}]}], 
                    "]"}], "[", 
                   RowBox[{"[", 
                    RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], "//", 
                  "Union"}], "//", "Length"}], ")"}], "//", "ToString"}], 
              ")"}]}], ")"}], ",", " ", 
           "\"\<non-unique hits and dangerous probes.\>\"", ",", 
           "dangerousLoci", ",", " ", 
           "\"\<...should be removed from the dataset.\>\""}], "}"}], "}"}], "//",
         "TableForm"}], "//", "Print"}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", 
          RowBox[{"\"\<             \>\"", ",", 
           RowBox[{"dangerousProbes", "//", "Union"}], ",", " ", 
           "\"\<...are culprits and will also be removed.\>\""}], "}"}], 
         "}"}], "//", "TableForm"}], "//", "Print"}], ";", 
      "\[IndentingNewLine]", "dangerousLoci"}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7112627919562173`*^9, 3.711262818653504*^9}, 
   3.711265314598256*^9, {3.7112656213266325`*^9, 3.7112656344341784`*^9}, {
   3.7112658240916862`*^9, 3.711265873803124*^9}, {3.711265999510313*^9, 
   3.711266059110876*^9}, {3.711266197311307*^9, 3.7112662898360596`*^9}, {
   3.7112667618010273`*^9, 3.7112668173241167`*^9}, {3.711266847793067*^9, 
   3.7112668492600317`*^9}, {3.7112668826663814`*^9, 
   3.7112668832602777`*^9}, {3.7112672031623793`*^9, 
   3.7112672364461784`*^9}, {3.7112672684435787`*^9, 3.711267268996524*^9}, {
   3.7112673062066917`*^9, 3.7112673536518188`*^9}, {3.711267685788161*^9, 
   3.711267685944397*^9}, {3.711268760410802*^9, 3.711268760613947*^9}, {
   3.711268926219081*^9, 3.7112689773561497`*^9}, 3.711345682148058*^9, {
   3.711345777791334*^9, 3.711345806939271*^9}, {3.711345842278945*^9, 
   3.7113458462286005`*^9}, {3.711345893557746*^9, 3.7113459795887775`*^9}, {
   3.7113466119320765`*^9, 3.7113466270432034`*^9}, {3.711347032448225*^9, 
   3.7113470351818943`*^9}, {3.7113471054367046`*^9, 
   3.7113471147564726`*^9}, {3.711347314979268*^9, 3.7113473899930067`*^9}, {
   3.7113474258378525`*^9, 3.711347429147147*^9}, {3.711348240308567*^9, 
   3.7113482527129173`*^9}, {3.7113483445789003`*^9, 
   3.7113483507883186`*^9}, {3.7113485947631593`*^9, 3.711348598139431*^9}, {
   3.7113487692418756`*^9, 3.71134877423206*^9}, {3.7113512644535074`*^9, 
   3.711351422497445*^9}, {3.712646856361764*^9, 3.712646904393444*^9}, {
   3.7126470001852427`*^9, 3.712647028542124*^9}, 3.71264958962551*^9}],

Cell["\<\
This script removes the designated loci from a FASTA-list (input is formed \
using the fastaParser[] script).\
\>", "Text",
 CellChangeTimes->{{3.7113566743048906`*^9, 3.7113567170990534`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"destroyLoci", "[", 
   RowBox[{"sequences_", ",", " ", "dangerousLoci_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "trash", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"trash", "=", 
      RowBox[{"Position", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"StringFreeQ", "[", 
           RowBox[{
            RowBox[{"#", "//", "StringJoin"}], ",", "dangerousLoci"}], " ", 
           "]"}], "&"}], "/@", 
         RowBox[{"sequences", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], 
        "\[IndentingNewLine]", ",", " ", "False"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trashSeqs", "=", 
      RowBox[{"sequences", "[", 
       RowBox[{"[", 
        RowBox[{"trash", "//", "Flatten"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Delete", "[", 
      RowBox[{"sequences", ",", "trash"}], " ", "]"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7112673730755377`*^9, 3.7112673964094286`*^9}, {
   3.7112676105105524`*^9, 3.7112676305568676`*^9}, {3.7112676942889986`*^9, 
   3.7112676986915708`*^9}, {3.7112682775884*^9, 3.7112683312908096`*^9}, 
   3.7112689422267256`*^9}],

Cell["\<\
This creates a list of new headers to swap for the FASTA headers
assemblyHeadersToKeep is a list of the positions in the FASTA header of the \
assembly contigs that you wish to keep. EX for TRINITY assemblies it should \
be {1, 2, 4}; for the 1KITE transcriptomes it should be {1}.\
\>", "Text",
 CellChangeTimes->{{3.7113567488272543`*^9, 3.711356770761423*^9}, {
  3.712647496004991*^9, 3.7126475536583433`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"redefineList", "[", 
   RowBox[{
   "taxonName_", ",", " ", "blastO_", ",", " ", "assemblyHeadersToKeep_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "probeLocus", ",", " ", "trans", ",", " ", "sizes", ",", " ", 
      "assembleLocus"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"probeLocus", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringReplace", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], "&"}], "/@", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"StringSplit", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<|\>\"", ",", " ", "\"\<;\>\""}], "}"}]}], "]"}], 
           "&"}], "/@", 
          RowBox[{"blastO", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"trans", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"StringSplit", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"{", 
           RowBox[{
           "\"\< len=\>\"", ",", " ", "\"\< path=\>\"", ",", " ", 
            "\"\<;\>\""}], "}"}]}], "]"}], "&"}], "/@", 
       RowBox[{"blastO", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sizes", "=", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"ConstantArray", "[", 
          RowBox[{
           RowBox[{"ToString", "[", "#", "]"}], ",", " ", "#"}], "]"}], "&"}],
         "/@", 
        RowBox[{"Length", "/@", 
         RowBox[{"SplitBy", "[", 
          RowBox[{"trans", ",", " ", "First"}], "]"}]}]}], "//", 
       "Flatten"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"assembleLocus", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"Riffle", "[", 
           RowBox[{"#", ",", " ", 
            RowBox[{"{", 
             RowBox[{
             "\"\< ; nucLen=\>\"", ",", " ", "\"\<; proberegions=\>\""}], 
             "}"}]}], "]"}], "//", "StringJoin"}], ")"}], "&"}], "/@", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Flatten", "/@", 
          RowBox[{"Partition", "[", 
           RowBox[{
            RowBox[{"Riffle", "[", 
             RowBox[{"trans", ",", " ", "sizes"}], " ", "]"}], ",", " ", 
            "2"}], "]"}]}], ")"}], "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "assemblyHeadersToKeep"}], "]"}], "]"}]}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{
     "Print", "[", 
      "\"\<             The FASTA sequences to switch names with are...\>\"", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"StringSplit", "[", 
           RowBox[{
            RowBox[{"assembleLocus", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\< ; \>\""}], "]"}],
           "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
         RowBox[{"taxonName", "<>", "\"\<|\>\"", "<>", 
          RowBox[{"probeLocus", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\<|\>\"", "<>", 
          RowBox[{"assembleLocus", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"i", ",", " ", "1", " ", ",", " ", 
         RowBox[{"Length", "[", "probeLocus", "]"}]}], "}"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7112709078300476`*^9, 3.711271048617749*^9}, 
   3.7113466699077797`*^9, {3.712647381746953*^9, 3.712647416882862*^9}, {
   3.7126474663946114`*^9, 3.712647485188319*^9}, 3.712647562431592*^9}],

Cell["This actually swaps the headers.", "Text",
 CellChangeTimes->{{3.711356776791869*^9, 3.711356786730231*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"redefineNames", "[", 
   RowBox[{"sequences_", ",", " ", "nameSwitches_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tempSeqNamesForFinding", ",", " ", "seqs"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqs", "=", "sequences"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"tempSeqNamesForFinding", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"sequences", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], 
            "<>", "\"\<|\>\"", "<>", 
            RowBox[{"sequences", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "1", ",", " ", "2"}], "]"}], "]"}]}], "//",
            "StringSplit"}], ")"}], "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "sequences", "]"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"pear", "=", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"pear", ",", " ", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempSeqNamesForFinding", ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "//", 
                    "Flatten"}], ")"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", "1"}], "}"}], "->",
                " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}]}], " ", "]"}]}], ")"}], 
          "&"}], "/@", "nameSwitches"}], ")"}], ";"}], "\[IndentingNewLine]", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{"seqs", "=", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"seqs", ",", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "=", 
                    RowBox[{"Position", "[", 
                    RowBox[{"tempSeqNamesForFinding", ",", " ", 
                    RowBox[{"nameSwitches", "[", 
                    RowBox[{"[", 
                    RowBox[{"j", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], 
                    ")"}], "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", " ", 
                    RowBox[{"{", "999999999", "}"}], ",", "p"}], " ", "]"}], "//",
                   "Flatten"}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", "1"}], "}"}], "->", 
             " ", 
             RowBox[{"{", 
              RowBox[{"nameSwitches", "[", 
               RowBox[{"[", 
                RowBox[{"j", ",", " ", "2"}], "]"}], "]"}], " ", "}"}]}]}], 
           "]"}]}], ")"}], ")"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "nameSwitches", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "seqs"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7112718353952074`*^9, 3.711271872057026*^9}, {
   3.711276014522131*^9, 3.711276082496081*^9}, 3.711276322589349*^9, {
   3.7112772247846103`*^9, 3.7112772315575953`*^9}, {3.711277362507818*^9, 
   3.7112773628985205`*^9}, {3.711277467713832*^9, 3.711277472140128*^9}, {
   3.7112776383091183`*^9, 3.7112776986775866`*^9}, {3.711277785000495*^9, 
   3.711277822095705*^9}, {3.711277884496091*^9, 3.7112778889702797`*^9}, {
   3.7112782323559465`*^9, 3.7112783301023717`*^9}, 3.7112785441681113`*^9, {
   3.7112794298902693`*^9, 3.7112794357809734`*^9}, {3.711279729184422*^9, 
   3.711279732362084*^9}, {3.712648118416031*^9, 3.7126481305809813`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"redefineNames", "[", 
   RowBox[{"sequences_", ",", " ", "nameSwitches_", ",", " ", "option_"}], 
   " ", 
   RowBox[{"(*", 
    RowBox[{
    "either", " ", "\"\<TRINITY\>\"", " ", "or", " ", "\"\<1KITE\>\""}], 
    "*)"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tempSeqNamesForFinding", ",", " ", "seqs"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqs", "=", "sequences"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
      "option", ",", " ", "\"\<TRINITY\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tempSeqNamesForFinding", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{
               RowBox[{"sequences", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], 
               "<>", "\"\<|\>\"", "<>", 
               RowBox[{"sequences", "[", 
                RowBox[{"[", 
                 RowBox[{"i", ",", " ", "1", ",", " ", "2"}], "]"}], "]"}]}], 
              "//", "StringSplit"}], ")"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", 
             RowBox[{"Length", "[", "sequences", "]"}]}], "}"}]}], "]"}]}], 
        ";"}], "\[IndentingNewLine]", ",", "\"\<1KITE\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"tempSeqNamesForFinding", "=", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"sequences", "[", 
               RowBox[{"[", 
                RowBox[{"i", ",", " ", "1", ",", " ", "1"}], "]"}], "]"}], "//",
               "StringSplit"}], ")"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", "1", ",", " ", 
             RowBox[{"Length", "[", "sequences", "]"}]}], "}"}]}], "]"}]}], 
        ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"pear", "=", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"pear", ",", " ", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{
                  RowBox[{"(", 
                   RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"tempSeqNamesForFinding", ",", " ", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "//", 
                    "Flatten"}], ")"}], "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", "1"}], "}"}], "->",
                " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}]}]}], " ", "]"}]}], ")"}], 
          "&"}], "/@", "nameSwitches"}], ")"}], ";"}], "\[IndentingNewLine]", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"(", 
         RowBox[{"seqs", "=", 
          RowBox[{"ReplacePart", "[", 
           RowBox[{"seqs", ",", " ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"(", "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"If", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"p", "=", 
                    RowBox[{"Position", "[", 
                    RowBox[{"tempSeqNamesForFinding", ",", " ", 
                    RowBox[{"nameSwitches", "[", 
                    RowBox[{"[", 
                    RowBox[{"j", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], 
                    ")"}], "\[Equal]", 
                    RowBox[{"{", "}"}]}], ",", " ", 
                    RowBox[{"{", "999999999", "}"}], ",", "p"}], " ", "]"}], "//",
                   "Flatten"}], ")"}], "[", 
                RowBox[{"[", "1", "]"}], "]"}], ",", " ", "1"}], "}"}], "->", 
             " ", 
             RowBox[{"{", 
              RowBox[{"Switch", "[", 
               RowBox[{"option", ",", " ", "\"\<TRINITY\>\"", ",", 
                RowBox[{"nameSwitches", "[", 
                 RowBox[{"[", 
                  RowBox[{"j", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
                "\"\<1KITE\>\"", ",", " ", 
                RowBox[{
                 RowBox[{"nameSwitches", "[", 
                  RowBox[{"[", 
                   RowBox[{"j", ",", " ", "2"}], "]"}], "]"}], "<>", 
                 "\"\<|geneX\>\""}]}], " ", "]"}], "}"}]}]}], "]"}]}], ")"}], 
        ")"}], ",", " ", 
       RowBox[{"{", 
        RowBox[{"j", ",", " ", "1", ",", " ", 
         RowBox[{"Length", "[", "nameSwitches", "]"}]}], "}"}]}], "]"}], ";", 
     "\[IndentingNewLine]", "seqs"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7112718353952074`*^9, 3.711271872057026*^9}, {
   3.711276014522131*^9, 3.711276082496081*^9}, 3.711276322589349*^9, {
   3.7112772247846103`*^9, 3.7112772315575953`*^9}, {3.711277362507818*^9, 
   3.7112773628985205`*^9}, {3.711277467713832*^9, 3.711277472140128*^9}, {
   3.7112776383091183`*^9, 3.7112776986775866`*^9}, {3.711277785000495*^9, 
   3.711277822095705*^9}, {3.711277884496091*^9, 3.7112778889702797`*^9}, {
   3.7112782323559465`*^9, 3.7112783301023717`*^9}, 3.7112785441681113`*^9, {
   3.7112794298902693`*^9, 3.7112794357809734`*^9}, {3.711279729184422*^9, 
   3.711279732362084*^9}, {3.712648118416031*^9, 3.7126481305809813`*^9}, {
   3.712648442305128*^9, 3.7126485505853043`*^9}, {3.7126487469529963`*^9, 
   3.7126488485893426`*^9}}],

Cell[TextData[{
 "This function combines all of the above into a single function. The \
parameters are:\n\t-",
 StyleBox["taxonName",
  FontWeight->"Bold"],
 ": the name you want all your FASTA headers and files to lead with\n\t-",
 StyleBox["sequences",
  FontWeight->"Bold"],
 ": a FASTAlist input (from fastaParser[]).\n\t-",
 StyleBox["blastIn",
  FontWeight->"Bold"],
 ": a BLAST result input file (format obtained from VSearch).\n\t-",
 StyleBox["assemblyHeadersToKeep",
  FontWeight->"Bold"],
 " - see above"
}], "Text",
 CellChangeTimes->{{3.7113568148791957`*^9, 3.711356933558058*^9}, {
  3.7113575361023083`*^9, 3.7113575526654367`*^9}, {3.712647623159178*^9, 
  3.71264763110079*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"processProbedLoci", "[", 
   RowBox[{
   "taxonName_String", ",", " ", "sequences_", ",", " ", "blastIn_", ",", " ",
     "assemblyHeadersToKeep_List", ",", " ", "assemblyTYPE_String"}], " ", 
   RowBox[{"(*", 
    RowBox[{
    "either", " ", "\"\<TRINITY\>\"", " ", "or", " ", "\"\<1KITE\>\""}], 
    "*)"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"blast", ",", " ", "newSequences", ",", " ", 
      RowBox[{"(*", 
       RowBox[{"trashSeqs", " ", 
        RowBox[{"(*", 
         RowBox[{
         "this", " ", "might", " ", "cause", " ", "a", " ", "problem"}], 
         "*)"}], ","}], "*)"}], " ", "nameSwitches", ",", " ", "renamedSeqs", 
      ",", " ", "renamedTrash", ",", " ", "renamedTrash2", ",", 
      "blastHeader"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Starting taxon...\>\"", "<>", "taxonName"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"blastHeader", "=", 
      RowBox[{"{", 
       RowBox[{
       "\"\<query\>\"", ",", "\"\<target\>\"", ",", "\"\<alignLength\>\"", 
        ",", "\"\<ID%\>\"", ",", "\"\<# of mismatches\>\"", ",", 
        "\"\<gap opennings\>\"", ",", "\"\<qlo\>\"", ",", "\"\<qhi\>\"", ",", 
        "\"\<tlo\>\"", ",", "\"\<thi\>\"", ",", "\"\<evalue\>\"", ",", 
        "\"\<bit score\>\""}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"blast", "=", 
      RowBox[{"Drop", "[", 
       RowBox[{
        RowBox[{"Prepend", "[", 
         RowBox[{"blastIn", ",", " ", "blastHeader"}], "]"}], ",", " ", "1"}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"dangerousLoci", "=", 
      RowBox[{"findDangerousLoci", "[", "blast", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newSequences", "=", 
      RowBox[{"destroyLoci", "[", 
       RowBox[{"sequences", ",", " ", "dangerousLoci"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"nameSwitches", "=", 
      RowBox[{
       RowBox[{"redefineList", "[", 
        RowBox[{
        "taxonName", ",", " ", "blast", ",", " ", "assemblyHeadersToKeep"}], 
        "]"}], "//", "Union"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"renamedSeqs", "=", 
      RowBox[{"redefineNames", "[", 
       RowBox[{
       "newSequences", ",", "nameSwitches", ",", " ", "assemblyTYPE"}], " ", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"renamedTrash", "=", 
      RowBox[{"redefineNames", "[", 
       RowBox[{"trashSeqs", ",", "nameSwitches"}], " ", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"renamedSeqs", "=", 
      RowBox[{"destroyLoci", "[", 
       RowBox[{"renamedSeqs", ",", " ", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"dangerousLoci", ",", " ", "dangerousProbes"}], "}"}], "//",
          "Flatten"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"renamedTrash", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{"Append", "[", 
         RowBox[{"renamedTrash", ",", "trashSeqs"}], "]"}], ",", " ", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"renamedTrash", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "}"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], "/@", 
       RowBox[{"Partition", "[", 
        RowBox[{
         RowBox[{"renamedTrash", "//", "Flatten"}], ",", " ", "2"}], 
        "]"}]}]}], ";", 
     RowBox[{"(*", 
      RowBox[{
      "This", " ", "line", " ", "was", " ", "added", " ", "later", " ", "to", 
       " ", "fix", " ", "a", " ", "rare", " ", "error", " ", "that", " ", "I",
        " ", "did", " ", "not", " ", "try", " ", "and", " ", "find", " ", 
       "the", " ", "source", " ", 
       RowBox[{"of", ".", " ", "It"}], " ", "SHOULD", " ", "not", " ", 
       "cause", " ", "a", " ", "problem", " ", "the", " ", "results"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"trashS", "=", 
      RowBox[{"fastaOutput", "[", "renamedTrash", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"goodSeqs", "=", 
      RowBox[{"fastaOutput", "[", "renamedSeqs", "]"}]}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7113522586667137`*^9, 3.711352309614105*^9}, {
   3.711352456355359*^9, 3.7113524799642763`*^9}, 3.711352579183669*^9, {
   3.711352685777579*^9, 3.7113527452770863`*^9}, {3.7113527782452345`*^9, 
   3.711352854104331*^9}, {3.7113528868396053`*^9, 3.711352922866809*^9}, {
   3.711352960379478*^9, 3.711352985242777*^9}, {3.711353026254057*^9, 
   3.7113530880908356`*^9}, {3.7113543568694353`*^9, 3.711354426465596*^9}, {
   3.711354666969946*^9, 3.7113546791993017`*^9}, {3.711717956514631*^9, 
   3.7117180025963635`*^9}, {3.712647602628211*^9, 3.71264765057646*^9}, {
   3.7126488888473186`*^9, 3.7126489262100163`*^9}, {3.712650108124423*^9, 
   3.712650108905738*^9}}],

Cell["\<\
With the below code, you MUST ensure that all the lists are in the same order\
\>", "Text",
 CellChangeTimes->{{3.7113578596976643`*^9, 3.7113578695257835`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"pPL", "[", 
   RowBox[{
   "namesList_", ",", " ", "fastaFileList_", ",", " ", "blastFileList_", ",", 
    " ", "assemblyHeadersToKeep_", ",", " ", "assemblyTYPE_String"}], 
   RowBox[{"(*", 
    RowBox[{
    "either", " ", "\"\<TRINITY\>\"", " ", "or", " ", "\"\<1KITE\>\""}], 
    "*)"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"sequences", "=", 
      RowBox[{
       RowBox[{"Import", "[", 
        RowBox[{
         RowBox[{"fastaFileList", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\<Text\>\""}], "]"}], "//",
        "fastaParser"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"blastIn", "=", 
      RowBox[{"Import", "[", 
       RowBox[{
        RowBox[{"blastFileList", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\<TSV\>\""}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"processProbedLoci", "[", 
      RowBox[{
       RowBox[{"namesList", "[", 
        RowBox[{"[", "i", "]"}], "]"}], ",", " ", "sequences", ",", " ", 
       "blastIn", ",", "assemblyHeadersToKeep", ",", " ", "assemblyTYPE"}], 
      "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"\"\<t_\>\"", "<>", 
        RowBox[{"ToString", "[", "i", "]"}], "<>", 
        RowBox[{"namesList", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\<_trashSeqs.txt\>\""}], 
       ",", "trashS"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ToString", "[", "i", "]"}], "<>", 
        RowBox[{"namesList", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\<_AHESeqs.txt\>\""}], ",", 
       "goodSeqs"}], "]"}], ";"}], "\[IndentingNewLine]", 
    "\[IndentingNewLine]", ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", " ", "1", ",", " ", 
      RowBox[{"Length", "[", "fastaFileList", "]"}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7113575826211815`*^9, 3.711357844429349*^9}, {
   3.7113578804953003`*^9, 3.711357944877249*^9}, {3.7117158496674814`*^9, 
   3.711715874699851*^9}, {3.711716100637763*^9, 3.7117161063648663`*^9}, {
   3.711716203380642*^9, 3.7117162037234898`*^9}, {3.711788341800153*^9, 
   3.7117883480417547`*^9}, {3.712648964000659*^9, 3.712649001760105*^9}, {
   3.712649501040818*^9, 3.712649525807079*^9}, 3.7126501850202675`*^9, {
   3.7126503675323753`*^9, 3.7126503680389237`*^9}, {3.7126503981426244`*^9, 
   3.712650407675624*^9}, 3.712650543520252*^9, {3.7126506442149477`*^9, 
   3.712650673562009*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Processing GUIDANCE2 outputs", "Subsection",
 CellChangeTimes->{{3.7135155659674115`*^9, 3.71351557272678*^9}, 
   3.716111354309039*^9}],

Cell["\<\
This function takes the ouput folders generated by GUIDANCE2 and renames the \
output files as appropriate.

First YOU MUST set the directory to the parent folder of the GUIDANCE2 \
outputs and then import the fileNames.
\
\>", "Text",
 CellChangeTimes->{{3.7135170319353304`*^9, 3.7135170929207163`*^9}, {
  3.7135171417812862`*^9, 3.713517171085952*^9}, {3.713608003659192*^9, 
  3.7136080041279163`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"gUIDANCE2OutputParse", "[", "directory_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"fileName", ",", " ", "exportName", ",", " ", "folderList"}], 
      "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"SetDirectory", "[", 
       RowBox[{
        RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\out\>\""}], "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"folderList", "=", 
       RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"SetDirectory", "[", "directory", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"SetDirectory", "[", 
          RowBox[{
           RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\out\\\\\>\"", "<>", 
           RowBox[{"folderList", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"fileName", "=", 
          RowBox[{
           RowBox[{"Riffle", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"StringSplit", "[", 
               RowBox[{
                RowBox[{"folderList", "[", 
                 RowBox[{"[", "i", "]"}], "]"}], ",", " ", "\"\<_\>\""}], 
               "]"}], "[", 
              RowBox[{"[", 
               RowBox[{"{", 
                RowBox[{"4", ",", " ", "5", ",", " ", "6"}], "}"}], 
               RowBox[{"(*", 
                RowBox[{
                "possible", " ", "change", " ", "depending", " ", "upon", " ",
                  "how", " ", "you", " ", "craft", " ", "the", " ", 
                 "GUIDANCE2", " ", "output", " ", "file"}], "*)"}], "]"}], 
              "]"}], ",", " ", "\"\<_\>\""}], " ", 
            RowBox[{"(*", 
             RowBox[{"same", " ", "as", " ", "previous", " ", "comment"}], 
             "*)"}], "]"}], "//", "StringJoin"}]}], ";", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{
             RowBox[{"FileNames", "[", "]"}], ",", " ", 
             "\"\<MSA.MAFFT.Without_low_SP_Col.With_Names\>\""}], "]"}], ",", 
           " ", "\[IndentingNewLine]", 
           RowBox[{"Export", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"ParentDirectory", "[", 
               RowBox[{"ParentDirectory", "[", "]"}], "]"}], "<>", 
              "\"\<\\\\fixed\\\\\>\"", "<>", "fileName"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Import", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
                "\"\<MSA.MAFFT.Without_low_SP_Col.With_Names\>\""}], ",", 
               " ", "\"\<String\>\""}], "]"}], " ", ",", "\"\<String\>\""}], 
            "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Export", "[", 
            RowBox[{
             RowBox[{"exportName", "=", 
              RowBox[{
               RowBox[{"ParentDirectory", "[", 
                RowBox[{"ParentDirectory", "[", "]"}], "]"}], "<>", 
               "\"\<\\\\missed\\\\\>\"", "<>", "fileName"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Import", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
                "\"\<Seqs.Orig.fas\>\""}], ",", " ", "\"\<String\>\""}], 
              "]"}], " ", ",", "\"\<String\>\""}], "]"}]}], 
          "\[IndentingNewLine]", " ", "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"SetDirectory", "[", 
          RowBox[{"ParentDirectory", "[", 
           RowBox[{"ParentDirectory", "[", "]"}], "]"}], "]"}], ";"}], 
        "\[IndentingNewLine]", ",", " ", 
        RowBox[{"{", 
         RowBox[{"i", ",", " ", "1", ",", " ", 
          RowBox[{"Length", "[", "folderList", "]"}]}], "}"}]}], "]"}], 
      ";"}]}], "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7135157851978283`*^9, 3.7135157948217154`*^9}, {
   3.7135158282771177`*^9, 3.713515854246419*^9}, {3.71351589787943*^9, 
   3.71351602709061*^9}, {3.713516077865119*^9, 3.713516161638031*^9}, {
   3.713516258436837*^9, 3.713516388819748*^9}, 3.7135167469017873`*^9, 
   3.7135167795293555`*^9, {3.713516873173561*^9, 3.713516880952553*^9}, {
   3.7135169390989237`*^9, 3.713517023621093*^9}, {3.7135170965367527`*^9, 
   3.7135171275924006`*^9}, {3.713517428176104*^9, 3.7135174317903337`*^9}, {
   3.7135175423438845`*^9, 3.7135175496745863`*^9}, 3.7135175875313234`*^9, {
   3.713517675160123*^9, 3.7135176767067223`*^9}, {3.7135177606611547`*^9, 
   3.7135177680939274`*^9}, {3.713518061061511*^9, 3.7135180884854507`*^9}, {
   3.7135184947020006`*^9, 3.7135185092966723`*^9}, {3.713518558359112*^9, 
   3.7135186392093725`*^9}, {3.7135193664578815`*^9, 
   3.7135193761881466`*^9}, {3.7135198196355596`*^9, 
   3.7135198229242325`*^9}, {3.7135198785301266`*^9, 
   3.7135199379674435`*^9}, {3.713608386908037*^9, 3.7136083892878523`*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "SetDirectory", "[", "\"\<D:\\\\Data_storage\\\\Guidance outputs\>\"", 
     "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
     "gUIDANCE2OutputParse", "[", 
      "\"\<D:\\\\Data_storage\\\\Guidance outputs\>\"", 
      "]"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.713517197655161*^9, 3.7135172011084557`*^9}, {
   3.7135176431437044`*^9, 3.71351764438113*^9}, {3.7135177047593575`*^9, 
   3.7135177101757283`*^9}, {3.7135198316966867`*^9, 3.713519862926525*^9}, {
   3.7135199469886036`*^9, 3.7135199600898476`*^9}, 3.7135202841574197`*^9, {
   3.7136078790449295`*^9, 3.713607883232883*^9}, {3.713607924496901*^9, 
   3.71360793937469*^9}, {3.713608070987892*^9, 3.7136080816598864`*^9}, {
   3.716878868491592*^9, 3.716878870481061*^9}},
 EmphasizeSyntaxErrors->True]
}, Closed]],

Cell[CellGroupData[{

Cell["Masking alignment based on GUIDANCE2 residues", "Subsection",
 CellChangeTimes->{{3.7229513349861326`*^9, 3.7229513441655426`*^9}}],

Cell[TextData[{
 "Guidance2 outputs residual scores for alignment positions that can be used \
to mask the alignment, rather then masking the alignment itself. This \
function will take the input alignment and mask the positions.\n\tThere are \
two functions below. For most applications you can just use the top one, \
which will map automatically onto the subfolders of the guidance output \
folder. It will also generate a spreadsheet with the masking meta-data. \n\t\
The default values for the two parameters are the same as the Guidance2 \
defaults. However, there is a condition in the script which says that if the \
first parameter masks too many sites, it will repeat with a less stringent \
cutoff. \n\tNote: My informal sensitivity analysis suggests that the \
cutoffRow value isn\[CloseCurlyQuote]t necessarily a good guide for cutting \
out taxa. The ones I would cut out are different than the ones it does cut \
out. Also, this is highly dependant on the alignment shape. As such, I prefer \
to keep it low (~.5). Similarly, the cutoffNuc parameter doesn\
\[CloseCurlyQuote]t need to be so high. It seems to cut out too much (also \
dependant on the alignment shape). A lower value (~.65) might be more \
appropriate. However, the condition of retaining a minimum of sites makes it \
so that you can keep the default pretty high.\n\t",
 StyleBox["Parameters",
  FontSlant->"Italic"],
 StyleBox[":\n\toutputDirectory",
  FontWeight->"Bold"],
 " = the directory which contains the folders that contain the Guidance2 \
outputs. Each of the subfolders should be named with the alignment name.\n\t",
 StyleBox["cutoffNuc",
  FontWeight->"Bold"],
 " = the maximum residue score you will accept for a given nucleotide \
position. Higher value means more sites will be cut out. Lower value means \
you conserve more sites. Default = 0.93.\n\t",
 StyleBox["cutoffRow",
  FontWeight->"Bold"],
 " = the maximum residue score you will accept for a given taxon. Higher \
value means more taxa will be cut out. Lower value means you conserve more \
taxa. Default = 0.6."
}], "Text",
 CellChangeTimes->{{3.722951348807887*^9, 3.7229513525759115`*^9}, 
   3.722951813887539*^9, {3.722951869879019*^9, 3.722951909758112*^9}, {
   3.722954440855382*^9, 3.722954488140134*^9}, {3.7231157584581437`*^9, 
   3.723115884559498*^9}, {3.7231159192061687`*^9, 3.723116309324044*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"guidance2MaskAlign", "[", 
   RowBox[{
   "\"\<F:\\\\Dropbox\\\\Projects\\\\Phylogeny of Blaberoidea\\\\Alignments\\\
\\orthographs + transcriptomes only targetted aligned and ends trimmed dec \
2017\\\\Guidance outputs\>\"", ",", " ", ".7", ",", " ", ".5"}], "]"}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7230991552808385`*^9, 3.723099160816811*^9}, {
   3.723101743687399*^9, 3.7231017611393914`*^9}, {3.7231018023546*^9, 
   3.7231018024825983`*^9}, {3.723101841188867*^9, 3.7231018414048653`*^9}, {
   3.7231025374796357`*^9, 3.7231025414940658`*^9}, {3.723102954564707*^9, 
   3.7231029808665257`*^9}, 3.7231031834927197`*^9, {3.7231034730043383`*^9, 
   3.723103474731305*^9}, {3.7231105231066294`*^9, 3.7231105233574553`*^9}, 
   3.7231124254045677`*^9, {3.723112831638217*^9, 3.7231128474955597`*^9}, {
   3.7231136928530846`*^9, 3.7231137405753803`*^9}, {3.7231154917801237`*^9, 
   3.723115492358329*^9}, {3.7233803732503924`*^9, 3.723380377468093*^9}, {
   3.7238930445129538`*^9, 3.72389306756045*^9}, {3.723893201474476*^9, 
   3.7238932038208847`*^9}, {3.7238933733806973`*^9, 3.723893399396289*^9}, 
   3.7239249683941236`*^9, 3.723947848452982*^9, {3.723948415784893*^9, 
   3.7239484182899942`*^9}, {3.723953719353917*^9, 3.723953722051981*^9}, {
   3.7239692829412355`*^9, 3.723969289696558*^9}, 3.7239705368950844`*^9, {
   3.7239742662872305`*^9, 3.723974274128011*^9}, 3.72398558817624*^9, 
   3.7239858778420553`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"guidance2MaskAlign", "[", 
   RowBox[{
   "outputDirectory_", ",", " ", "cutoffNuc_", ",", " ", "cutoffRow_"}], " ", 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fn", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "outputDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fn", "=", 
      RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"metaData", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"{", 
       RowBox[{
       "\"\<AlignName\>\"", ",", " ", "\"\<AlignLength\>\"", ",", " ", 
        "\"\<# taxa\>\"", ",", " ", "\"\<% nucs masked\>\"", ",", " ", 
        "\"\<# nucs masked\>\"", ",", "\"\<% taxa masked\>\"", ",", " ", 
        "\"\<# taxa masked\>\""}], "}"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"maskFromGuidance", "[", 
        RowBox[{"#", ",", "cutoffNuc", ",", " ", "cutoffRow"}], "]"}], "&"}], 
      "/@", "fn"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"\"\<maskingMetaData.csv\>\"", ",", 
       RowBox[{"Flatten", "[", 
        RowBox[{"metaData", ",", " ", "1"}], "]"}], ",", " ", "\"\<CSV\>\""}],
       "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7231123961960382`*^9, 3.723112503799706*^9}, {
  3.7231126404959164`*^9, 3.723112644461095*^9}, {3.72311297017138*^9, 
  3.723112992643259*^9}, {3.723113068554382*^9, 3.723113102215474*^9}, {
  3.7231133613029566`*^9, 3.723113364301138*^9}, {3.723113430856947*^9, 
  3.7231134341878233`*^9}, {3.723113476179228*^9, 3.7231134946074266`*^9}, {
  3.723113529171075*^9, 3.7231135456752596`*^9}, {3.7231135770057774`*^9, 
  3.7231136532054567`*^9}, {3.7231136853262253`*^9, 3.723113688949047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"maskFromGuidance", "[", 
    RowBox[{
    "outputDirectory_", ",", " ", "cutoffNuc_", ",", " ", "cutoffRow_"}], 
    "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "residualSheet", ",", " ", "residualsUseful", ",", "alignment", ",", 
       "newAlignment", ",", " ", "rowResidualQuality", ",", " ", 
       "rowResidualSheet", ",", " ", "residualsQuality", ",", "alignL", ",", 
       "taxN", ",", "alignName", ",", "cutOffNuc"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cutOffNuc", "=", "cutoffNuc"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"residualSheet", "=", 
       RowBox[{"Import", "[", 
        RowBox[{
         RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
         "outputDirectory", "<>", 
         "\"\<\\\\MSA.MAFFT.Guidance2_res_pair_res.scr\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rowResidualSheet", "=", 
       RowBox[{"Import", "[", 
        RowBox[{
         RowBox[{"Directory", "[", "]"}], "<>", "\"\<\\\\\>\"", "<>", 
         "outputDirectory", "<>", 
         "\"\<\\\\MSA.MAFFT.Guidance2_res_pair_seq.scr\>\""}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rowResidualSheet", "=", 
       RowBox[{"rowResidualSheet", "[", 
        RowBox[{"[", 
         RowBox[{"2", ";;", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Length", "[", "rowResidualSheet", "]"}], "-", "1"}], 
           ")"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MemberQ", "[", 
         RowBox[{"residualSheet", ",", " ", "\"\<-nan\>\""}], "]"}], ",", " ", 
        RowBox[{"Null", ";"}], ",", " ", 
        RowBox[{
         RowBox[{"residualsUseful", "=", 
          RowBox[{"residualSheet", "[", 
           RowBox[{"[", 
            RowBox[{"2", ";;", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"Length", "[", "residualSheet", "]"}], "-", "1"}], 
              ")"}]}], "]"}], "]"}]}], ";", 
         RowBox[{"Goto", "[", "\"\<skip\>\"", "]"}], ";"}]}], "]"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"residualsUseful", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"Drop", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"GatherBy", "[", 
            RowBox[{
             RowBox[{"residualSheet", "[", 
              RowBox[{"[", 
               RowBox[{"2", ";;", 
                RowBox[{"(", 
                 RowBox[{
                  RowBox[{"Length", "[", "residualSheet", "]"}], "-", "1"}], 
                 ")"}]}], "]"}], "]"}], ",", " ", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "3", "]"}], "]"}], "&"}]}], "]"}], ",", "1"}], 
          "]"}], ",", " ", "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<skip\>\"", "]"}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"deletes", " ", "the", " ", "columns", " ", "with"}], " ", 
        "-", "nan"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"alignment", "=", 
       RowBox[{"importAlignment", "[", 
        RowBox[{
        "outputDirectory", "<>", "\"\<\\\\MSA.MAFFT.aln.With_Names\>\""}], 
        "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"rowResidualQuality", "=", 
       RowBox[{"Extract", "[", 
        RowBox[{"rowResidualSheet", ",", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"rowResidualSheet", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "2"}], "]"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"x_", "/;", 
              RowBox[{"x", "<", "cutoffRow"}]}], "\[Rule]", 
             "\"\<Mask\>\""}]}], ",", " ", "\"\<Mask\>\""}], "]"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"above", ":", " ", 
        RowBox[{
        "identifies", " ", "the", " ", "rows", " ", "with", " ", "residual", 
         " ", "scores", " ", "below", " ", "the", " ", "cutoff"}]}], "*)"}], 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Label", "[", "\"\<repeat\>\"", "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"residualsQuality", "=", 
       RowBox[{"Extract", "[", 
        RowBox[{"residualsUseful", ",", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"residualsUseful", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", "3"}], "]"}], "]"}], "/.", 
            RowBox[{
             RowBox[{"x_", "/;", 
              RowBox[{"x", "<", "cutOffNuc"}]}], "\[Rule]", 
             "\"\<Mask\>\""}]}], ",", " ", "\"\<Mask\>\""}], "]"}]}], "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
       "identifies", " ", "and", " ", "extracts", " ", "only", " ", "those", 
        " ", "data", " ", "entries", " ", "with", " ", "residues", " ", 
        "beneath", " ", "the", " ", "default", " ", "Guidance2Cutoff", " ", 
        "score"}], " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"newAlignment", "=", "alignment"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"below", ":", " ", 
        RowBox[{"mask", " ", "nucleotides"}]}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"newAlignment", "=", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"newAlignment", ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}], ",", " ", "2"}], "}"}], 
               "\[Rule]", 
               RowBox[{"StringReplacePart", "[", 
                RowBox[{
                 RowBox[{"newAlignment", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", " ", "2"}], "]"}], 
                  "]"}], ",", " ", "\"\<?\>\"", ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                   RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], " ", "}"}]}], "]"}]}]}],
              "]"}]}], ")"}], ";"}], "&"}], "/@", "residualsQuality"}], ")"}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"alignL", "=", 
       RowBox[{
        RowBox[{"newAlignment", "[", 
         RowBox[{"[", 
          RowBox[{"1", ",", " ", "2"}], "]"}], "]"}], "//", 
        "StringLength"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"taxN", "=", 
       RowBox[{"newAlignment", "//", "Length"}]}], ";", "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"residualsQuality", "//", "Length"}], ")"}], "/", 
              RowBox[{"(", 
               RowBox[{"alignL", "*", "taxN"}], ")"}]}], ")"}], "//", "N"}], 
           " ", ")"}], "*", "100"}], "]"}], "<>", 
        "\"\<% of nucleotides masked. \>\"", "<>", " ", 
        RowBox[{"ToString", "[", 
         RowBox[{"residualsQuality", "//", "Length"}], "]"}], "<>", 
        "\"\< total masked.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"below", ":", " ", 
        RowBox[{"mask", " ", "species"}]}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"newAlignment", "=", 
           RowBox[{"ReplacePart", "[", 
            RowBox[{"newAlignment", ",", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"#", "[", 
                 RowBox[{"[", "1", "]"}], "]"}], ",", " ", "2"}], "}"}], 
              "\[Rule]", 
              RowBox[{"StringRepeat", "[", 
               RowBox[{"\"\<?\>\"", ",", "alignL"}], "]"}]}]}], "]"}]}], 
          ";"}], ")"}], "&"}], "/@", "rowResidualQuality"}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{"ToString", "[", 
         RowBox[{"rowResidualQuality", "//", "Length"}], "]"}], "<>", 
        "\"\< species masked. \>\"", "<>", " ", 
        RowBox[{"ToString", "[", "taxN", "]"}], "<>", "\"\< total spp.\>\""}],
        "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"alignL", "*", "taxN"}], ")"}], "-", 
          RowBox[{"(", 
           RowBox[{"residualsQuality", "//", "Length"}], ")"}]}], "<", 
         RowBox[{"(", 
          RowBox[{"120", "*", "taxN"}], ")"}]}], ",", 
        RowBox[{
         RowBox[{"cutOffNuc", "=", 
          RowBox[{"cutOffNuc", "-", ".025"}]}], ";", 
         RowBox[{
         "Print", "[", "\"\<...masked too much...repeating\>\"", "]"}], ";", 
         " ", 
         RowBox[{"Goto", "[", "\"\<repeat\>\"", "]"}], ";"}], ",", " ", 
        RowBox[{"Null", ";"}]}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{"above", ":", " ", 
        RowBox[{
        "says", " ", "that", " ", "we", " ", "should", " ", "repeat", " ", 
         "the", " ", "masking", " ", "with", " ", "a", " ", "lower", " ", 
         "cutoff", " ", "if", " ", "it", " ", "takes", " ", "out", " ", "too",
          " ", "many", " ", "nucleotides"}]}], "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{"alignName", "=", 
           RowBox[{
            RowBox[{"Riffle", "[", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{
                RowBox[{"StringSplit", "[", 
                 RowBox[{"outputDirectory", ",", " ", "\"\<.\>\""}], "]"}], 
                ",", 
                RowBox[{"-", "1"}]}], "]"}], ",", " ", "\"\<.\>\""}], "]"}], "//",
             "StringJoin"}]}], ")"}], "<>", "\"\<.align\>\""}], ",", " ", 
        RowBox[{"newAlignment", "//", "fastaOutput"}], ",", " ", 
        "\"\<Text\>\""}], "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"metaData", "=", 
       RowBox[{"Append", "[", 
        RowBox[{"metaData", ",", " ", 
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
           "alignName", ",", " ", "alignL", ",", " ", "taxN", ",", " ", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"residualsQuality", "//", "Length"}], ")"}], "/", 
                 RowBox[{"(", 
                  RowBox[{"alignL", "*", "taxN"}], ")"}]}], ")"}], "//", 
               "N"}], " ", ")"}], "*", "100"}], ",", " ", 
            RowBox[{"residualsQuality", "//", "Length"}], ",", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"rowResidualQuality", "//", "Length"}], ")"}], "/", 
                 "taxN"}], ")"}], "//", "N"}], ")"}], "*", "100"}], ",", " ", 
            RowBox[{"rowResidualQuality", "//", "Length"}], ",", " ", 
            "cutOffNuc", ",", " ", "cutoffRow"}], "}"}], "}"}]}], "]"}]}], 
      ";"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{
  3.723102598849451*^9, {3.7231027422743654`*^9, 3.723102758492445*^9}, {
   3.7231031716543674`*^9, 3.7231031782013445`*^9}, {3.723103210717304*^9, 
   3.7231032722167864`*^9}, {3.7231036278234205`*^9, 
   3.7231036299993825`*^9}, {3.7231038215847745`*^9, 3.723103822606312*^9}, {
   3.7231118842549953`*^9, 3.723112003433916*^9}, {3.7231120720766783`*^9, 
   3.723112077963503*^9}, {3.7231121086944027`*^9, 3.7231121489154596`*^9}, {
   3.723112194806983*^9, 3.723112281390997*^9}, {3.723112318961501*^9, 
   3.723112340990094*^9}, 3.7231123744582634`*^9, {3.7231125195414276`*^9, 
   3.7231128209038773`*^9}, {3.723113001774426*^9, 3.7231130019619803`*^9}, {
   3.7231131955659885`*^9, 3.7231132195448756`*^9}, {3.723113343275095*^9, 
   3.7231133485243855`*^9}, {3.7231134176530037`*^9, 
   3.7231134210686727`*^9}, {3.7231149561867867`*^9, 
   3.7231152608646593`*^9}, {3.7231153024689407`*^9, 
   3.7231154087299166`*^9}, {3.723115439889886*^9, 3.723115474834508*^9}, {
   3.723115582442095*^9, 3.723115582675828*^9}, 3.7231157292209744`*^9, {
   3.723116471274476*^9, 3.7231165208847218`*^9}, {3.7239496520834517`*^9, 
   3.723949654152066*^9}, {3.7239498809795485`*^9, 3.7239498972942677`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"maskFromGuidance", "[", "outputDirectory_", "]"}], ":=", 
   RowBox[{"maskFromGuidance", "[", 
    RowBox[{"outputDirectory", ",", " ", ".93", ",", " ", ".6"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7231017116194124`*^9, 3.723101723047409*^9}, {
   3.723103363039832*^9, 3.723103363320754*^9}, 3.7231123777518573`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell["Making saturation plots", "Subsection",
 CellChangeTimes->{{3.716111364199256*^9, 3.716111368055132*^9}}],

Cell[CellGroupData[{

Cell["Pairwise saturation plots i.e. 1:1 plots", "Subsubsection",
 CellChangeTimes->{{3.71687832611628*^9, 3.7168783349000664`*^9}}],

Cell[TextData[{
 "This function will make a single saturation plot from two genetic distance \
matricies (from PAUP).\n",
 StyleBox["correctedDistances",
  FontWeight->"Bold"],
 " - PAUP output of the corrected distance matrix\n",
 StyleBox["rawDistances",
  FontWeight->"Bold"],
 " -  PAUP output of the uncorrected distance matrix\n",
 StyleBox["locusName",
  FontWeight->"Bold"],
 " - the name of the locus\n",
 StyleBox["modelCorrection",
  FontWeight->"Bold"],
 " - the name of the model used for the corrected distances (e.g.JC, GTR)\n",
 StyleBox["toDelete",
  FontWeight->"Bold"],
 " - a list of taxon names to be excluded from the distance matrix."
}], "Text",
 CellChangeTimes->{{3.7161113740389614`*^9, 3.7161114034903555`*^9}, {
  3.716117388494306*^9, 3.7161174606282144`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"saturationPlot", "[", 
    RowBox[{
    "correctedDistances_List", ",", " ", "rawDistances_List", ",", 
     "locusName_", ",", "modelCorrection_String", ",", " ", "toDelete_List"}],
     "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "aa", ",", " ", "bb", ",", " ", "cDistances", ",", " ", "rDistances", 
       ",", "numToDrop"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "delete", " ", "rows", " ", "that", " ", "are", " ", "part", " ", "of", 
       " ", "the", " ", "toDelete", " ", "list", " ", "of", " ", "taxa"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"cDistances", "=", 
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"ContainsAny", "[", 
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"{", 
                    RowBox[{"1", ",", " ", "2"}], "}"}], "]"}], "]"}], ",", 
                 RowBox[{"toDelete", " ", "//", "Flatten"}]}], "]"}], ",", 
               " ", 
               RowBox[{"{", "}"}], ",", " ", 
               RowBox[{"#", "[", 
                RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "&"}], "/@", 
            "correctedDistances"}], "\[IndentingNewLine]", ",", " ", 
           RowBox[{"{", "}"}]}], "]"}], ")"}]}], ";"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"cDistances", "=", 
       RowBox[{"deleteDistances", "[", 
        RowBox[{"correctedDistances", ",", "toDelete"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"rDistances", "=", 
       RowBox[{"deleteDistances", "[", 
        RowBox[{"rawDistances", ",", "toDelete"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{"plot", "=", 
         RowBox[{"Show", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"(", "cDistances", ")"}], ",", 
                 RowBox[{"(", "rDistances", ")"}]}], "}"}], "//", 
               "Transpose"}], "//", "Rescale"}], ",", " ", 
             RowBox[{"PlotLabel", "\[Rule]", 
              RowBox[{
              "modelCorrection", "<>", "\"\< vs uncorrected distances: \>\"", 
               "<>", "locusName"}]}], ",", " ", 
             RowBox[{"PlotTheme", "\[Rule]", " ", "\"\<Scientific\>\""}], ",",
              " ", 
             RowBox[{"Frame", "\[Rule]", "True"}], ",", " ", 
             RowBox[{"PlotStyle", "\[Rule]", "Orange"}], " ", ",", " ", 
             RowBox[{"FrameLabel", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"modelCorrection", "<>", "\"\< corrected\>\""}], ",", 
                " ", "\"\<Uncorrected\>\""}], "}"}]}], ",", " ", 
             RowBox[{"LabelStyle", "\[Rule]", 
              RowBox[{"{", "\"\<Corbel\>\"", "}"}]}], ",", 
             RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", " ", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.", ",", " ", "1."}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", " ", "1."}], "}"}]}], "}"}]}]}], "]"}], 
           ",", "\[IndentingNewLine]", 
           RowBox[{"Plot", "[", 
            RowBox[{"x", ",", " ", 
             RowBox[{"{", 
              RowBox[{"x", ",", " ", "0", ",", " ", "100"}], "}"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Dashed", ",", "Black"}], "}"}]}], ",", " ", 
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0.", ",", " ", "1."}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"0.", ",", " ", "1."}], "}"}]}], "}"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}]}], ";"}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"plot", "=", 
       RowBox[{"satPlot", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"(", "cDistances", ")"}], ",", 
            RowBox[{"(", "rDistances", ")"}]}], "}"}], "}"}], ",", 
         "modelCorrection", ",", " ", "locusName"}], " ", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Export", "[", 
       RowBox[{
        RowBox[{
        "locusName", "<>", "modelCorrection", "<>", "\"\<_satPlot.PNG\>\""}], 
        ",", "plot", ",", "\"\<PNG\>\"", ",", " ", 
        RowBox[{"ImageResolution", "\[Rule]", "500"}]}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7161078754635754`*^9, 3.716107995472268*^9}, {
   3.716108051977022*^9, 3.7161080680677567`*^9}, {3.716108115393752*^9, 
   3.7161081850610456`*^9}, {3.716108311375987*^9, 3.7161083358319855`*^9}, {
   3.7161083815977926`*^9, 3.716108410947603*^9}, {3.716108481042878*^9, 
   3.7161085222543373`*^9}, {3.716108761840354*^9, 3.7161089695276423`*^9}, {
   3.7161090726508183`*^9, 3.7161090742774673`*^9}, {3.716109280978651*^9, 
   3.716109307849151*^9}, {3.716109362860705*^9, 3.7161093878681116`*^9}, {
   3.7161094286823874`*^9, 3.716109457104004*^9}, {3.7161114246980505`*^9, 
   3.7161115484036217`*^9}, {3.7161115905043354`*^9, 
   3.7161116326981573`*^9}, {3.716111691309047*^9, 3.716111724104086*^9}, {
   3.71611179122165*^9, 3.7161118830364113`*^9}, {3.7161120489721837`*^9, 
   3.7161120923092346`*^9}, {3.7161121383354707`*^9, 3.716112370199484*^9}, 
   3.71611322425924*^9, {3.716113313052164*^9, 3.7161133142710395`*^9}, {
   3.716113505585148*^9, 3.7161135254934607`*^9}, {3.716113840532054*^9, 
   3.716113845811584*^9}, {3.716113878321251*^9, 3.7161138833564577`*^9}, {
   3.7161139151506343`*^9, 3.716113915946866*^9}, {3.7161157366818943`*^9, 
   3.716115792291589*^9}, {3.71611737771397*^9, 3.7161173778233614`*^9}, {
   3.716119471471966*^9, 3.716119511739532*^9}, {3.716119694842496*^9, 
   3.7161196987000437`*^9}, {3.716119730399788*^9, 3.71611973499669*^9}, {
   3.7161197674978385`*^9, 3.716119795944596*^9}, {3.716119890704874*^9, 
   3.71611989350823*^9}, {3.7161199931427736`*^9, 3.716120018646956*^9}, {
   3.7161200792105365`*^9, 3.716120165883864*^9}, {3.7161233229489126`*^9, 
   3.71612333857876*^9}, {3.7161234368920245`*^9, 3.716123437048277*^9}, {
   3.716171828144836*^9, 3.716171834210089*^9}, {3.716172067562484*^9, 
   3.7161720774371367`*^9}, {3.7161730360818453`*^9, 3.716173091970635*^9}}],

Cell[TextData[{
 "This is mostly a formatting function.\n",
 StyleBox["distancesList",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " - needs to be a list of paired lists of the format:\n\t{{corrected \
distances1, raw distances1},\n\t{corrected distances2, raw distances2},\n\t\t\
\t...\n\t{corrected distancesN, raw distancesN}}"
}], "Text",
 CellChangeTimes->{{3.716172839557844*^9, 3.7161728682305403`*^9}, {
  3.7161729106082535`*^9, 3.7161729939418736`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"satPlot", "[", 
   RowBox[{
   "distancesList_List", ",", " ", "modelCorrection_", ",", " ", 
    "locusName_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"cDistances", ",", " ", "rDistances", ",", " ", "dist"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"dist", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{"#", "//", "Transpose"}], ")"}], "&"}], "/@", 
       "distancesList"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Show", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{"dist", ",", " ", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{
          "modelCorrection", "<>", "\"\< vs uncorrected distances: \>\"", "<>",
            "locusName"}]}], ",", " ", 
         RowBox[{"PlotTheme", "\[Rule]", " ", "\"\<Scientific\>\""}], ",", 
         " ", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", " ", 
         RowBox[{"PlotStyle", "\[Rule]", "Orange"}], " ", ",", " ", 
         RowBox[{"FrameLabel", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"modelCorrection", "<>", "\"\< corrected\>\""}], ",", 
            " ", "\"\<Uncorrected\>\""}], "}"}]}], ",", " ", 
         RowBox[{"LabelStyle", "\[Rule]", 
          RowBox[{"{", "\"\<Corbel\>\"", "}"}]}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0.", ",", " ", "1."}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"0.", ",", " ", "1."}], "}"}]}], "}"}]}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Plot", "[", 
        RowBox[{"x", ",", " ", 
         RowBox[{"{", 
          RowBox[{"x", ",", " ", "0", ",", " ", "100"}], "}"}], ",", 
         RowBox[{"PlotStyle", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Dashed", ",", "Black"}], "}"}]}], ",", " ", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"0.", ",", " ", "1."}], "}"}], ",", " ", 
            RowBox[{"{", 
             RowBox[{"0.", ",", " ", "1."}], "}"}]}], "}"}]}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.7161726001404963`*^9, 3.7161728096200438`*^9}, {
   3.716172852134692*^9, 3.7161728525097246`*^9}, {3.716173006814866*^9, 
   3.7161730163912835`*^9}, {3.716173050111261*^9, 3.7161730502518244`*^9}, 
   3.7161731883829813`*^9, {3.716184670849934*^9, 3.7161846714191194`*^9}, {
   3.7168870954469166`*^9, 3.716887099604722*^9}}],

Cell["This code will prepare the data for the saturation plot.", "Text",
 CellChangeTimes->{{3.7161174731636133`*^9, 3.71611748872828*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"prepForSat", "[", 
   RowBox[{
   "distanceDirectory_", ",", "corrFileName_", ",", "rawFileName_", ",", 
    "alignmentDirectory_", ",", "alignmentFile_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", "correctedDistances", " ", ",", "rawDistances"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "alignmentDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"align", "=", 
      RowBox[{"importAlignment", "[", "alignmentFile", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"emptyTaxa", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"align", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"deleteEmptySequences", "[", 
          RowBox[{"align", ",", " ", ".60"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"SetDirectory", "[", "distanceDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"correctedDistances", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"corrFileName", ",", " ", "\"\<TSV\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rawDistances", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"rawFileName", ",", " ", "\"\<TSV\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cDistances", "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"correctedDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"correctedDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"correctedDistances", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "}"}], "//", 
       "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rDistances", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"rawDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"rawDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"rawDistances", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "}"}], "//", 
       "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "cDistances", ",", " ", "rDistances", ",", "alignmentFile", ",", 
       "corrFileName", ",", "  ", "emptyTaxa"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.716117513009209*^9, 3.7161178352161055`*^9}, {
  3.716117871906559*^9, 3.7161179197347717`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"prepForSat", "[", 
   RowBox[{
   "distanceDirectory_", ",", "corrFileName_", ",", "rawFileName_", ",", 
    "alignmentDirectory_", ",", "alignmentFile_", ",", " ", 
    "taxonSpecFile_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"align", ",", "correctedDistances", " ", ",", "rawDistances"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "alignmentDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"align", "=", 
      RowBox[{"importAlignment", "[", "alignmentFile", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"emptyTaxa", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"align", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
        RowBox[{
         RowBox[{"deleteEmptySequences", "[", 
          RowBox[{"align", ",", " ", ".60"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"emptyTaxa2", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"align", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
        RowBox[{"Import", "[", 
         RowBox[{"taxonSpecFile", ",", "\"\<TSV\>\""}], "]"}]}], "]"}]}], ";",
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"SetDirectory", "[", "distanceDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"correctedDistances", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"corrFileName", ",", " ", "\"\<TSV\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rawDistances", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"rawFileName", ",", " ", "\"\<TSV\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"cDistances", "=", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"correctedDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"correctedDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"correctedDistances", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "}"}], "//", 
       "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rDistances", "=", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"rawDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"StringReplace", "[", 
          RowBox[{
           RowBox[{"rawDistances", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", " ", 
           RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], ",", " ", 
         RowBox[{"rawDistances", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], "}"}], "//", 
       "Transpose"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
      "cDistances", ",", " ", "rDistances", ",", "alignmentFile", ",", 
       "corrFileName", ",", "  ", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"emptyTaxa", ",", " ", "emptyTaxa2"}], "}"}], "//", 
        "Flatten"}]}], "}"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.716117513009209*^9, 3.7161178352161055`*^9}, {
  3.716117871906559*^9, 3.7161179197347717`*^9}, {3.7161742262813444`*^9, 
  3.71617428139242*^9}}],

Cell["\<\
This code will delete the distances specified in delete list.\
\>", "Text",
 CellChangeTimes->{{3.716123448378408*^9, 3.7161234762311964`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"deleteDistances", "[", 
    RowBox[{"distances_", ",", "toDelete_"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ParallelMap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"toDelete", " ", "//", "Flatten"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}], "||", 
            "\[IndentingNewLine]", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"toDelete", " ", "//", "Flatten"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], ")"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", "}"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}], "]"}], "&"}], ",", "distances"}],
       "]"}], "\[IndentingNewLine]", ",", " ", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7161224925873413`*^9, 3.71612252247779*^9}, {
  3.716122553774232*^9, 3.7161225568094573`*^9}, {3.716889191864902*^9, 
  3.716889197150786*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"deleteDistances2", "[", 
    RowBox[{"distances_", ",", "toDelete_"}], "]"}], ":=", 
   RowBox[{"DeleteCases", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ParallelMap", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"toDelete", " ", "//", "Flatten"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}]}], " ", "]"}], "||", 
            "\[IndentingNewLine]", 
            RowBox[{"MemberQ", "[", 
             RowBox[{
              RowBox[{"toDelete", " ", "//", "Flatten"}], ",", 
              RowBox[{"#", "[", 
               RowBox[{"[", "2", "]"}], "]"}]}], " ", "]"}]}], ")"}], 
          "\[IndentingNewLine]", ",", " ", 
          RowBox[{"{", "}"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"{", 
             RowBox[{"1", ",", " ", "2", ",", "3"}], "}"}], "]"}], "]"}]}], 
         "]"}], "&"}], ",", "distances"}], "]"}], "\[IndentingNewLine]", ",", 
     " ", 
     RowBox[{"{", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "this", " ", "version", " ", "maintains", " ", "the", " ", "names", " ", 
    "in", " ", "the", " ", "list", " ", "and", " ", "is", " ", "implimented", 
    " ", "in", " ", "the", " ", "branch", " ", "length", " ", "saturation", 
    " ", "plots"}], "*)"}]}]}], "Input",
 CellChangeTimes->{{3.7168892028782434`*^9, 3.7168892466369734`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Genetic distance vs. Tree distance plots", "Subsubsection",
 CellChangeTimes->{{3.7168783413225355`*^9, 3.716878350183279*^9}}],

Cell[TextData[{
 "The function below will create a saturation plot given two distance \
matricies and some formatting text.\n",
 StyleBox["geneticDistanceList",
  FontWeight->"Bold"],
 " - a PAUP formatted list of pairwise genetic distances\n",
 StyleBox["treeDistanceMatrix",
  FontWeight->"Bold"],
 " - an R (function cophenetic()) formatted matrix of pairwise tree distances\
\n",
 StyleBox["locusName ",
  FontWeight->"Bold"],
 "- a string containing the name of the locus, this will be shown as the plot \
title\n",
 StyleBox["model",
  FontWeight->"Bold"],
 " - a string containing the name of the model which will be plotted on an \
axis\n\nNOTE that the plots will end up weird if the genetic distances aren\
\[CloseCurlyQuote]t formatted correctly, so make sure there aren\
\[CloseCurlyQuote]t any invalid distances (resulting from missing data in the \
original matrix)."
}], "Text",
 CellChangeTimes->{{3.7168879416278205`*^9, 3.716888217908499*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"plotBranchSaturation", "[", 
   RowBox[{
   "geneticDistanceList_", ",", " ", "treeDistanceMatrix_", ",", " ", 
    "locusName_", ",", " ", "model_"}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "genDistA", ",", "genDistancesTaxa", ",", "genDistTaxaPositions", ",", 
      "gDA", ",", " ", "geneticDistancesAndPositions", ",", "lm"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{
      "this", " ", "first", " ", "part", " ", "will", " ", "take", " ", 
       "names", " ", "from", " ", "the", " ", "genetic", " ", "distance", " ",
        "list", " ", "and", " ", "format", " ", "the", " ", "spaces", " ", 
       "as", " ", "underlines"}], ",", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "which", " ", "is", " ", "how", " ", "R", " ", "will", " ", "output", 
         " ", "the", " ", "names"}], "..."}], "this", " ", "might", " ", "be",
        " ", "because", " ", "of", " ", "the", " ", "way", " ", "they", " ", 
       "are", " ", "formatted", " ", "in", " ", "the", " ", "tree", " ", 
       "file", " ", "or", " ", "it", " ", "might", " ", "be", " ", "because", 
       " ", "of", " ", 
       RowBox[{"R", ".", " ", "Note"}], " ", "that", " ", "trailing", " ", 
       "spaces", " ", "in", " ", "names", " ", 
       RowBox[{"(", 
        RowBox[{
        "forinstance", " ", "as", " ", "with", " ", "Mantoida_sp", "_"}], 
        ")"}], " ", "will", " ", "mess", " ", "this", " ", "up", " ", "so", 
       " ", "figure", " ", "out", " ", "which", " ", "ones", " ", "have", " ",
        "that", " ", "and", " ", "fix", " ", "them", " ", "manually"}]}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"genDistA", "=", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ParallelMap", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringReplace", "[", 
              RowBox[{"#", ",", " ", 
               RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], "&"}], 
            ",", 
            RowBox[{"geneticDistanceList", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ParallelMap", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"StringReplace", "[", 
              RowBox[{"#", ",", " ", 
               RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], "&"}], 
            ",", 
            RowBox[{"geneticDistanceList", "[", 
             RowBox[{"[", 
              RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"geneticDistanceList", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "}"}], "//", "Transpose"}]}], ";"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"genDistA", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{"#", ",", " ", 
              RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], "&"}], "/@", 
           RowBox[{"geneticDistanceList", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"StringReplace", "[", 
             RowBox[{"#", ",", " ", 
              RowBox[{"\"\< \>\"", "\[Rule]", "\"\<_\>\""}]}], "]"}], "&"}], "/@", 
           RowBox[{"geneticDistanceList", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"geneticDistanceList", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", "3"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "}"}], "//", "Parallelize"}], "//", 
       "Transpose"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "part", " ", "extracts", " ", "the", " ", "names", " ", 
       "of", " ", "all", " ", "the", " ", "taxa", " ", "in", " ", "the", " ", 
       "genetic", " ", "distances", " ", "list"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"genDistancesTaxa", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"genDistA", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", " ", 
             RowBox[{"{", 
              RowBox[{"1", ",", " ", "2"}], "}"}]}], "]"}], "]"}], "//", 
          "Flatten"}], "//", "Union"}], ",", " ", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "part", " ", "makes", " ", "a", " ", "replacement", " ", 
       "list", " ", "for", " ", "all", " ", "the", " ", "names", " ", "in", 
       " ", "the", " ", "genetic", " ", "distances", " ", 
       RowBox[{"list", ".", " ", "this"}], " ", "is", " ", "important", " ", 
       "because", " ", "we", " ", "are", " ", "going", " ", "to", " ", 
       "construct", " ", "the", " ", "data", " ", "by", " ", "replacing", " ",
        "the", " ", "names", " ", "with", " ", "the", " ", "corresponding", 
       " ", "distances"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"genDistTaxaPositions", "=", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#", "->", 
           RowBox[{
            RowBox[{"Position", "[", 
             RowBox[{"treeDistanceMatrix", ",", "#"}], " ", "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ",", " ", "2"}], "]"}], "]"}]}], "}"}], "&"}], ",", 
        "genDistancesTaxa"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
        RowBox[{
        "row", " ", "numbers", " ", "of", " ", "column", " ", "numbers"}], 
        "..."}], "they", " ", "are", " ", "the", " ", "same"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"this", " ", "function", " ", "does", " ", "the", " ", 
       RowBox[{"replacing", ".", " ", "this"}], " ", "will", " ", "make", " ",
        "the", " ", "genetic", " ", "distances", " ", "list", " ", "have", 
       " ", "coordinates", " ", "instead", " ", "of", " ", "taxon", " ", 
       "names"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"gDA", "=", 
      RowBox[{"(", 
       RowBox[{"genDistA", "/.", 
        RowBox[{"(", 
         RowBox[{"genDistTaxaPositions", "//", "Flatten"}], ")"}]}], ")"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"geneticDistancesAndPositions", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"{", 
             RowBox[{"1", ",", " ", "2"}], "}"}], "]"}], "]"}], ",", " ", 
          RowBox[{"#", "[", 
           RowBox[{"[", "3", "]"}], "]"}]}], "}"}], "&"}], "/@", "gDA"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "this", " ", "will", " ", "put", " ", "all", " ", "the", " ", 
       "relevant", " ", "tree", " ", "distances", " ", "in", " ", "the", " ", 
       "x", " ", "axis", " ", "and", " ", "all", " ", "the", " ", "relevant", 
       " ", "genetic", " ", "distances", " ", "in", " ", "the", " ", "y", " ",
        "axis"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"data", "=", 
      RowBox[{"ParallelMap", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"treeDistanceMatrix", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", " ", "1"}], "]"}], "]"}], ",", " ", 
              RowBox[{"#", "[", 
               RowBox[{"[", 
                RowBox[{"1", ",", " ", "2"}], "]"}], "]"}]}], "]"}], "]"}], 
           ",", " ", 
           RowBox[{"#", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "}"}], "&"}], ",", 
        "geneticDistancesAndPositions"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"lm", "=", 
      RowBox[{"LinearModelFit", "[", 
       RowBox[{"data", ",", " ", "x", ",", " ", "x"}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"plot", "=", 
      RowBox[{"Show", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ListPlot", "[", 
         RowBox[{"data", ",", " ", 
          RowBox[{"PlotLabel", "\[Rule]", 
           RowBox[{"(", 
            RowBox[{"locusName", "<>", "\"\< \>\"", "<>", 
             RowBox[{"ToString", "[", 
              RowBox[{"Normal", "[", "lm", "]"}], "]"}]}], ")"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"FrameLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Paired Tree Distance\>\"", ",", " ", 
             RowBox[{"model", "<>", "\"\< genetic distance\>\""}]}], "}"}]}], 
          ",", 
          RowBox[{"PlotTheme", "\[Rule]", " ", "\"\<Scientific\>\""}], ",", 
          " ", 
          RowBox[{"Frame", "\[Rule]", "True"}], ",", " ", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"Directive", "[", 
            RowBox[{"Black", ",", " ", 
             RowBox[{"Opacity", "[", "0.1", "]"}]}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"PlotRange", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0.", ",", " ", "10"}], "}"}], ",", " ", 
             RowBox[{"{", 
              RowBox[{"0.", ",", " ", "1."}], "}"}]}], "}"}]}]}], 
         RowBox[{"(*", "All", "*)"}], 
         RowBox[{"(*", 
          RowBox[{
          "i", " ", "need", " ", "to", " ", "include", " ", "an", " ", 
           "option", " ", "to", " ", "delete", " ", "outliers", " ", "and", 
           " ", "change", " ", "this", " ", "to", " ", "ALL"}], "*)"}], "]"}],
         ",", "\[IndentingNewLine]", 
        RowBox[{"Plot", "[", 
         RowBox[{
          RowBox[{"lm", " ", "[", "x", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"x", ",", " ", "0", ",", " ", "100"}], "}"}], ",", " ", 
          RowBox[{"PlotStyle", "\[Rule]", 
           RowBox[{"Directive", "[", 
            RowBox[{"Red", ",", " ", "Thin"}], "]"}]}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{
       RowBox[{"locusName", "<>", "model", "<>", "\"\<_satPlot.PNG\>\""}], 
       ",", "plot", ",", "\"\<PNG\>\"", ",", " ", 
       RowBox[{"ImageResolution", "\[Rule]", "500"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.716882751035161*^9, 3.7168828859255905`*^9}, {
   3.7168832830188274`*^9, 3.7168833562076488`*^9}, {3.716887120403226*^9, 
   3.7168871928624544`*^9}, 3.716887357396082*^9, {3.716887404453337*^9, 
   3.7168874233853083`*^9}, 3.7168919884294357`*^9, {3.7168931693575325`*^9, 
   3.7168932216494465`*^9}, {3.7168932613768883`*^9, 3.716893283035594*^9}, {
   3.7168933346685343`*^9, 3.716893355289155*^9}, {3.7168934125590963`*^9, 
   3.7168934636657295`*^9}, {3.7168935447841063`*^9, 
   3.7168936503724566`*^9}, {3.7168947363223567`*^9, 
   3.7168947649147425`*^9}, {3.7168948200161824`*^9, 3.716894865061438*^9}, {
   3.7168954136019893`*^9, 3.7168954151833487`*^9}, {3.716898445561312*^9, 
   3.716898449656352*^9}, {3.716899166406354*^9, 3.7168991726781206`*^9}, {
   3.7168997367355423`*^9, 3.7168997485679517`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Calculating rates with TIGER software", "Subsection",
 CellChangeTimes->{{3.725277600995691*^9, 3.7252776108661957`*^9}, {
  3.7252864965996695`*^9, 3.72528650639532*^9}}],

Cell["\<\
The function below will fun TIGER to calculate the rate of all nucleotide \
positions in an alignment. There are three versions. You can specify a custom \
directory that the TIGER files are in, or you can use the default setting, \
which is the directory \[OpenCurlyDoubleQuote]C:\\\\BioSoftware\\\\dist\
\[CloseCurlyDoubleQuote] (where I have my copy of the TIGER files stored). \
You can also specify seperate input and output directories, or you can leave \
everything in one filder (untested).\
\>", "Text",
 CellChangeTimes->{{3.725286320745923*^9, 3.725286430763939*^9}, {
  3.7252864690779266`*^9, 3.7252864861754355`*^9}}],

Cell["\<\
NOTE: that the output numbers in the .txt file are in order of the positions \
in the alignment, and that lower numbers indicate a faster evolutionary rate.\
\>", "Text",
 CellChangeTimes->{{3.725287539105561*^9, 3.725287578245397*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TIGER", "[", "inputDirectory_", "]"}], ":=", 
  RowBox[{"TIGER", "[", 
   RowBox[{
   "inputDirectory", ",", "\"\<C:\\\\BioSoftware\\\\dist\>\"", ",", 
    "inputDirectory"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.725279208127035*^9, 3.725279213085236*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TIGER", "[", 
   RowBox[{"inputDirectory_", ",", "outDirectory_"}], "]"}], ":=", 
  RowBox[{"TIGER", "[", 
   RowBox[{
   "inputDirectory", ",", "\"\<C:\\\\BioSoftware\\\\dist\>\"", ",", 
    "outDirectory"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7252791726308775`*^9, 3.7252791932568674`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TIGER", "[", 
   RowBox[{"inputDirectory_", ",", "runDirectory_", ",", "outDirectory_"}], 
   "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "fn", "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetDirectory", "[", "inputDirectory", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fn", "=", 
      RowBox[{"FileNames", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Block", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"inputFile", ",", "outName"}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"inputFile", "=", "#"}], ";", "\[IndentingNewLine]", 
          RowBox[{"outName", "=", 
           RowBox[{
            RowBox[{"StringSplit", "[", 
             RowBox[{"inputFile", ",", "\"\<.\>\""}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"CopyFile", "[", 
           RowBox[{
            RowBox[{
            "inputDirectory", "<>", "\"\<\\\\\>\"", "<>", "inputFile"}], ",", 
            RowBox[{
            "runDirectory", " ", "<>", "\"\<\\\\\>\"", "<>", "inputFile"}]}], 
           "]"}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"inputFile", "<>", "\"\< starting at \>\"", "<>", " ", 
            RowBox[{"DateString", "[", "]"}]}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"SetDirectory", "[", "runDirectory", "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Run", "[", 
           RowBox[{
           "\"\<tiger.exe -in \>\"", "<>", "inputFile", "<>", "\"\< > \>\"", "<>",
             "outName", "<>", "\"\<.nex -rl \>\"", "<>", "outName", "<>", 
            "\"\<.txt\>\""}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"Print", "[", 
           RowBox[{"inputFile", "<>", "\"\< ... done\>\""}], "]"}], ";", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"CopyFile", "[", 
           RowBox[{
            RowBox[{
            "runDirectory", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
             "\"\<.nex\>\""}], ",", 
            RowBox[{
            "outDirectory", " ", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
             "\"\<.nex\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"CopyFile", "[", 
           RowBox[{
            RowBox[{
            "runDirectory", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
             "\"\<.txt\>\""}], ",", 
            RowBox[{
            "outDirectory", " ", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
             "\"\<.txt\>\""}]}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"DeleteFile", "[", 
           RowBox[{"runDirectory", "<>", "\"\<\\\\\>\"", "<>", "inputFile"}], 
           "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"DeleteFile", "[", 
           RowBox[{
           "runDirectory", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
            "\"\<.nex\>\""}], "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"DeleteFile", "[", 
           RowBox[{
           "runDirectory", "<>", "\"\<\\\\\>\"", "<>", "outName", "<>", 
            "\"\<.txt\>\""}], "]"}], ";", "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"SetDirectory", "[", "inputDirectory", "]"}], ";"}]}], 
        "\[IndentingNewLine]", "]"}], "&"}], "/@", "fn"}]}]}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7252780349298515`*^9, 3.725278062844302*^9}, 
   3.725278126216998*^9, {3.725278169658647*^9, 3.7252781697367783`*^9}, {
   3.7252782182026834`*^9, 3.725278225848924*^9}, {3.7252783225627413`*^9, 
   3.7252784335007877`*^9}, {3.7252784787297416`*^9, 3.725278582944867*^9}, {
   3.725278667419546*^9, 3.7252787287361307`*^9}, {3.7252787933979*^9, 
   3.725278817553884*^9}, {3.725278918537471*^9, 3.7252791115171633`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell["Calculating pairwise distance with PAUP", "Subsection",
 CellChangeTimes->{{3.7253494797641854`*^9, 3.7253494894812527`*^9}}],

Cell["NOT WORKING 19-Jan-2018", "Text",
 CellChangeTimes->{{3.725355447622785*^9, 3.725355458323904*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "SetDirectory", "[", 
    "\"\<F:\\\\Dropbox\\\\Projects\\\\Phylogeny of \
Blaberoidea\\\\Alignments\\\\Ready to merge alignments Jan \
2018\\\\Paup_in\>\"", "]"}], ";", "\[IndentingNewLine]", 
   RowBox[{"fn", "=", 
    RowBox[{"FileNames", "[", "]"}]}], ";"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7253499133112297`*^9, 3.725349934591625*^9}, {
  3.725349981798215*^9, 3.7253500010011425`*^9}, {3.725355472472669*^9, 
  3.7253554743950667`*^9}}],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"newFileName", "=", 
   RowBox[{"alignmentFileConverter", "[", 
    RowBox[{
     RowBox[{"fn", "[", 
      RowBox[{"[", "2", "]"}], "]"}], ",", " ", "1", ",", " ", 
     "\"\<Nexus\>\""}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.725350004105312*^9, 3.7253500816746716`*^9}, {
   3.7253524916763673`*^9, 3.72535249896793*^9}, {3.7253531609557085`*^9, 
   3.725353203793583*^9}, 3.725355462481147*^9}],

Cell[CellGroupData[{

Cell[BoxData["newFileName"], "Input"],

Cell[BoxData["newFileName"], "Output",
 CellChangeTimes->{3.725515320513508*^9, 3.725608164740904*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Run", "[", 
   RowBox[{
   "\"\<CALL paup \>\"", "<>", "newFileName", "<>", 
    "\"\< \n;\nDSet distance=GTR;\n\>\""}], "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7253522998201513`*^9, 3.7253523994696007`*^9}, {
   3.7253531300090094`*^9, 3.7253531432547626`*^9}, {3.72535321797362*^9, 
   3.7253532392662106`*^9}, {3.7253533368629465`*^9, 
   3.7253534251162596`*^9}, {3.725353486377118*^9, 3.725353489438726*^9}, {
   3.7253535307003355`*^9, 3.725353615349743*^9}, {3.72535374556938*^9, 
   3.7253537703475494`*^9}, 3.7253554685360985`*^9}]
}, Open  ]]
}, Open  ]],

Cell["SCRAP", "Title",
 CellChangeTimes->{{3.72387297774014*^9, 3.7238729783005695`*^9}}]
},
WindowSize->{766, 782},
WindowMargins->{{Automatic, -7}, {Automatic, 0}},
Magnification:>1.2 Inherited,
FrontEndVersion->"10.4 for Microsoft Windows (64-bit) (April 11, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 148, 2, 122, "Title"],
Cell[CellGroupData[{
Cell[753, 28, 148, 2, 107, "Chapter"],
Cell[CellGroupData[{
Cell[926, 34, 140, 2, 77, "Subsection"],
Cell[1069, 38, 183, 4, 36, "Text"],
Cell[1255, 44, 279, 6, 60, "Input"],
Cell[1537, 52, 1514, 38, 222, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[3088, 95, 174, 2, 47, "Subsection"],
Cell[3265, 99, 7532, 162, 1356, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[10834, 266, 152, 2, 66, "Subsection"],
Cell[10989, 270, 2703, 70, 405, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[13729, 345, 159, 2, 66, "Subsection"],
Cell[13891, 349, 693, 15, 171, "Text"],
Cell[14587, 366, 644, 16, 175, "Input"],
Cell[15234, 384, 200, 5, 35, "Text"],
Cell[15437, 391, 487, 12, 103, "Text"],
Cell[15927, 405, 1392, 35, 267, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[17356, 445, 176, 2, 47, "Subsection"],
Cell[17535, 449, 453, 7, 129, "Text"],
Cell[17991, 458, 1805, 46, 222, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[19833, 509, 151, 2, 47, "Subsection"],
Cell[19987, 513, 705, 16, 225, "Text"],
Cell[20695, 531, 3488, 81, 615, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[24232, 618, 144, 2, 93, "Chapter"],
Cell[CellGroupData[{
Cell[24401, 624, 161, 2, 58, "Subsection"],
Cell[24565, 628, 227, 4, 58, "Text"],
Cell[24795, 634, 903, 23, 106, "Input"],
Cell[25701, 659, 316, 6, 58, "Text"],
Cell[26020, 667, 2435, 64, 336, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[28504, 737, 173, 3, 93, "Chapter"],
Cell[CellGroupData[{
Cell[28702, 744, 162, 2, 57, "Subsection"],
Cell[28867, 748, 235, 4, 60, "Text"],
Cell[29105, 754, 933, 26, 106, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[30075, 785, 174, 2, 46, "Subsection"],
Cell[30252, 789, 644, 15, 225, "Text"],
Cell[30899, 806, 1905, 47, 453, "Input"],
Cell[32807, 855, 254, 5, 36, "Input"],
Cell[33064, 862, 305, 7, 60, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[33418, 875, 209, 3, 93, "Chapter"],
Cell[CellGroupData[{
Cell[33652, 882, 151, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[33828, 888, 318, 4, 57, "Subsection"],
Cell[34149, 894, 533, 8, 83, "Text"],
Cell[34685, 904, 2782, 68, 407, "Input"],
Cell[37470, 974, 154, 3, 36, "Text"],
Cell[37627, 979, 2279, 61, 407, "Input"],
Cell[39909, 1042, 178, 4, 60, "Text"],
Cell[40090, 1048, 2134, 50, 245, "Input"],
Cell[42227, 1100, 1574, 43, 268, "Input"],
Cell[43804, 1145, 355, 6, 83, "Text"],
Cell[44162, 1153, 470, 11, 83, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[44669, 1169, 166, 2, 46, "Subsection"],
Cell[44838, 1173, 269, 5, 83, "Text"],
Cell[45110, 1180, 1282, 35, 198, "Input"],
Cell[46395, 1217, 232, 5, 60, "Text"],
Cell[46630, 1224, 2506, 57, 384, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[49185, 1287, 258, 4, 77, "Subchapter"],
Cell[CellGroupData[{
Cell[49468, 1295, 226, 3, 76, "Subsection"],
Cell[49697, 1300, 456, 8, 129, "Text"],
Cell[50156, 1310, 1087, 25, 198, "Input"],
Cell[51246, 1337, 93, 1, 36, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[51376, 1343, 197, 3, 65, "Subsection"],
Cell[51576, 1348, 190, 4, 60, "Text"],
Cell[CellGroupData[{
Cell[51791, 1356, 220, 3, 46, "Subsubsection"],
Cell[52014, 1361, 288, 5, 13638, "Text"],
Cell[52305, 1368, 1301, 31, 19734, "Input"],
Cell[53609, 1401, 1416, 34, 29148, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[55062, 1440, 124, 1, 38, "Subsubsection"],
Cell[55189, 1443, 684, 15, 202, "Text"],
Cell[55876, 1460, 894, 22, 198, "Input"],
Cell[56773, 1484, 1150, 27, 245, "Input"],
Cell[57926, 1513, 1368, 33, 245, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[59343, 1552, 202, 3, 65, "Subsection"],
Cell[59548, 1557, 428, 7, 83, "Text"],
Cell[59979, 1566, 756, 20, 129, "Input"],
Cell[60738, 1588, 344, 8, 84, "Text"],
Cell[61085, 1598, 1198, 32, 106, "Input"],
Cell[62286, 1632, 315, 7, 84, "Text"],
Cell[62604, 1641, 1190, 31, 198, "Input"],
Cell[63797, 1674, 1059, 30, 129, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[64893, 1709, 158, 2, 65, "Subsection"],
Cell[65054, 1713, 213, 4, 60, "Text"],
Cell[65270, 1719, 864, 21, 226, "Text"],
Cell[66137, 1742, 4299, 106, 684, "Input"],
Cell[70439, 1850, 3928, 95, 661, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[74404, 1950, 245, 3, 46, "Subsection"],
Cell[74652, 1955, 222, 4, 60, "Text"],
Cell[74877, 1961, 273, 8, 36, "Input"],
Cell[75153, 1971, 1108, 25, 198, "Input"],
Cell[76264, 1998, 525, 10, 200, "Text"],
Cell[76792, 2010, 3890, 89, 615, "Input"],
Cell[80685, 2101, 218, 4, 60, "Text"],
Cell[80906, 2107, 1252, 31, 129, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[82195, 2143, 289, 4, 65, "Subsection"],
Cell[82487, 2149, 991, 24, 273, "Text"],
Cell[83481, 2175, 4606, 113, 661, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[88124, 2293, 282, 4, 46, "Subsection"],
Cell[88409, 2299, 377, 9, 84, "Text"],
Cell[88789, 2310, 141, 3, 36, "Input"],
Cell[88933, 2315, 736, 15, 225, "Text"],
Cell[89672, 2332, 4589, 99, 615, "Input"],
Cell[94264, 2433, 170, 3, 60, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[94471, 2441, 392, 12, 135, "Subsection"],
Cell[94866, 2455, 1158, 24, 319, "Text"],
Cell[96027, 2481, 1979, 48, 337, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[98055, 2535, 154, 2, 77, "Subchapter"],
Cell[CellGroupData[{
Cell[98234, 2541, 107, 1, 57, "Subsection"],
Cell[98344, 2544, 430, 8, 129, "Text"],
Cell[98777, 2554, 1650, 41, 222, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[100464, 2600, 125, 1, 46, "Subsection"],
Cell[100592, 2603, 804, 18, 714, "Text"],
Cell[101399, 2623, 792, 21, 396, "Input"],
Cell[102194, 2646, 362, 9, 288, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[102605, 2661, 189, 3, 77, "Subchapter"],
Cell[CellGroupData[{
Cell[102819, 2668, 226, 3, 57, "Subsection"],
Cell[103048, 2673, 705, 16, 131, "Text"],
Cell[103756, 2691, 3293, 78, 432, "Input"],
Cell[107052, 2771, 258, 5, 60, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[107359, 2782, 158, 2, 77, "Subchapter"],
Cell[CellGroupData[{
Cell[107542, 2788, 121, 1, 57, "Subsection"],
Cell[107666, 2791, 119, 1, 11366, "Text"],
Cell[107788, 2794, 132, 1, 11366, "Text"],
Cell[107923, 2797, 739, 17, 27178, "Input"],
Cell[108665, 2816, 220, 4, 11650, "Input"],
Cell[108888, 2822, 155, 3, 11650, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[109080, 2830, 133, 1, 46, "Subsection"],
Cell[CellGroupData[{
Cell[109238, 2835, 118, 1, 46, "Subsubsection"],
Cell[109359, 2838, 128, 1, 36, "Text"],
Cell[109490, 2841, 1439, 36, 130, "Input"],
Cell[110932, 2879, 126, 1, 36, "Text"],
Cell[111061, 2882, 5835, 132, 570, "Input"],
Cell[116899, 3016, 320, 6, 83, "Text"],
Cell[117222, 3024, 5903, 107, 662, "Input"],
Cell[123128, 3133, 4438, 70, 754, "Input"],
Cell[CellGroupData[{
Cell[127591, 3207, 808, 23, 60, "Input"],
Cell[128402, 3232, 5002, 68, 250, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[133453, 3306, 100, 1, 38, "Subsubsection"],
Cell[133556, 3309, 229, 4, 60, "Text"],
Cell[133788, 3315, 645, 9, 153, "Text"],
Cell[134436, 3326, 152, 2, 37, "Text"],
Cell[134591, 3330, 507, 11, 85, "Text"],
Cell[135101, 3343, 862, 23, 129, "Input"],
Cell[135966, 3368, 213, 3, 37, "Text"],
Cell[136182, 3373, 168, 5, 37, "Text"],
Cell[136353, 3380, 642, 18, 83, "Input"],
Cell[136998, 3400, 155, 2, 37, "Text"],
Cell[137156, 3404, 24309, 568, 3879, "Input"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[161538, 3980, 170, 3, 93, "Chapter"],
Cell[CellGroupData[{
Cell[161733, 3987, 156, 2, 99, "Subchapter"],
Cell[CellGroupData[{
Cell[161914, 3993, 123, 1, 57, "Subsection"],
Cell[162040, 3996, 322, 6, 159, "Text"],
Cell[162365, 4004, 1616, 34, 825, "Text"],
Cell[163984, 4040, 2594, 62, 702, "Input"],
Cell[166581, 4104, 237, 4, 114, "Text"],
Cell[166821, 4110, 2875, 66, 702, "Input"],
Cell[169699, 4178, 118, 1, 68, "Text"],
Cell[169820, 4181, 1757, 37, 342, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[171614, 4223, 133, 1, 46, "Subsection"],
Cell[171750, 4226, 899, 19, 468, "Text"],
Cell[172652, 4247, 3076, 76, 883, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[175777, 4329, 166, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[175968, 4335, 179, 2, 111, "Subsection"],
Cell[176150, 4339, 419, 8, 83, "Text"],
Cell[176572, 4349, 8444, 178, 1379, "Input"],
Cell[185019, 4529, 1463, 37, 268, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[186519, 4571, 180, 2, 65, "Subsection"],
Cell[186702, 4575, 192, 4, 114, "Text"],
Cell[186897, 4581, 392, 10, 252, "Input"],
Cell[187292, 4593, 193, 5, 69, "Input"],
Cell[187488, 4600, 777, 15, 69, "Input"],
Cell[188268, 4617, 1536, 37, 522, "Input"],
Cell[CellGroupData[{
Cell[189829, 4658, 324, 6, 252, "Input"],
Cell[190156, 4666, 1048, 19, 60, "Message"],
Cell[191207, 4687, 471, 6, 60, "Output"]
}, Open  ]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[191739, 4700, 142, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[191906, 4706, 133, 1, 58, "Subsection"],
Cell[192042, 4709, 1591, 30, 397, "Text"],
Cell[193636, 4741, 5126, 123, 704, "Input"],
Cell[198765, 4866, 669, 14, 171, "Text"],
Cell[199437, 4882, 6008, 143, 819, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[205494, 5031, 166, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[205685, 5037, 146, 1, 58, "Subsection"],
Cell[205834, 5040, 1203, 23, 365, "Text"],
Cell[207040, 5065, 14602, 305, 2722, "Input"],
Cell[CellGroupData[{
Cell[221667, 5374, 105, 1, 64, "Subsubsection"],
Cell[221775, 5377, 204, 4, 50, "Text"],
Cell[221982, 5383, 11543, 244, 1770, "Input"],
Cell[233528, 5629, 10425, 220, 1672, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[244002, 5855, 111, 1, 47, "Subsection"],
Cell[244116, 5858, 1291, 28, 320, "Text"],
Cell[245410, 5888, 1397, 31, 222, "Input"],
Cell[246810, 5921, 1468, 32, 222, "Input"],
Cell[248281, 5955, 158, 3, 36, "Text"],
Cell[248442, 5960, 3504, 86, 522, "Input"],
Cell[251949, 6048, 111, 1, 50, "Text"],
Cell[252063, 6051, 93, 1, 50, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[252193, 6057, 170, 2, 47, "Subsection"],
Cell[252366, 6061, 419, 7, 70930, "Text"],
Cell[252788, 6070, 1924, 47, 170020, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[254749, 6122, 172, 3, 83, "Subsection"],
Cell[254924, 6127, 891, 19, 202, "Text"],
Cell[255818, 6148, 5564, 131, 754, "Input"],
Cell[261385, 6281, 257, 5, 60, "Text"],
Cell[261645, 6288, 3976, 102, 569, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[265670, 6396, 143, 2, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[265838, 6402, 175, 2, 58, "Subsection"],
Cell[CellGroupData[{
Cell[266038, 6408, 107, 1, 92, "Subsubsection"],
Cell[266148, 6411, 785, 15, 380, "Text"],
Cell[266936, 6428, 5203, 129, 1874, "Input"],
Cell[272142, 6559, 1017, 22, 512, "Text"],
Cell[273162, 6583, 5842, 136, 1920, "Input"],
Cell[279007, 6721, 162, 3, 68, "Text"],
Cell[279172, 6726, 5896, 136, 1920, "Input"],
Cell[285071, 6864, 262, 5, 114, "Text"],
Cell[285336, 6871, 3584, 88, 1107, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[288957, 6964, 109, 1, 74, "Subsubsection"],
Cell[289069, 6967, 809, 15, 422, "Text"],
Cell[289881, 6984, 481, 11, 69, "Input"],
Cell[290365, 6997, 3290, 84, 1063, "Input"],
Cell[293658, 7083, 225, 4, 114, "Text"],
Cell[293886, 7089, 231, 5, 69, "Input"],
Cell[294120, 7096, 179, 4, 68, "Text"],
Cell[294302, 7102, 1524, 38, 522, "Input"],
Cell[295829, 7142, 132, 1, 495, "Text"],
Cell[295964, 7145, 250, 7, 853, "Input"],
Cell[296217, 7154, 102, 1, 68, "Text"],
Cell[296322, 7157, 4959, 114, 1153, "Input"],
Cell[301284, 7273, 78, 1, 68, "Text"],
Cell[301365, 7276, 477, 12, 160, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[301891, 7294, 181, 3, 47, "Subsection"],
Cell[302075, 7299, 1891, 40, 900, "Text"],
Cell[303969, 7341, 1507, 34, 480, "Input"],
Cell[305479, 7377, 1103, 27, 480, "Input"],
Cell[306585, 7406, 1048, 26, 480, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[307682, 7438, 152, 2, 79, "Subchapter"],
Cell[307837, 7442, 202, 4, 58, "Text"],
Cell[CellGroupData[{
Cell[308064, 7450, 127, 1, 58, "Subsection"],
Cell[308194, 7453, 229, 4, 60, "Text"],
Cell[308426, 7459, 296, 4, 83, "Text"],
Cell[308725, 7465, 438, 7, 129, "Text"],
Cell[309166, 7474, 152, 2, 37, "Text"],
Cell[309321, 7478, 507, 11, 85, "Text"],
Cell[309831, 7491, 967, 24, 129, "Input"],
Cell[310801, 7517, 213, 3, 37, "Text"],
Cell[311017, 7522, 168, 5, 37, "Text"],
Cell[311188, 7529, 696, 18, 83, "Input"],
Cell[311887, 7549, 155, 2, 37, "Text"],
Cell[312045, 7553, 22203, 514, 3486, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[334285, 8072, 105, 1, 47, "Subsection"],
Cell[334393, 8075, 157, 3, 36, "Text"],
Cell[334553, 8080, 502, 12, 129, "Input"],
Cell[335058, 8094, 510, 13, 106, "Input"],
Cell[335571, 8109, 3175, 80, 593, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[338783, 8194, 128, 1, 47, "Subsection"],
Cell[338914, 8197, 735, 18, 202, "Text"],
Cell[339652, 8217, 1186, 31, 198, "Input"],
Cell[340841, 8250, 248, 5, 60, "Text"],
Cell[341092, 8257, 21881, 506, 3347, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[363022, 8769, 211, 3, 79, "Subchapter"],
Cell[CellGroupData[{
Cell[363258, 8776, 149, 2, 58, "Subsection"],
Cell[363410, 8780, 189, 4, 117, "Text"],
Cell[363602, 8786, 533, 14, 303, "Text"],
Cell[364138, 8802, 760, 18, 253, "Input"],
Cell[364901, 8822, 859, 23, 388, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[365797, 8850, 179, 2, 47, "Subsection"],
Cell[365979, 8854, 804, 17, 72, "Text"],
Cell[366786, 8873, 249, 4, 69, "Text"],
Cell[367038, 8879, 492, 14, 117, "Input"],
Cell[367533, 8895, 377, 9, 69, "Input"],
Cell[367913, 8906, 300, 11, 118, "Text"],
Cell[368216, 8919, 4656, 106, 706, "Input"],
Cell[372875, 9027, 4379, 102, 706, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[377291, 9134, 176, 2, 47, "Subsection"],
Cell[377470, 9138, 96, 1, 69, "Text"]
}, Closed]],
Cell[CellGroupData[{
Cell[377603, 9144, 111, 1, 47, "Subsection"],
Cell[377717, 9147, 2041, 33, 552, "Text"],
Cell[379761, 9182, 647, 14, 60, "Input"],
Cell[380411, 9198, 5327, 130, 962, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[385775, 9333, 119, 1, 47, "Subsection"],
Cell[CellGroupData[{
Cell[385919, 9338, 98, 1, 47, "Subsubsection"],
Cell[386020, 9341, 623, 11, 177, "Text"],
Cell[386646, 9354, 2352, 61, 314, "Input"],
Cell[389001, 9417, 192, 6, 36, "Input"],
Cell[389196, 9425, 98, 1, 36, "Text"],
Cell[CellGroupData[{
Cell[389319, 9430, 883, 18, 106, "Input"],
Cell[390205, 9450, 155, 4, 35, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[390409, 9460, 112, 1, 39, "Subsubsection"],
Cell[390524, 9463, 594, 11, 201, "Text"],
Cell[CellGroupData[{
Cell[391143, 9478, 1083, 23, 198, "Input"],
Cell[392229, 9503, 183, 4, 35, "Output"]
}, Open  ]],
Cell[392427, 9510, 3683, 92, 569, "Input"],
Cell[396113, 9604, 160, 3, 60, "Text"],
Cell[396276, 9609, 998, 25, 175, "Input"],
Cell[397277, 9636, 198, 3, 36, "Input"],
Cell[397478, 9641, 197, 3, 36, "Input"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[397760, 9653, 183, 2, 201, "Title"],
Cell[CellGroupData[{
Cell[397968, 9659, 247, 3, 58, "Subsection"],
Cell[398218, 9664, 1628, 28, 533, "Text"],
Cell[CellGroupData[{
Cell[399871, 9696, 139, 2, 47, "Subsubsection"],
Cell[400013, 9700, 230, 4, 58, "Text"],
Cell[400246, 9706, 8074, 179, 1003, "Input"],
Cell[408323, 9887, 203, 4, 58, "Text"],
Cell[408529, 9893, 1343, 33, 221, "Input"],
Cell[409875, 9928, 424, 7, 103, "Text"],
Cell[410302, 9937, 3946, 107, 497, "Input"],
Cell[414251, 10046, 114, 1, 35, "Text"],
Cell[414368, 10049, 4441, 105, 520, "Input"],
Cell[418812, 10156, 5973, 141, 681, "Input"],
Cell[424788, 10299, 696, 18, 126, "Text"],
Cell[425487, 10319, 5066, 113, 750, "Input"],
Cell[430556, 10434, 171, 3, 35, "Text"],
Cell[430730, 10439, 2664, 60, 405, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[433443, 10505, 143, 2, 47, "Subsection"],
Cell[433589, 10509, 417, 10, 290, "Text"],
Cell[434009, 10521, 5172, 108, 1333, "Input"],
Cell[439184, 10631, 889, 19, 160, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[440110, 10655, 137, 1, 47, "Subsection"],
Cell[440250, 10658, 2374, 39, 1135, "Text"],
Cell[442627, 10699, 1484, 23, 252, "Input"],
Cell[444114, 10724, 1873, 39, 476, "Input"],
Cell[445990, 10765, 13335, 309, 4218, "Input"],
Cell[459328, 11076, 378, 8, 288, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[459743, 11089, 111, 1, 47, "Subsection"],
Cell[CellGroupData[{
Cell[459879, 11094, 132, 1, 88, "Subsubsection"],
Cell[460014, 11097, 790, 20, 380, "Text"],
Cell[460807, 11119, 6958, 147, 1424, "Input"],
Cell[467768, 11268, 466, 10, 290, "Text"],
Cell[468237, 11280, 2766, 66, 747, "Input"],
Cell[471006, 11348, 139, 1, 68, "Text"],
Cell[471148, 11351, 3527, 85, 1017, "Input"],
Cell[474678, 11438, 4068, 99, 1107, "Input"],
Cell[478749, 11539, 153, 3, 68, "Text"],
Cell[478905, 11544, 1347, 33, 342, "Input"],
Cell[480255, 11579, 1670, 41, 430, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[481962, 11625, 133, 1, 72, "Subsubsection"],
Cell[482098, 11628, 961, 22, 556, "Text"],
Cell[483062, 11652, 11748, 266, 3318, "Input"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[494859, 11924, 177, 2, 47, "Subsection"],
Cell[495039, 11928, 641, 10, 345, "Text"],
Cell[495683, 11940, 246, 4, 162, "Text"],
Cell[495932, 11946, 295, 7, 162, "Input"],
Cell[496230, 11955, 333, 8, 162, "Input"],
Cell[496566, 11965, 4141, 88, 1659, "Input"]
}, Closed]],
Cell[CellGroupData[{
Cell[500744, 12058, 131, 1, 47, "Subsection"],
Cell[500878, 12061, 105, 1, 35, "Text"],
Cell[500986, 12064, 506, 12, 129, "Input"],
Cell[501495, 12078, 449, 10, 36, "Input"],
Cell[CellGroupData[{
Cell[501969, 12092, 37, 0, 36, "Input"],
Cell[502009, 12094, 102, 1, 36, "Output"]
}, Open  ]],
Cell[502126, 12098, 588, 11, 106, "Input"]
}, Open  ]]
}, Open  ]],
Cell[502741, 12113, 89, 1, 122, "Title"]
}
]
*)

